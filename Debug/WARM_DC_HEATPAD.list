
WARM_DC_HEATPAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c30  08005c30  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005c30  08005c30  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c30  08005c30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00015c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c34  08005c34  00015c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000078  08005cac  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08005cac  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115bc  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321a  00000000  00000000  00031658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00034878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ecf  00000000  00000000  00036908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001786a  00000000  00000000  0003b7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00066b11  00000000  00000000  00053041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9b52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f6c  00000000  00000000  000b9ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b48 	.word	0x08005b48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005b48 	.word	0x08005b48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <btn_progress_loop>:
#include "button.h"

void btn_progress_loop(button_t *btn, uint8_t status)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08b      	sub	sp, #44	; 0x2c
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	000a      	movs	r2, r1
 800024e:	1cfb      	adds	r3, r7, #3
 8000250:	701a      	strb	r2, [r3, #0]
	uint8_t check_stt;

	check_stt = status;
 8000252:	2127      	movs	r1, #39	; 0x27
 8000254:	187b      	adds	r3, r7, r1
 8000256:	1cfa      	adds	r2, r7, #3
 8000258:	7812      	ldrb	r2, [r2, #0]
 800025a:	701a      	strb	r2, [r3, #0]
	if (btn->pinStt)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	691b      	ldr	r3, [r3, #16]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d005      	beq.n	8000270 <btn_progress_loop+0x2c>
	{
		check_stt = btn->pinStt();
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	187c      	adds	r4, r7, r1
 800026a:	4798      	blx	r3
 800026c:	0003      	movs	r3, r0
 800026e:	7023      	strb	r3, [r4, #0]
	}

	if (check_stt)
 8000270:	2327      	movs	r3, #39	; 0x27
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d100      	bne.n	800027c <btn_progress_loop+0x38>
 800027a:	e091      	b.n	80003a0 <btn_progress_loop+0x15c>
	{
		switch (btn->state)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b07      	cmp	r3, #7
 8000282:	d900      	bls.n	8000286 <btn_progress_loop+0x42>
 8000284:	e080      	b.n	8000388 <btn_progress_loop+0x144>
 8000286:	009a      	lsls	r2, r3, #2
 8000288:	4b8b      	ldr	r3, [pc, #556]	; (80004b8 <btn_progress_loop+0x274>)
 800028a:	18d3      	adds	r3, r2, r3
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	469f      	mov	pc, r3
		{
		case _BTN_null:
			btn->state = _BTN_init;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2201      	movs	r2, #1
 8000294:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_INIT_PRESS);
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3314      	adds	r3, #20
 800029a:	2132      	movs	r1, #50	; 0x32
 800029c:	0018      	movs	r0, r3
 800029e:	f000 fabf 	bl	8000820 <timer_set>
			btn->process._timeBeginHold = timer_getTick();
 80002a2:	f000 faa5 	bl	80007f0 <timer_getTick>
 80002a6:	0002      	movs	r2, r0
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80002ac:	e077      	b.n	800039e <btn_progress_loop+0x15a>

		case _BTN_init:
			if (timer_expired(&btn->process._timeout))
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	3314      	adds	r3, #20
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fade 	bl	8000874 <timer_expired>
 80002b8:	1e03      	subs	r3, r0, #0
 80002ba:	d067      	beq.n	800038c <btn_progress_loop+0x148>
				btn->state = _BTN_isPress;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2202      	movs	r2, #2
 80002c0:	701a      	strb	r2, [r3, #0]
			break;
 80002c2:	e063      	b.n	800038c <btn_progress_loop+0x148>

		case _BTN_isPress:
			btn->state = _BTN_wait_hold;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2203      	movs	r2, #3
 80002c8:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_HOLD_ACTIVE);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3314      	adds	r3, #20
 80002ce:	22fa      	movs	r2, #250	; 0xfa
 80002d0:	0092      	lsls	r2, r2, #2
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 faa3 	bl	8000820 <timer_set>

			// callback Press
			if (btn->cb_function)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d056      	beq.n	8000390 <btn_progress_loop+0x14c>
			{
				bt_typeArg_t ArgValue;
				ArgValue.event = BUTTON_PRESS;
 80002e2:	2320      	movs	r3, #32
 80002e4:	18fb      	adds	r3, r7, r3
 80002e6:	2201      	movs	r2, #1
 80002e8:	701a      	strb	r2, [r3, #0]

				btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	8910      	ldrh	r0, [r2, #8]
 80002f2:	6a3a      	ldr	r2, [r7, #32]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4798      	blx	r3
			}

			break;
 80002f8:	e04a      	b.n	8000390 <btn_progress_loop+0x14c>

		case _BTN_wait_hold:
			if (timer_expired(&btn->process._timeout))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3314      	adds	r3, #20
 80002fe:	0018      	movs	r0, r3
 8000300:	f000 fab8 	bl	8000874 <timer_expired>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d045      	beq.n	8000394 <btn_progress_loop+0x150>
			{
				btn->state = _BTN_isHold;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2204      	movs	r2, #4
 800030c:	701a      	strb	r2, [r3, #0]
				// callbak hold Release
				if (btn->cb_function)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	68db      	ldr	r3, [r3, #12]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d03e      	beq.n	8000394 <btn_progress_loop+0x150>
				{
					bt_typeArg_t ArgValue;
					ArgValue.event = BUTTON_HOLD_PRESS;
 8000316:	231c      	movs	r3, #28
 8000318:	18fb      	adds	r3, r7, r3
 800031a:	2204      	movs	r2, #4
 800031c:	701a      	strb	r2, [r3, #0]
					btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	687a      	ldr	r2, [r7, #4]
 8000324:	8910      	ldrh	r0, [r2, #8]
 8000326:	69fa      	ldr	r2, [r7, #28]
 8000328:	2100      	movs	r1, #0
 800032a:	4798      	blx	r3
				}
			}
			break;
 800032c:	e032      	b.n	8000394 <btn_progress_loop+0x150>

		case _BTN_wait_clrMultiClick:
			// restart init ...
			if (!timer_expired(&btn->process._timeout))
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3314      	adds	r3, #20
 8000332:	0018      	movs	r0, r3
 8000334:	f000 fa9e 	bl	8000874 <timer_expired>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d12d      	bne.n	8000398 <btn_progress_loop+0x154>
			{
				btn->state = _BTN_init;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
				timer_set(&btn->process._timeout, _TIME_INIT_PRESS);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3314      	adds	r3, #20
 8000346:	2132      	movs	r1, #50	; 0x32
 8000348:	0018      	movs	r0, r3
 800034a:	f000 fa69 	bl	8000820 <timer_set>
				btn->process._timeBeginHold = timer_getTick();
 800034e:	f000 fa4f 	bl	80007f0 <timer_getTick>
 8000352:	0002      	movs	r2, r0
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	625a      	str	r2, [r3, #36]	; 0x24
			}
			break;
 8000358:	e01e      	b.n	8000398 <btn_progress_loop+0x154>

		case _BTN_isHold:
			btn->timeHold = timer_getTick() - btn->process._timeBeginHold;
 800035a:	f000 fa49 	bl	80007f0 <timer_getTick>
 800035e:	0002      	movs	r2, r0
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000364:	1ad2      	subs	r2, r2, r3
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	605a      	str	r2, [r3, #4]

			// callback Hold on
			if (btn->cb_function)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	68db      	ldr	r3, [r3, #12]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d014      	beq.n	800039c <btn_progress_loop+0x158>
			{
				bt_typeArg_t ArgValue;
				ArgValue.holdInterval_ms = btn->timeHold;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	61bb      	str	r3, [r7, #24]
				btn->cb_function(btn->ID, _BUTTON_FUNC_HOLD, ArgValue);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	8910      	ldrh	r0, [r2, #8]
 8000380:	69ba      	ldr	r2, [r7, #24]
 8000382:	2102      	movs	r1, #2
 8000384:	4798      	blx	r3
			}

			break;
 8000386:	e009      	b.n	800039c <btn_progress_loop+0x158>

		default:
			break;
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	e091      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	e08f      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	e08d      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	e08b      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 8000398:	46c0      	nop			; (mov r8, r8)
 800039a:	e089      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 800039c:	46c0      	nop			; (mov r8, r8)
		}
		return;
 800039e:	e087      	b.n	80004b0 <btn_progress_loop+0x26c>
	}
	// is release
	else
	{
		switch (btn->state)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	3b03      	subs	r3, #3
 80003a6:	2b04      	cmp	r3, #4
 80003a8:	d900      	bls.n	80003ac <btn_progress_loop+0x168>
 80003aa:	e078      	b.n	800049e <btn_progress_loop+0x25a>
 80003ac:	009a      	lsls	r2, r3, #2
 80003ae:	4b43      	ldr	r3, [pc, #268]	; (80004bc <btn_progress_loop+0x278>)
 80003b0:	18d3      	adds	r3, r2, r3
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	469f      	mov	pc, r3
		{
		case _BTN_wait_hold:
			btn->state = _BTN_isRelease;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2205      	movs	r2, #5
 80003ba:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIME_INIT_RELEASE);
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3314      	adds	r3, #20
 80003c0:	2132      	movs	r1, #50	; 0x32
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fa2c 	bl	8000820 <timer_set>
			break;
 80003c8:	e072      	b.n	80004b0 <btn_progress_loop+0x26c>

		case _BTN_isRelease:
			if (timer_expired(&btn->process._timeout))
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	3314      	adds	r3, #20
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fa50 	bl	8000874 <timer_expired>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d066      	beq.n	80004a6 <btn_progress_loop+0x262>
			{
				btn->state = _BTN_isClick;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2206      	movs	r2, #6
 80003dc:	701a      	strb	r2, [r3, #0]
				btn->multiClick++;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	785b      	ldrb	r3, [r3, #1]
 80003e2:	3301      	adds	r3, #1
 80003e4:	b2da      	uxtb	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	705a      	strb	r2, [r3, #1]

				// callback every click
				if (btn->cb_function)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d00a      	beq.n	8000408 <btn_progress_loop+0x1c4>
				{
					bt_typeArg_t ArgValue;
					ArgValue.event = BUTTON_ONECLICK;
 80003f2:	2314      	movs	r3, #20
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	2203      	movs	r2, #3
 80003f8:	701a      	strb	r2, [r3, #0]
					btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	8910      	ldrh	r0, [r2, #8]
 8000402:	697a      	ldr	r2, [r7, #20]
 8000404:	2100      	movs	r1, #0
 8000406:	4798      	blx	r3
				}

				// callback multiClick
				if (btn->cb_function)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d04a      	beq.n	80004a6 <btn_progress_loop+0x262>
				{
					bt_typeArg_t ArgValue;
					ArgValue.numClick = btn->multiClick;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	785a      	ldrb	r2, [r3, #1]
 8000414:	2310      	movs	r3, #16
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	701a      	strb	r2, [r3, #0]
					// if( btn->multiClick > 2)
					btn->cb_function(btn->ID, _BUTTON_FUNC_MULCLICK, ArgValue);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	68db      	ldr	r3, [r3, #12]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	8910      	ldrh	r0, [r2, #8]
 8000422:	693a      	ldr	r2, [r7, #16]
 8000424:	2101      	movs	r1, #1
 8000426:	4798      	blx	r3
				}
			}

			break;
 8000428:	e03d      	b.n	80004a6 <btn_progress_loop+0x262>

		case _BTN_isHold:
			btn->state = _BTN_hold_pass;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2209      	movs	r2, #9
 800042e:	701a      	strb	r2, [r3, #0]
			timer_stop(&btn->process._timeout);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3314      	adds	r3, #20
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fa43 	bl	80008c0 <timer_stop>
			btn->multiClick = 0;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2200      	movs	r2, #0
 800043e:	705a      	strb	r2, [r3, #1]

			// callbak hold Release
			if (btn->cb_function)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d030      	beq.n	80004aa <btn_progress_loop+0x266>
			{
				bt_typeArg_t ArgValue;
				ArgValue.event = BUTTON_HOLD_RELEASE;
 8000448:	230c      	movs	r3, #12
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
				btn->cb_function(btn->ID, _BUTTON_FUNC_EVENT, ArgValue);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	8910      	ldrh	r0, [r2, #8]
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	2100      	movs	r1, #0
 800045c:	4798      	blx	r3
			}

			break;
 800045e:	e024      	b.n	80004aa <btn_progress_loop+0x266>

		case _BTN_isClick:
			btn->state = _BTN_wait_clrMultiClick;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2207      	movs	r2, #7
 8000464:	701a      	strb	r2, [r3, #0]
			timer_set(&btn->process._timeout, _TIMEOUT_MULTICLICK);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3314      	adds	r3, #20
 800046a:	22fa      	movs	r2, #250	; 0xfa
 800046c:	0052      	lsls	r2, r2, #1
 800046e:	0011      	movs	r1, r2
 8000470:	0018      	movs	r0, r3
 8000472:	f000 f9d5 	bl	8000820 <timer_set>

			break;
 8000476:	e01b      	b.n	80004b0 <btn_progress_loop+0x26c>

		case _BTN_wait_clrMultiClick:
			if (timer_expired(&btn->process._timeout))
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	3314      	adds	r3, #20
 800047c:	0018      	movs	r0, r3
 800047e:	f000 f9f9 	bl	8000874 <timer_expired>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d013      	beq.n	80004ae <btn_progress_loop+0x26a>
			{
				btn->state = _BTN_null;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
				timer_stop(&btn->process._timeout);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3314      	adds	r3, #20
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fa15 	bl	80008c0 <timer_stop>
				btn->multiClick = 0;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2200      	movs	r2, #0
 800049a:	705a      	strb	r2, [r3, #1]
			}
			break;
 800049c:	e007      	b.n	80004ae <btn_progress_loop+0x26a>

		default:
			btn->state = _BTN_null;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e004      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	e002      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	e000      	b.n	80004b0 <btn_progress_loop+0x26c>
			break;
 80004ae:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b00b      	add	sp, #44	; 0x2c
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	08005bb8 	.word	0x08005bb8
 80004bc:	08005bd8 	.word	0x08005bd8

080004c0 <OUTPUT_configInit>:
#include "output.h"

void OUTPUT_configInit(OUTPUT_t *tmp, __OutBaseCtrl pinBaseCtrl, __OutEventBlinkCallBack cb_evenOutput)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	60f8      	str	r0, [r7, #12]
 80004c8:	60b9      	str	r1, [r7, #8]
 80004ca:	607a      	str	r2, [r7, #4]
	tmp->pinBaseCtrl = pinBaseCtrl;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	625a      	str	r2, [r3, #36]	; 0x24
	tmp->cb_eventFunction = cb_evenOutput;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b004      	add	sp, #16
 80004de:	bd80      	pop	{r7, pc}

080004e0 <OUTPUT_setOff>:

void OUTPUT_setOff(OUTPUT_t *tmp, clock_time_t delayBegin_ms)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	if (tmp->pinBaseCtrl)
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d028      	beq.n	8000544 <OUTPUT_setOff+0x64>
	{
		tmp->mode = OUT_MODE_OFF;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
		if (delayBegin_ms)
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d00a      	beq.n	8000514 <OUTPUT_setOff+0x34>
		{
			tmp->state = OUT_STATE_WAIT_START;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2200      	movs	r2, #0
 8000502:	705a      	strb	r2, [r3, #1]
			timer_set(&tmp->_timeOut, delayBegin_ms);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	3314      	adds	r3, #20
 8000508:	683a      	ldr	r2, [r7, #0]
 800050a:	0011      	movs	r1, r2
 800050c:	0018      	movs	r0, r3
 800050e:	f000 f987 	bl	8000820 <timer_set>
			{
				tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, 0);
			}
		}
	}
}
 8000512:	e017      	b.n	8000544 <OUTPUT_setOff+0x64>
			tmp->state = OUT_state_finished;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2202      	movs	r2, #2
 8000518:	705a      	strb	r2, [r3, #1]
			tmp->pinBaseCtrl(0);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051e:	2000      	movs	r0, #0
 8000520:	4798      	blx	r3
			timer_stop(&tmp->_timeOut);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3314      	adds	r3, #20
 8000526:	0018      	movs	r0, r3
 8000528:	f000 f9ca 	bl	80008c0 <timer_stop>
			tmp->val_timeLine = 0;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000536:	2b00      	cmp	r3, #0
 8000538:	d004      	beq.n	8000544 <OUTPUT_setOff+0x64>
				tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, 0);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800053e:	2100      	movs	r1, #0
 8000540:	2001      	movs	r0, #1
 8000542:	4798      	blx	r3
}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b002      	add	sp, #8
 800054a:	bd80      	pop	{r7, pc}

0800054c <OUTPUT_setOn>:

/**
 * This function controls OFF
 */
void OUTPUT_setOn(OUTPUT_t *tmp, clock_time_t delayBegin_ms)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
	if (tmp->pinBaseCtrl)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	2b00      	cmp	r3, #0
 800055c:	d028      	beq.n	80005b0 <OUTPUT_setOn+0x64>
	{
		tmp->mode = OUT_MODE_ON;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2202      	movs	r2, #2
 8000562:	701a      	strb	r2, [r3, #0]
		if (delayBegin_ms)
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d00a      	beq.n	8000580 <OUTPUT_setOn+0x34>
		{
			tmp->state = OUT_STATE_WAIT_START;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	705a      	strb	r2, [r3, #1]
			timer_set(&tmp->_timeOut, delayBegin_ms);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3314      	adds	r3, #20
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 f951 	bl	8000820 <timer_set>
			{
				tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, 0);
			}
		}
	}
}
 800057e:	e017      	b.n	80005b0 <OUTPUT_setOn+0x64>
			tmp->state = OUT_state_finished;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2202      	movs	r2, #2
 8000584:	705a      	strb	r2, [r3, #1]
			tmp->pinBaseCtrl(1);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800058a:	2001      	movs	r0, #1
 800058c:	4798      	blx	r3
			timer_stop(&tmp->_timeOut);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	3314      	adds	r3, #20
 8000592:	0018      	movs	r0, r3
 8000594:	f000 f994 	bl	80008c0 <timer_stop>
			tmp->val_timeLine = 0;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d004      	beq.n	80005b0 <OUTPUT_setOn+0x64>
				tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, 0);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005aa:	2100      	movs	r1, #0
 80005ac:	2000      	movs	r0, #0
 80005ae:	4798      	blx	r3
}
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <OUTPUT_blinkHandle>:
		}
	}
}

void OUTPUT_blinkHandle(OUTPUT_t *tmp)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

	if (tmp->pinBaseCtrl)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <OUTPUT_blinkHandle+0x12>
 80005c8:	e10f      	b.n	80007ea <OUTPUT_blinkHandle+0x232>
	{
		if (tmp->mode != OUT_MODE_NO_CONTROL)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d004      	beq.n	80005dc <OUTPUT_blinkHandle+0x24>
			tmp->val_timeLine++;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	611a      	str	r2, [r3, #16]

		switch (tmp->mode)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b03      	cmp	r3, #3
 80005e2:	d05b      	beq.n	800069c <OUTPUT_blinkHandle+0xe4>
 80005e4:	dd00      	ble.n	80005e8 <OUTPUT_blinkHandle+0x30>
 80005e6:	e0f7      	b.n	80007d8 <OUTPUT_blinkHandle+0x220>
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d002      	beq.n	80005f2 <OUTPUT_blinkHandle+0x3a>
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	d028      	beq.n	8000642 <OUTPUT_blinkHandle+0x8a>
				break;
			} // end switch check state of mode blink
			break;

		default:
			break;
 80005f0:	e0f2      	b.n	80007d8 <OUTPUT_blinkHandle+0x220>
			if (timer_expired(&tmp->_timeOut))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3314      	adds	r3, #20
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 f93c 	bl	8000874 <timer_expired>
 80005fc:	1e03      	subs	r3, r0, #0
 80005fe:	d00e      	beq.n	800061e <OUTPUT_blinkHandle+0x66>
				timer_stop(&tmp->_timeOut);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	3314      	adds	r3, #20
 8000604:	0018      	movs	r0, r3
 8000606:	f000 f95b 	bl	80008c0 <timer_stop>
				tmp->state = OUT_state_finished;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2202      	movs	r2, #2
 800060e:	705a      	strb	r2, [r3, #1]
				tmp->pinBaseCtrl(0);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000614:	2000      	movs	r0, #0
 8000616:	4798      	blx	r3
				tmp->val_timeLine = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
			if (tmp->cb_eventFunction)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000622:	2b00      	cmp	r3, #0
 8000624:	d100      	bne.n	8000628 <OUTPUT_blinkHandle+0x70>
 8000626:	e0d9      	b.n	80007dc <OUTPUT_blinkHandle+0x224>
				if (tmp->state != OUT_STATE_WAIT_START)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	785b      	ldrb	r3, [r3, #1]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d100      	bne.n	8000632 <OUTPUT_blinkHandle+0x7a>
 8000630:	e0d4      	b.n	80007dc <OUTPUT_blinkHandle+0x224>
					tmp->cb_eventFunction(OUT_EVENT_OFF_AFTER, tmp->val_timeLine);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	0019      	movs	r1, r3
 800063c:	2001      	movs	r0, #1
 800063e:	4790      	blx	r2
			break;
 8000640:	e0cc      	b.n	80007dc <OUTPUT_blinkHandle+0x224>
			if (timer_expired(&tmp->_timeOut))
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3314      	adds	r3, #20
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f914 	bl	8000874 <timer_expired>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d00e      	beq.n	800066e <OUTPUT_blinkHandle+0xb6>
				timer_stop(&tmp->_timeOut);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3314      	adds	r3, #20
 8000654:	0018      	movs	r0, r3
 8000656:	f000 f933 	bl	80008c0 <timer_stop>
				tmp->state = OUT_STATE_ON;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2201      	movs	r2, #1
 800065e:	705a      	strb	r2, [r3, #1]
				tmp->pinBaseCtrl(1);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000664:	2001      	movs	r0, #1
 8000666:	4798      	blx	r3
				tmp->val_timeLine = 0;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
			if (tmp->state == OUT_STATE_WAIT_START)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	785b      	ldrb	r3, [r3, #1]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d100      	bne.n	8000678 <OUTPUT_blinkHandle+0xc0>
 8000676:	e0b3      	b.n	80007e0 <OUTPUT_blinkHandle+0x228>
			if (tmp->cb_eventFunction)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067c:	2b00      	cmp	r3, #0
 800067e:	d100      	bne.n	8000682 <OUTPUT_blinkHandle+0xca>
 8000680:	e0b0      	b.n	80007e4 <OUTPUT_blinkHandle+0x22c>
				if (tmp->state != OUT_STATE_WAIT_START)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	785b      	ldrb	r3, [r3, #1]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d100      	bne.n	800068c <OUTPUT_blinkHandle+0xd4>
 800068a:	e0ab      	b.n	80007e4 <OUTPUT_blinkHandle+0x22c>
					tmp->cb_eventFunction(OUT_EVENT_ON_AFTER, tmp->val_timeLine);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	691b      	ldr	r3, [r3, #16]
 8000694:	0019      	movs	r1, r3
 8000696:	2000      	movs	r0, #0
 8000698:	4790      	blx	r2
			break;
 800069a:	e0a3      	b.n	80007e4 <OUTPUT_blinkHandle+0x22c>
			switch (tmp->state)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d002      	beq.n	80006aa <OUTPUT_blinkHandle+0xf2>
 80006a4:	2b02      	cmp	r3, #2
 80006a6:	d032      	beq.n	800070e <OUTPUT_blinkHandle+0x156>
				break;
 80006a8:	e095      	b.n	80007d6 <OUTPUT_blinkHandle+0x21e>
				if (timer_expired(&tmp->_timeOut))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3314      	adds	r3, #20
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 f8e0 	bl	8000874 <timer_expired>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d014      	beq.n	80006e2 <OUTPUT_blinkHandle+0x12a>
					tmp->state = OUT_state_finished;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2202      	movs	r2, #2
 80006bc:	705a      	strb	r2, [r3, #1]
					tmp->pinBaseCtrl(0);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	2000      	movs	r0, #0
 80006c4:	4798      	blx	r3
					timer_set(&tmp->_timeOut, (tmp->val_perriod - tmp->val_Duty));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3314      	adds	r3, #20
 80006ca:	0018      	movs	r0, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68da      	ldr	r2, [r3, #12]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	0019      	movs	r1, r3
 80006d8:	f000 f8a2 	bl	8000820 <timer_set>
					tmp->val_timeLine = 0;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]
				if (tmp->cb_eventFunction)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d100      	bne.n	80006ec <OUTPUT_blinkHandle+0x134>
 80006ea:	e071      	b.n	80007d0 <OUTPUT_blinkHandle+0x218>
					event = (tmp->val_timeLine) ? OUT_EVENT_ON_AFTER : OUT_EVENT_OFF_AFTER;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	425a      	negs	r2, r3
 80006f2:	4153      	adcs	r3, r2
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	200e      	movs	r0, #14
 80006f8:	183b      	adds	r3, r7, r0
 80006fa:	701a      	strb	r2, [r3, #0]
					tmp->cb_eventFunction(event, tmp->val_timeLine);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6919      	ldr	r1, [r3, #16]
 8000704:	183b      	adds	r3, r7, r0
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	0018      	movs	r0, r3
 800070a:	4790      	blx	r2
				break;
 800070c:	e060      	b.n	80007d0 <OUTPUT_blinkHandle+0x218>
				if (timer_expired(&tmp->_timeOut))
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	3314      	adds	r3, #20
 8000712:	0018      	movs	r0, r3
 8000714:	f000 f8ae 	bl	8000874 <timer_expired>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d044      	beq.n	80007a6 <OUTPUT_blinkHandle+0x1ee>
					if (tmp->ena_nonStop)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <OUTPUT_blinkHandle+0x174>
						tmp->repeat_cnt = 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	80da      	strh	r2, [r3, #6]
 800072a:	e005      	b.n	8000738 <OUTPUT_blinkHandle+0x180>
						tmp->repeat_cnt++;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	88db      	ldrh	r3, [r3, #6]
 8000730:	3301      	adds	r3, #1
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	80da      	strh	r2, [r3, #6]
					if (tmp->repeat_cnt == tmp->repeat_num)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	88da      	ldrh	r2, [r3, #6]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	429a      	cmp	r2, r3
 8000742:	d11d      	bne.n	8000780 <OUTPUT_blinkHandle+0x1c8>
						tmp->mode = OUT_MODE_NO_CONTROL;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
						tmp->state = OUT_state_finished;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2202      	movs	r2, #2
 800074e:	705a      	strb	r2, [r3, #1]
						tmp->pinBaseCtrl(0);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000754:	2000      	movs	r0, #0
 8000756:	4798      	blx	r3
						timer_stop(&tmp->_timeOut);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3314      	adds	r3, #20
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f8af 	bl	80008c0 <timer_stop>
						tmp->val_timeLine = 0;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
						if (tmp->cb_eventFunction)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076c:	2b00      	cmp	r3, #0
 800076e:	d03b      	beq.n	80007e8 <OUTPUT_blinkHandle+0x230>
							tmp->cb_eventFunction(OUT_EVENT_END_BLINK, tmp->val_timeLine);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	0019      	movs	r1, r3
 800077a:	2002      	movs	r0, #2
 800077c:	4790      	blx	r2
						return;
 800077e:	e033      	b.n	80007e8 <OUTPUT_blinkHandle+0x230>
						tmp->state = OUT_STATE_ON;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2201      	movs	r2, #1
 8000784:	705a      	strb	r2, [r3, #1]
						tmp->pinBaseCtrl(1);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800078a:	2001      	movs	r0, #1
 800078c:	4798      	blx	r3
						timer_set(&tmp->_timeOut, tmp->val_Duty);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	3314      	adds	r3, #20
 8000792:	001a      	movs	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f000 f840 	bl	8000820 <timer_set>
						tmp->val_timeLine = 0;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
				if (tmp->cb_eventFunction)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d012      	beq.n	80007d4 <OUTPUT_blinkHandle+0x21c>
					event = (tmp->val_timeLine) ? OUT_EVENT_OFF_AFTER : OUT_EVENT_ON_AFTER;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	4193      	sbcs	r3, r2
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	200f      	movs	r0, #15
 80007ba:	183b      	adds	r3, r7, r0
 80007bc:	701a      	strb	r2, [r3, #0]
					tmp->cb_eventFunction(event, tmp->val_timeLine);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6919      	ldr	r1, [r3, #16]
 80007c6:	183b      	adds	r3, r7, r0
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	0018      	movs	r0, r3
 80007cc:	4790      	blx	r2
				break;
 80007ce:	e001      	b.n	80007d4 <OUTPUT_blinkHandle+0x21c>
				break;
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	e00a      	b.n	80007ea <OUTPUT_blinkHandle+0x232>
				break;
 80007d4:	46c0      	nop			; (mov r8, r8)
			break;
 80007d6:	e008      	b.n	80007ea <OUTPUT_blinkHandle+0x232>
			break;
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	e006      	b.n	80007ea <OUTPUT_blinkHandle+0x232>
			break;
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	e004      	b.n	80007ea <OUTPUT_blinkHandle+0x232>
				return;
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	e002      	b.n	80007ea <OUTPUT_blinkHandle+0x232>
			break;
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	e000      	b.n	80007ea <OUTPUT_blinkHandle+0x232>
						return;
 80007e8:	46c0      	nop			; (mov r8, r8)
		} // end switch check mode
	}	  // check Pointer
}
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b004      	add	sp, #16
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <timer_getTick>:
/*---------------------------------------------------------------------------*/
/**
 * get uTick of my timer system.
 */
clock_time_t timer_getTick(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  return _unitTick;
 80007f4:	4b02      	ldr	r3, [pc, #8]	; (8000800 <timer_getTick+0x10>)
 80007f6:	681b      	ldr	r3, [r3, #0]
}
 80007f8:	0018      	movs	r0, r3
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000094 	.word	0x20000094

08000804 <timer_periodic_poll>:
/**
 * count the uTick .
 * This function is must be call in a timer interrupt
 */
void timer_periodic_poll(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  _unitTick += _INTERVAL_TICK;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <timer_periodic_poll+0x18>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	330a      	adds	r3, #10
 800080e:	001a      	movs	r2, r3
 8000810:	4b02      	ldr	r3, [pc, #8]	; (800081c <timer_periodic_poll+0x18>)
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	20000094 	.word	0x20000094

08000820 <timer_set>:
 * \param t A pointer to the timer
 * \param interval The interval before the timer expires.
 *
 */
void timer_set(timer_virtual_t *t, clock_time_t interval)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  t->status = _timer_on;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
  t->start = _unitTick;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <timer_set+0x2c>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	605a      	str	r2, [r3, #4]
  t->interval = interval;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	683a      	ldr	r2, [r7, #0]
 800083c:	609a      	str	r2, [r3, #8]
  t->left_time = 0;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000094 	.word	0x20000094

08000850 <timer_restart>:
 * \param t A pointer to the timer.
 *
 * \sa timer_reset()
 */
void timer_restart(timer_virtual_t *t)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  t->start = _unitTick;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <timer_restart+0x20>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	605a      	str	r2, [r3, #4]
  t->status = _timer_on;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000094 	.word	0x20000094

08000874 <timer_expired>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
uint8_t timer_expired(timer_virtual_t *t)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if (t->status == _timer_off)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <timer_expired+0x14>
    return 0;
 8000884:	2300      	movs	r3, #0
 8000886:	e014      	b.n	80008b2 <timer_expired+0x3e>
  if (t->status == _timer_over)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d101      	bne.n	8000894 <timer_expired+0x20>
    return 1;
 8000890:	2301      	movs	r3, #1
 8000892:	e00e      	b.n	80008b2 <timer_expired+0x3e>

  if ((clock_time_t)(_unitTick - t->start) >= (clock_time_t)t->interval)
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <timer_expired+0x48>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d304      	bcc.n	80008b0 <timer_expired+0x3c>
  {
    t->status = _timer_over;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2202      	movs	r2, #2
 80008aa:	701a      	strb	r2, [r3, #0]
    return 1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e000      	b.n	80008b2 <timer_expired+0x3e>
  }
  return 0;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	0018      	movs	r0, r3
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b002      	add	sp, #8
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000094 	.word	0x20000094

080008c0 <timer_stop>:
 *
 * \return Non-zero if the timer has expired, zero otherwise.
 *
 */
void timer_stop(timer_virtual_t *t)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  t->status = _timer_off;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
  t->left_time = 0;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b002      	add	sp, #8
 80008da:	bd80      	pop	{r7, pc}

080008dc <flash_compare>:
	uint16_t	len_data;	//độ dài dữ liệu flash cần lưu
	uint8_t		flash_enable:1;	//enable
}flash_str;

static uint8_t flash_compare(void);
static uint8_t flash_compare(void){
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
  for(uint16_t i = 0; i < flash_str.len_data; i += 4)
 80008e2:	1dbb      	adds	r3, r7, #6
 80008e4:	2200      	movs	r2, #0
 80008e6:	801a      	strh	r2, [r3, #0]
 80008e8:	e017      	b.n	800091a <flash_compare+0x3e>
    if(flash_str.address_start[i/4] != (*(__IO uint32_t*)(FLASH_ADDRESS_START + i)))
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <flash_compare+0x54>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	18d3      	adds	r3, r2, r3
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	1dbb      	adds	r3, r7, #6
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	490c      	ldr	r1, [pc, #48]	; (8000934 <flash_compare+0x58>)
 8000902:	468c      	mov	ip, r1
 8000904:	4463      	add	r3, ip
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d001      	beq.n	8000910 <flash_compare+0x34>
      return 1;
 800090c:	2301      	movs	r3, #1
 800090e:	e00b      	b.n	8000928 <flash_compare+0x4c>
  for(uint16_t i = 0; i < flash_str.len_data; i += 4)
 8000910:	1dbb      	adds	r3, r7, #6
 8000912:	1dba      	adds	r2, r7, #6
 8000914:	8812      	ldrh	r2, [r2, #0]
 8000916:	3204      	adds	r2, #4
 8000918:	801a      	strh	r2, [r3, #0]
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <flash_compare+0x54>)
 800091c:	891b      	ldrh	r3, [r3, #8]
 800091e:	1dba      	adds	r2, r7, #6
 8000920:	8812      	ldrh	r2, [r2, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d3e1      	bcc.n	80008ea <flash_compare+0xe>
  return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	b002      	add	sp, #8
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000098 	.word	0x20000098
 8000934:	0800fc00 	.word	0x0800fc00

08000938 <flash_init_address>:

///@chu y: sau bien ket thuc can luu vao flash phai trong 4byte
void flash_init_address(uint32_t *address_start, uint32_t *address_end){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]

  if(flash_str.flash_enable == 1)		//chi init 1 lan
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <flash_init_address+0x48>)
 8000944:	7a9b      	ldrb	r3, [r3, #10]
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d113      	bne.n	8000978 <flash_init_address+0x40>
    return;
  flash_str.address_start = address_start;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <flash_init_address+0x48>)
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	601a      	str	r2, [r3, #0]
  flash_str.address_end = address_end;
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <flash_init_address+0x48>)
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	605a      	str	r2, [r3, #4]
  flash_str.len_data = (int)(address_end) - (int)(address_start) + 4;
 800095c:	683a      	ldr	r2, [r7, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	b29b      	uxth	r3, r3
 8000964:	3304      	adds	r3, #4
 8000966:	b29a      	uxth	r2, r3
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <flash_init_address+0x48>)
 800096a:	811a      	strh	r2, [r3, #8]
  flash_str.flash_enable = 1;
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <flash_init_address+0x48>)
 800096e:	7a9a      	ldrb	r2, [r3, #10]
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	729a      	strb	r2, [r3, #10]
 8000976:	e000      	b.n	800097a <flash_init_address+0x42>
    return;
 8000978:	46c0      	nop			; (mov r8, r8)
}
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000098 	.word	0x20000098

08000984 <flash_read>:

void flash_read(void){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
  if(flash_str.flash_enable == 1){
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <flash_read+0x5c>)
 800098c:	7a9b      	ldrb	r3, [r3, #10]
 800098e:	2201      	movs	r2, #1
 8000990:	4013      	ands	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d01e      	beq.n	80009d6 <flash_read+0x52>
    for(uint16_t i = 0; i < flash_str.len_data; i += 4){
 8000998:	1dbb      	adds	r3, r7, #6
 800099a:	2200      	movs	r2, #0
 800099c:	801a      	strh	r2, [r3, #0]
 800099e:	e014      	b.n	80009ca <flash_read+0x46>
	flash_str.address_start[i/4] = (*(__IO uint32_t*)(FLASH_ADDRESS_START + i));
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <flash_read+0x60>)
 80009a6:	4694      	mov	ip, r2
 80009a8:	4463      	add	r3, ip
 80009aa:	001a      	movs	r2, r3
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <flash_read+0x5c>)
 80009ae:	6819      	ldr	r1, [r3, #0]
 80009b0:	1dbb      	adds	r3, r7, #6
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	089b      	lsrs	r3, r3, #2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	18cb      	adds	r3, r1, r3
 80009bc:	6812      	ldr	r2, [r2, #0]
 80009be:	601a      	str	r2, [r3, #0]
    for(uint16_t i = 0; i < flash_str.len_data; i += 4){
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	1dba      	adds	r2, r7, #6
 80009c4:	8812      	ldrh	r2, [r2, #0]
 80009c6:	3204      	adds	r2, #4
 80009c8:	801a      	strh	r2, [r3, #0]
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <flash_read+0x5c>)
 80009cc:	891b      	ldrh	r3, [r3, #8]
 80009ce:	1dba      	adds	r2, r7, #6
 80009d0:	8812      	ldrh	r2, [r2, #0]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d3e4      	bcc.n	80009a0 <flash_read+0x1c>
    }
  }
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000098 	.word	0x20000098
 80009e4:	0800fc00 	.word	0x0800fc00

080009e8 <flash_update>:

void flash_update(void){
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0

  if((flash_compare() == 1) &&
 80009ee:	f7ff ff75 	bl	80008dc <flash_compare>
 80009f2:	0003      	movs	r3, r0
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d15a      	bne.n	8000aae <flash_update+0xc6>
      (flash_str.flash_enable == 1))
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <flash_update+0xcc>)
 80009fa:	7a9b      	ldrb	r3, [r3, #10]
 80009fc:	2201      	movs	r2, #1
 80009fe:	4013      	ands	r3, r2
 8000a00:	b2db      	uxtb	r3, r3
  if((flash_compare() == 1) &&
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d053      	beq.n	8000aae <flash_update+0xc6>
    {
    HAL_FLASH_Unlock();
 8000a06:	f002 f8f7 	bl	8002bf8 <HAL_FLASH_Unlock>

    //timeout 10ms to erase
    uint32_t start_stick = HAL_GetTick();
 8000a0a:	f001 f94d 	bl	8001ca8 <HAL_GetTick>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	603b      	str	r3, [r7, #0]
    while(flash_erase(FLASH_ADDRESS_START,1)==0){
 8000a12:	e006      	b.n	8000a22 <flash_update+0x3a>
	if ((HAL_GetTick() - start_stick) > 10 /*ms*/)
 8000a14:	f001 f948 	bl	8001ca8 <HAL_GetTick>
 8000a18:	0002      	movs	r2, r0
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	2b0a      	cmp	r3, #10
 8000a20:	d842      	bhi.n	8000aa8 <flash_update+0xc0>
    while(flash_erase(FLASH_ADDRESS_START,1)==0){
 8000a22:	4b25      	ldr	r3, [pc, #148]	; (8000ab8 <flash_update+0xd0>)
 8000a24:	2101      	movs	r1, #1
 8000a26:	0018      	movs	r0, r3
 8000a28:	f000 f848 	bl	8000abc <flash_erase>
 8000a2c:	1e03      	subs	r3, r0, #0
 8000a2e:	d0f1      	beq.n	8000a14 <flash_update+0x2c>
	  return;
    }

    flash_erase(FLASH_ADDRESS_START,1);
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <flash_update+0xd0>)
 8000a32:	2101      	movs	r1, #1
 8000a34:	0018      	movs	r0, r3
 8000a36:	f000 f841 	bl	8000abc <flash_erase>

    for(uint16_t i = 0; i < flash_str.len_data; i += 4){
 8000a3a:	1dbb      	adds	r3, r7, #6
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	801a      	strh	r2, [r3, #0]
 8000a40:	e029      	b.n	8000a96 <flash_update+0xae>
	//timeout 10ms to write
	start_stick = HAL_GetTick();
 8000a42:	f001 f931 	bl	8001ca8 <HAL_GetTick>
 8000a46:	0003      	movs	r3, r0
 8000a48:	603b      	str	r3, [r7, #0]
	while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDRESS_START + i,  flash_str.address_start[i/4]) != HAL_OK){
 8000a4a:	e006      	b.n	8000a5a <flash_update+0x72>
	  if ((HAL_GetTick() - start_stick) > 10 /*ms*/)
 8000a4c:	f001 f92c 	bl	8001ca8 <HAL_GetTick>
 8000a50:	0002      	movs	r2, r0
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	2b0a      	cmp	r3, #10
 8000a58:	d828      	bhi.n	8000aac <flash_update+0xc4>
	while(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDRESS_START + i,  flash_str.address_start[i/4]) != HAL_OK){
 8000a5a:	1dbb      	adds	r3, r7, #6
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <flash_update+0xd0>)
 8000a60:	4694      	mov	ip, r2
 8000a62:	4463      	add	r3, ip
 8000a64:	0019      	movs	r1, r3
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <flash_update+0xcc>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	1dbb      	adds	r3, r7, #6
 8000a6c:	881b      	ldrh	r3, [r3, #0]
 8000a6e:	089b      	lsrs	r3, r3, #2
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	001c      	movs	r4, r3
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	001d      	movs	r5, r3
 8000a7e:	0022      	movs	r2, r4
 8000a80:	002b      	movs	r3, r5
 8000a82:	2002      	movs	r0, #2
 8000a84:	f002 f822 	bl	8002acc <HAL_FLASH_Program>
 8000a88:	1e03      	subs	r3, r0, #0
 8000a8a:	d1df      	bne.n	8000a4c <flash_update+0x64>
    for(uint16_t i = 0; i < flash_str.len_data; i += 4){
 8000a8c:	1dbb      	adds	r3, r7, #6
 8000a8e:	1dba      	adds	r2, r7, #6
 8000a90:	8812      	ldrh	r2, [r2, #0]
 8000a92:	3204      	adds	r2, #4
 8000a94:	801a      	strh	r2, [r3, #0]
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <flash_update+0xcc>)
 8000a98:	891b      	ldrh	r3, [r3, #8]
 8000a9a:	1dba      	adds	r2, r7, #6
 8000a9c:	8812      	ldrh	r2, [r2, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d3cf      	bcc.n	8000a42 <flash_update+0x5a>
	    return;
	}
    }
    HAL_FLASH_Lock();
 8000aa2:	f002 f8cf 	bl	8002c44 <HAL_FLASH_Lock>
 8000aa6:	e002      	b.n	8000aae <flash_update+0xc6>
	  return;
 8000aa8:	46c0      	nop			; (mov r8, r8)
 8000aaa:	e000      	b.n	8000aae <flash_update+0xc6>
	    return;
 8000aac:	46c0      	nop			; (mov r8, r8)
  }
}
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab4:	20000098 	.word	0x20000098
 8000ab8:	0800fc00 	.word	0x0800fc00

08000abc <flash_erase>:


uint8_t flash_erase(uint32_t ADR_StartPage, uint32_t numPages){
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	FLASH_EraseInitTypeDef 	EraseInitStruct;
	uint32_t PageError;

	HAL_FLASH_Unlock();
 8000ac6:	f002 f897 	bl	8002bf8 <HAL_FLASH_Unlock>
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000aca:	210c      	movs	r1, #12
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = ADR_StartPage;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages = numPages; //1 page
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	683a      	ldr	r2, [r7, #0]
 8000adc:	609a      	str	r2, [r3, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)																						//debug_msg("\n\rXoa Page %X OK",ADR_StartPage);
 8000ade:	2308      	movs	r3, #8
 8000ae0:	18fa      	adds	r2, r7, r3
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 f946 	bl	8002d78 <HAL_FLASHEx_Erase>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d101      	bne.n	8000af4 <flash_erase+0x38>
	  return 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <flash_erase+0x3a>
	else
	  return 0;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	0018      	movs	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b006      	add	sp, #24
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <getPower>:

timer_virtual_t _timer_updateLCD,_timer_runHeater,_timer_timeout;
char LcdStr_row[_USER_TEXT_LCD_NUM_ROW][_STRING_BUFFER_SIZE];

void getPower();
void getPower(){
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  heatPower = (uint8_t)(hw_AdcArr[_adcVaristor]/20);
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <getPower+0x40>)
 8000b06:	881b      	ldrh	r3, [r3, #0]
 8000b08:	2114      	movs	r1, #20
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fb0e 	bl	800012c <__udivsi3>
 8000b10:	0003      	movs	r3, r0
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <getPower+0x44>)
 8000b18:	701a      	strb	r2, [r3, #0]
  if(heatPower<5)heatPower=0;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <getPower+0x44>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	d803      	bhi.n	8000b2a <getPower+0x2a>
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <getPower+0x44>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
  else if(heatPower>95)heatPower=100;
}
 8000b28:	e006      	b.n	8000b38 <getPower+0x38>
  else if(heatPower>95)heatPower=100;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <getPower+0x44>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b5f      	cmp	r3, #95	; 0x5f
 8000b30:	d902      	bls.n	8000b38 <getPower+0x38>
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <getPower+0x44>)
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	701a      	strb	r2, [r3, #0]
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	200000f8 	.word	0x200000f8
 8000b44:	20000108 	.word	0x20000108

08000b48 <HW_HEAT_dimerCtrl>:

void HW_HEAT_dimerCtrl(uint8_t percent);
void HW_HEAT_dimerCtrl(uint8_t percent){
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0002      	movs	r2, r0
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	701a      	strb	r2, [r3, #0]
  (percent >=100) ?  HEAT_pwmSetCompare(HARDWARE_TIM_PWM_HEAT_PERIOD+1) : HEAT_pwmSetCompare(percent*HARDWARE_TIM_PWM_HEAT_PERIOD/100);
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b63      	cmp	r3, #99	; 0x63
 8000b5a:	d906      	bls.n	8000b6a <HW_HEAT_dimerCtrl+0x22>
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HW_HEAT_dimerCtrl+0x44>)
 8000b5e:	68da      	ldr	r2, [r3, #12]
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HW_HEAT_dimerCtrl+0x44>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3201      	adds	r2, #1
 8000b66:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b68:	e00c      	b.n	8000b84 <HW_HEAT_dimerCtrl+0x3c>
  (percent >=100) ?  HEAT_pwmSetCompare(HARDWARE_TIM_PWM_HEAT_PERIOD+1) : HEAT_pwmSetCompare(percent*HARDWARE_TIM_PWM_HEAT_PERIOD/100);
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781a      	ldrb	r2, [r3, #0]
 8000b6e:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HW_HEAT_dimerCtrl+0x44>)
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	435a      	muls	r2, r3
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HW_HEAT_dimerCtrl+0x44>)
 8000b76:	681c      	ldr	r4, [r3, #0]
 8000b78:	2164      	movs	r1, #100	; 0x64
 8000b7a:	0010      	movs	r0, r2
 8000b7c:	f7ff fad6 	bl	800012c <__udivsi3>
 8000b80:	0003      	movs	r3, r0
 8000b82:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b003      	add	sp, #12
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	20000264 	.word	0x20000264

08000b90 <HW_RLSOL_BaseCtrl>:

//Relay controls the autofill solenoid
void HW_RLSOL_BaseCtrl(uint8_t ON_OFF){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
  if(ON_OFF) RLSOL_ON;
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d008      	beq.n	8000bb6 <HW_RLSOL_BaseCtrl+0x26>
 8000ba4:	2380      	movs	r3, #128	; 0x80
 8000ba6:	0119      	lsls	r1, r3, #4
 8000ba8:	2390      	movs	r3, #144	; 0x90
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	2201      	movs	r2, #1
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f002 fb1b 	bl	80031ea <HAL_GPIO_WritePin>
  else RLSOL_OFF;
}
 8000bb4:	e007      	b.n	8000bc6 <HW_RLSOL_BaseCtrl+0x36>
  else RLSOL_OFF;
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	0119      	lsls	r1, r3, #4
 8000bba:	2390      	movs	r3, #144	; 0x90
 8000bbc:	05db      	lsls	r3, r3, #23
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f002 fb12 	bl	80031ea <HAL_GPIO_WritePin>
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <updateLcd>:


/*Functions*/
void updateLcd(){
 8000bd0:	b590      	push	{r4, r7, lr}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  static char str_cmp0[_STRING_BUFFER_SIZE],
	      str_cmp1[_STRING_BUFFER_SIZE];
  uint8_t result1, result2;

  if(!timer_expired(&_timer_updateLCD))
 8000bd6:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <updateLcd+0x9c>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fe4b 	bl	8000874 <timer_expired>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d03e      	beq.n	8000c60 <updateLcd+0x90>
    return;
  timer_set(&_timer_updateLCD, 250);
 8000be2:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <updateLcd+0x9c>)
 8000be4:	21fa      	movs	r1, #250	; 0xfa
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fe1a 	bl	8000820 <timer_set>
  getPower();
 8000bec:	f7ff ff88 	bl	8000b00 <getPower>

  //Nếu chuỗi không thay đổi thì return
  result1 = memcmp(LcdStr_row[0], str_cmp0, _STRING_BUFFER_SIZE);
 8000bf0:	491f      	ldr	r1, [pc, #124]	; (8000c70 <updateLcd+0xa0>)
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <updateLcd+0xa4>)
 8000bf4:	2211      	movs	r2, #17
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f004 fb26 	bl	8005248 <memcmp>
 8000bfc:	0002      	movs	r2, r0
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	701a      	strb	r2, [r3, #0]
  result2 = memcmp(LcdStr_row[1], str_cmp1, _STRING_BUFFER_SIZE);
 8000c02:	491d      	ldr	r1, [pc, #116]	; (8000c78 <updateLcd+0xa8>)
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <updateLcd+0xac>)
 8000c06:	2211      	movs	r2, #17
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f004 fb1d 	bl	8005248 <memcmp>
 8000c0e:	0002      	movs	r2, r0
 8000c10:	1dbb      	adds	r3, r7, #6
 8000c12:	701a      	strb	r2, [r3, #0]
  if(result1 == 0 && result2==0)return;
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d103      	bne.n	8000c24 <updateLcd+0x54>
 8000c1c:	1dbb      	adds	r3, r7, #6
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d01f      	beq.n	8000c64 <updateLcd+0x94>

  //Cập nhật dữ liệu mới lên LCD
  //CLCD_I2C_Clear(&LCD1);
  ShowLCD_String(LcdStr_row[0], 0, 0);
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <updateLcd+0xa4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 fadc 	bl	80011e8 <ShowLCD_String>
  ShowLCD_String(LcdStr_row[1], 0, 1);
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <updateLcd+0xac>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	2100      	movs	r1, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fad6 	bl	80011e8 <ShowLCD_String>

  memcpy(str_cmp0, LcdStr_row[0], _STRING_BUFFER_SIZE);
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <updateLcd+0xa0>)
 8000c3e:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <updateLcd+0xa4>)
 8000c40:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c42:	c313      	stmia	r3!, {r0, r1, r4}
 8000c44:	6811      	ldr	r1, [r2, #0]
 8000c46:	6019      	str	r1, [r3, #0]
 8000c48:	7912      	ldrb	r2, [r2, #4]
 8000c4a:	711a      	strb	r2, [r3, #4]
  memcpy(str_cmp1, LcdStr_row[1], _STRING_BUFFER_SIZE);
 8000c4c:	490a      	ldr	r1, [pc, #40]	; (8000c78 <updateLcd+0xa8>)
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <updateLcd+0xa4>)
 8000c50:	2211      	movs	r2, #17
 8000c52:	0008      	movs	r0, r1
 8000c54:	189b      	adds	r3, r3, r2
 8000c56:	2211      	movs	r2, #17
 8000c58:	0019      	movs	r1, r3
 8000c5a:	f004 fb03 	bl	8005264 <memcpy>
 8000c5e:	e002      	b.n	8000c66 <updateLcd+0x96>
    return;
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	e000      	b.n	8000c66 <updateLcd+0x96>
  if(result1 == 0 && result2==0)return;
 8000c64:	46c0      	nop			; (mov r8, r8)
}
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	2000010c 	.word	0x2000010c
 8000c70:	20000150 	.word	0x20000150
 8000c74:	2000012c 	.word	0x2000012c
 8000c78:	20000164 	.word	0x20000164
 8000c7c:	2000013d 	.word	0x2000013d

08000c80 <heatCtrl_1msIrqHandle>:

void heatCtrl_1msIrqHandle(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
  static uint8_t tx10;

  //Outputs
  for(uint8_t i=0; i<_MAX_OUTPUT; i++)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	e00d      	b.n	8000caa <heatCtrl_1msIrqHandle+0x2a>
      OUTPUT_blinkHandle(&_ctrlOutput[i]);
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	222c      	movs	r2, #44	; 0x2c
 8000c94:	435a      	muls	r2, r3
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <heatCtrl_1msIrqHandle+0x78>)
 8000c98:	18d3      	adds	r3, r2, r3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fc8c 	bl	80005b8 <OUTPUT_blinkHandle>
  for(uint8_t i=0; i<_MAX_OUTPUT; i++)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781a      	ldrb	r2, [r3, #0]
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	3201      	adds	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0ed      	beq.n	8000c8e <heatCtrl_1msIrqHandle+0xe>

  /*10ms check poll*/
  if(++tx10 >= 10){
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <heatCtrl_1msIrqHandle+0x7c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <heatCtrl_1msIrqHandle+0x7c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <heatCtrl_1msIrqHandle+0x7c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b09      	cmp	r3, #9
 8000cc4:	d913      	bls.n	8000cee <heatCtrl_1msIrqHandle+0x6e>
     tx10 = 0;
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <heatCtrl_1msIrqHandle+0x7c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
     timer_periodic_poll();
 8000ccc:	f7ff fd9a 	bl	8000804 <timer_periodic_poll>
     btn_progress_loop(&HW_Button,BUTTON_PinStt);
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	021a      	lsls	r2, r3, #8
 8000cd4:	2390      	movs	r3, #144	; 0x90
 8000cd6:	05db      	lsls	r3, r3, #23
 8000cd8:	0011      	movs	r1, r2
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f002 fa68 	bl	80031b0 <HAL_GPIO_ReadPin>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <heatCtrl_1msIrqHandle+0x80>)
 8000ce6:	0011      	movs	r1, r2
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff faab 	bl	8000244 <btn_progress_loop>
  }
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	200000a4 	.word	0x200000a4
 8000cfc:	20000175 	.word	0x20000175
 8000d00:	200000d0 	.word	0x200000d0

08000d04 <heatCtrlInit>:

void heatCtrlInit(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af02      	add	r7, sp, #8

  HAL_TIM_PWM_Start(&HARDWARE_TIM_PWM_HEAT, HARDWARE_TIM_PWM_HEAT_CHANNEL);
 8000d0a:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <heatCtrlInit+0xa0>)
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f003 fc52 	bl	80045b8 <HAL_TIM_PWM_Start>
  HEAT_pwmSetCompare(0);
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <heatCtrlInit+0xa0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	639a      	str	r2, [r3, #56]	; 0x38

  HAL_ADCEx_Calibration_Start(&hadc);
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <heatCtrlInit+0xa4>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 fbb8 	bl	8002494 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *)hw_AdcArr, _adcTotal);
 8000d24:	4921      	ldr	r1, [pc, #132]	; (8000dac <heatCtrlInit+0xa8>)
 8000d26:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <heatCtrlInit+0xa4>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f001 f92a 	bl	8001f84 <HAL_ADC_Start_DMA>
  //setCalibration_16V_400mA();
  /*Init i2c2 for LCD and Ina219 */
  HAL_I2C_Init(&_USER_DEFINE_I2C_LCD);
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <heatCtrlInit+0xac>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f002 fa76 	bl	8003224 <HAL_I2C_Init>
  CLCD_I2C_Init(&LCD1, &_USER_DEFINE_I2C_LCD, 0x4e, 20, 4);
 8000d38:	491d      	ldr	r1, [pc, #116]	; (8000db0 <heatCtrlInit+0xac>)
 8000d3a:	481e      	ldr	r0, [pc, #120]	; (8000db4 <heatCtrlInit+0xb0>)
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	2314      	movs	r3, #20
 8000d42:	224e      	movs	r2, #78	; 0x4e
 8000d44:	f000 f948 	bl	8000fd8 <CLCD_I2C_Init>

  //HW_Button.cb_function = &callback_btnConfigHandle;

  /*Init Outputs Control*/
  OUTPUT_configInit(&_ctrlOutput[_RLHEAT], HW_RLSOL_BaseCtrl, 0);
 8000d48:	491b      	ldr	r1, [pc, #108]	; (8000db8 <heatCtrlInit+0xb4>)
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <heatCtrlInit+0xb8>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fbb6 	bl	80004c0 <OUTPUT_configInit>
  OUTPUT_setOn(&_ctrlOutput[_RLHEAT],0);
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <heatCtrlInit+0xb8>)
 8000d56:	2100      	movs	r1, #0
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff fbf7 	bl	800054c <OUTPUT_setOn>

  //Load flash data
  flash_init_address(&_eppConfig.eppStart, &_eppConfig.eppEnd);
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <heatCtrlInit+0xbc>)
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <heatCtrlInit+0xc0>)
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fde7 	bl	8000938 <flash_init_address>
  flash_read();
 8000d6a:	f7ff fe0b 	bl	8000984 <flash_read>

  ShowLCD_String("   HEAT WARM", 0, 0);
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <heatCtrlInit+0xc4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fa37 	bl	80011e8 <ShowLCD_String>
  ShowLCD_String(" Giu Am On Noi", 0, 1);
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <heatCtrlInit+0xc8>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2100      	movs	r1, #0
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 fa31 	bl	80011e8 <ShowLCD_String>

  timer_set(&_timer_updateLCD, 250);
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <heatCtrlInit+0xcc>)
 8000d88:	21fa      	movs	r1, #250	; 0xfa
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fd48 	bl	8000820 <timer_set>
  timer_set(&_timer_runHeater, 1000);
 8000d90:	23fa      	movs	r3, #250	; 0xfa
 8000d92:	009a      	lsls	r2, r3, #2
 8000d94:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <heatCtrlInit+0xd0>)
 8000d96:	0011      	movs	r1, r2
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f7ff fd41 	bl	8000820 <timer_set>
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000264 	.word	0x20000264
 8000da8:	20000184 	.word	0x20000184
 8000dac:	200000f8 	.word	0x200000f8
 8000db0:	20000208 	.word	0x20000208
 8000db4:	20000178 	.word	0x20000178
 8000db8:	08000b91 	.word	0x08000b91
 8000dbc:	200000a4 	.word	0x200000a4
 8000dc0:	20000104 	.word	0x20000104
 8000dc4:	200000fc 	.word	0x200000fc
 8000dc8:	08005b60 	.word	0x08005b60
 8000dcc:	08005b70 	.word	0x08005b70
 8000dd0:	2000010c 	.word	0x2000010c
 8000dd4:	2000011c 	.word	0x2000011c

08000dd8 <heatCtrlLoop>:

void heatCtrlLoop(){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  static uint16_t cntSec=0;
  flash_update();
 8000ddc:	f7ff fe04 	bl	80009e8 <flash_update>
  updateLcd();
 8000de0:	f7ff fef6 	bl	8000bd0 <updateLcd>

  if(timer_expired(&_timer_runHeater)){
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <heatCtrlLoop+0x94>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff fd44 	bl	8000874 <timer_expired>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d039      	beq.n	8000e64 <heatCtrlLoop+0x8c>
      timer_restart(&_timer_runHeater);
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <heatCtrlLoop+0x94>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fd2c 	bl	8000850 <timer_restart>
      if(heatPower > 0)sprintf(LcdStr_row[0],"ON");
 8000df8:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <heatCtrlLoop+0x98>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <heatCtrlLoop+0x36>
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <heatCtrlLoop+0x9c>)
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <heatCtrlLoop+0xa0>)
 8000e04:	0011      	movs	r1, r2
 8000e06:	0018      	movs	r0, r3
 8000e08:	f004 fb32 	bl	8005470 <siprintf>
 8000e0c:	e005      	b.n	8000e1a <heatCtrlLoop+0x42>
      else sprintf(LcdStr_row[0],"OFF");
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <heatCtrlLoop+0xa4>)
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <heatCtrlLoop+0xa0>)
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f004 fb2b 	bl	8005470 <siprintf>
      sprintf(LcdStr_row[1],"CS=%3u ThoiGian",heatPower);
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <heatCtrlLoop+0x98>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	001a      	movs	r2, r3
 8000e20:	4917      	ldr	r1, [pc, #92]	; (8000e80 <heatCtrlLoop+0xa8>)
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <heatCtrlLoop+0xac>)
 8000e24:	0018      	movs	r0, r3
 8000e26:	f004 fb23 	bl	8005470 <siprintf>
      HW_HEAT_dimerCtrl(heatPower);
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <heatCtrlLoop+0x98>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fe8a 	bl	8000b48 <HW_HEAT_dimerCtrl>
      if(++cntSec > (8*3600)){
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <heatCtrlLoop+0xb0>)
 8000e36:	881b      	ldrh	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <heatCtrlLoop+0xb0>)
 8000e3e:	801a      	strh	r2, [r3, #0]
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <heatCtrlLoop+0xb0>)
 8000e42:	881a      	ldrh	r2, [r3, #0]
 8000e44:	23e1      	movs	r3, #225	; 0xe1
 8000e46:	01db      	lsls	r3, r3, #7
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d90b      	bls.n	8000e64 <heatCtrlLoop+0x8c>
	  HW_HEAT_dimerCtrl(0);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fe7b 	bl	8000b48 <HW_HEAT_dimerCtrl>
	  OUTPUT_setOff(&_ctrlOutput[_RLHEAT],0);
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <heatCtrlLoop+0xb4>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fb42 	bl	80004e0 <OUTPUT_setOff>
	  timer_stop(&_timer_runHeater);
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <heatCtrlLoop+0x94>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fd2e 	bl	80008c0 <timer_stop>
      }
  }
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	2000011c 	.word	0x2000011c
 8000e70:	20000108 	.word	0x20000108
 8000e74:	08005b80 	.word	0x08005b80
 8000e78:	2000012c 	.word	0x2000012c
 8000e7c:	08005b84 	.word	0x08005b84
 8000e80:	08005b88 	.word	0x08005b88
 8000e84:	2000013d 	.word	0x2000013d
 8000e88:	20000176 	.word	0x20000176
 8000e8c:	200000a4 	.word	0x200000a4

08000e90 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadcX){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  //80-120us
  if (hadcX->Instance == hadc.Instance){
  }

}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b002      	add	sp, #8
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <HAL_SYSTICK_Callback>:

/**
  * @brief  SYSTICK callback.
  * @retval None
  */
void HAL_SYSTICK_Callback(void){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  if(callbackSystickHandle)
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <HAL_SYSTICK_Callback+0x18>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <HAL_SYSTICK_Callback+0x12>
    callbackSystickHandle();
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_SYSTICK_Callback+0x18>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4798      	blx	r3
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000000 	.word	0x20000000

08000ebc <CLCD_Delay>:

CLCD_I2C_Name LCD1;

//************************** Low Level Function ****************************************************************//
static void CLCD_Delay(uint16_t Time)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	1dbb      	adds	r3, r7, #6
 8000ec6:	801a      	strh	r2, [r3, #0]
	HAL_Delay(Time);
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 fef5 	bl	8001cbc <HAL_Delay>
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <CLCD_WriteI2C>:
static void CLCD_WriteI2C(CLCD_I2C_Name* LCD, uint8_t Data, uint8_t Mode)
{
 8000eda:	b5b0      	push	{r4, r5, r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af02      	add	r7, sp, #8
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	0008      	movs	r0, r1
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	1cfb      	adds	r3, r7, #3
 8000ee8:	1c02      	adds	r2, r0, #0
 8000eea:	701a      	strb	r2, [r3, #0]
 8000eec:	1cbb      	adds	r3, r7, #2
 8000eee:	1c0a      	adds	r2, r1, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
	char Data_H;
	char Data_L;
	uint8_t Data_I2C[4];
	Data_H = Data&0xF0;
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	183b      	adds	r3, r7, r0
 8000ef6:	1cfa      	adds	r2, r7, #3
 8000ef8:	7812      	ldrb	r2, [r2, #0]
 8000efa:	210f      	movs	r1, #15
 8000efc:	438a      	bics	r2, r1
 8000efe:	701a      	strb	r2, [r3, #0]
	Data_L = (Data<<4)&0xF0;
 8000f00:	1cfb      	adds	r3, r7, #3
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	011a      	lsls	r2, r3, #4
 8000f06:	240e      	movs	r4, #14
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	701a      	strb	r2, [r3, #0]
	if(LCD->BACKLIGHT)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7adb      	ldrb	r3, [r3, #11]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00b      	beq.n	8000f2c <CLCD_WriteI2C+0x52>
	{
		Data_H |= LCD_BACKLIGHT;
 8000f14:	183b      	adds	r3, r7, r0
 8000f16:	183a      	adds	r2, r7, r0
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_BACKLIGHT;
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	193a      	adds	r2, r7, r4
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	2108      	movs	r1, #8
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
	}
	if(Mode == CLCD_DATA)
 8000f2c:	1cbb      	adds	r3, r7, #2
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d10e      	bne.n	8000f52 <CLCD_WriteI2C+0x78>
	{
		Data_H |= LCD_RS;
 8000f34:	220f      	movs	r2, #15
 8000f36:	18bb      	adds	r3, r7, r2
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
		Data_L |= LCD_RS;
 8000f42:	220e      	movs	r2, #14
 8000f44:	18bb      	adds	r3, r7, r2
 8000f46:	18ba      	adds	r2, r7, r2
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e011      	b.n	8000f76 <CLCD_WriteI2C+0x9c>
	}
	else if(Mode == CLCD_COMMAND)
 8000f52:	1cbb      	adds	r3, r7, #2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d10d      	bne.n	8000f76 <CLCD_WriteI2C+0x9c>
	{
		Data_H &= ~LCD_RS;
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	18bb      	adds	r3, r7, r2
 8000f5e:	18ba      	adds	r2, r7, r2
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	2101      	movs	r1, #1
 8000f64:	438a      	bics	r2, r1
 8000f66:	701a      	strb	r2, [r3, #0]
		Data_L &= ~LCD_RS;
 8000f68:	220e      	movs	r2, #14
 8000f6a:	18bb      	adds	r3, r7, r2
 8000f6c:	18ba      	adds	r2, r7, r2
 8000f6e:	7812      	ldrb	r2, [r2, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	438a      	bics	r2, r1
 8000f74:	701a      	strb	r2, [r3, #0]
	}
	Data_I2C[0] = Data_H|LCD_EN;
 8000f76:	250f      	movs	r5, #15
 8000f78:	197b      	adds	r3, r7, r5
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2204      	movs	r2, #4
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	2408      	movs	r4, #8
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	701a      	strb	r2, [r3, #0]
	CLCD_Delay(1);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff ff97 	bl	8000ebc <CLCD_Delay>
	Data_I2C[1] = Data_H;
 8000f8e:	0021      	movs	r1, r4
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	197a      	adds	r2, r7, r5
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	705a      	strb	r2, [r3, #1]
	Data_I2C[2] = Data_L|LCD_EN;
 8000f98:	250e      	movs	r5, #14
 8000f9a:	197b      	adds	r3, r7, r5
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	000c      	movs	r4, r1
 8000fa6:	193b      	adds	r3, r7, r4
 8000fa8:	709a      	strb	r2, [r3, #2]
	CLCD_Delay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff ff86 	bl	8000ebc <CLCD_Delay>
	Data_I2C[3] = Data_L;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	197a      	adds	r2, r7, r5
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit(LCD->I2C, LCD->ADDRESS, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	791b      	ldrb	r3, [r3, #4]
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	193a      	adds	r2, r7, r4
 8000fc4:	23fa      	movs	r3, #250	; 0xfa
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2304      	movs	r3, #4
 8000fcc:	f002 f9c0 	bl	8003350 <HAL_I2C_Master_Transmit>
}
 8000fd0:	46c0      	nop			; (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b004      	add	sp, #16
 8000fd6:	bdb0      	pop	{r4, r5, r7, pc}

08000fd8 <CLCD_I2C_Init>:


//************************** High Level Function ****************************************************************//
void CLCD_I2C_Init(CLCD_I2C_Name* LCD, I2C_HandleTypeDef* hi2c_CLCD, uint8_t Address, uint8_t Colums, uint8_t Rows)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	1dfb      	adds	r3, r7, #7
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	1dbb      	adds	r3, r7, #6
 8000fea:	1c0a      	adds	r2, r1, #0
 8000fec:	701a      	strb	r2, [r3, #0]
	LCD->I2C = hi2c_CLCD;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	601a      	str	r2, [r3, #0]
	LCD->ADDRESS = Address;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1dfa      	adds	r2, r7, #7
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	711a      	strb	r2, [r3, #4]
	LCD->COLUMS = Colums;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	1dba      	adds	r2, r7, #6
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	715a      	strb	r2, [r3, #5]
	LCD->ROWS = Rows;
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	2318      	movs	r3, #24
 8001008:	18fb      	adds	r3, r7, r3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	7193      	strb	r3, [r2, #6]

	LCD->FUNCTIONSET = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2228      	movs	r2, #40	; 0x28
 8001012:	729a      	strb	r2, [r3, #10]
	LCD->ENTRYMODE = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2206      	movs	r2, #6
 8001018:	71da      	strb	r2, [r3, #7]
	LCD->DISPLAYCTRL = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	220c      	movs	r2, #12
 800101e:	721a      	strb	r2, [r3, #8]
	LCD->CURSORSHIFT = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2214      	movs	r2, #20
 8001024:	725a      	strb	r2, [r3, #9]
	LCD->BACKLIGHT = LCD_BACKLIGHT;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2208      	movs	r2, #8
 800102a:	72da      	strb	r2, [r3, #11]

	CLCD_Delay(200);
 800102c:	20c8      	movs	r0, #200	; 0xc8
 800102e:	f7ff ff45 	bl	8000ebc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	2200      	movs	r2, #0
 8001036:	2133      	movs	r1, #51	; 0x33
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff ff4e 	bl	8000eda <CLCD_WriteI2C>
	CLCD_Delay(20);
 800103e:	2014      	movs	r0, #20
 8001040:	f7ff ff3c 	bl	8000ebc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x33, CLCD_COMMAND);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	2133      	movs	r1, #51	; 0x33
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff ff45 	bl	8000eda <CLCD_WriteI2C>
	CLCD_Delay(20);
 8001050:	2014      	movs	r0, #20
 8001052:	f7ff ff33 	bl	8000ebc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x32, CLCD_COMMAND);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	2132      	movs	r1, #50	; 0x32
 800105c:	0018      	movs	r0, r3
 800105e:	f7ff ff3c 	bl	8000eda <CLCD_WriteI2C>
	CLCD_Delay(20);
 8001062:	2014      	movs	r0, #20
 8001064:	f7ff ff2a 	bl	8000ebc <CLCD_Delay>
	CLCD_WriteI2C(LCD, 0x20, CLCD_COMMAND);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	0018      	movs	r0, r3
 8001070:	f7ff ff33 	bl	8000eda <CLCD_WriteI2C>
	CLCD_Delay(20);
 8001074:	2014      	movs	r0, #20
 8001076:	f7ff ff21 	bl	8000ebc <CLCD_Delay>

	CLCD_WriteI2C(LCD, LCD->ENTRYMODE,CLCD_COMMAND);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	79d9      	ldrb	r1, [r3, #7]
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2200      	movs	r2, #0
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff ff29 	bl	8000eda <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL,CLCD_COMMAND);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	7a19      	ldrb	r1, [r3, #8]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	0018      	movs	r0, r3
 8001092:	f7ff ff22 	bl	8000eda <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->CURSORSHIFT,CLCD_COMMAND);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	7a59      	ldrb	r1, [r3, #9]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff ff1b 	bl	8000eda <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD->FUNCTIONSET,CLCD_COMMAND);
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	7a99      	ldrb	r1, [r3, #10]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2200      	movs	r2, #0
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff ff14 	bl	8000eda <CLCD_WriteI2C>

	CLCD_WriteI2C(LCD, LCD_CLEARDISPLAY,CLCD_COMMAND);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	2101      	movs	r1, #1
 80010b8:	0018      	movs	r0, r3
 80010ba:	f7ff ff0e 	bl	8000eda <CLCD_WriteI2C>
	CLCD_WriteI2C(LCD, LCD_RETURNHOME,CLCD_COMMAND);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2200      	movs	r2, #0
 80010c2:	2102      	movs	r1, #2
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff ff08 	bl	8000eda <CLCD_WriteI2C>
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <CLCD_I2C_SetCursor>:
void CLCD_I2C_SetCursor(CLCD_I2C_Name* LCD, uint8_t Xpos, uint8_t Ypos)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	0008      	movs	r0, r1
 80010dc:	0011      	movs	r1, r2
 80010de:	1cfb      	adds	r3, r7, #3
 80010e0:	1c02      	adds	r2, r0, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	1cbb      	adds	r3, r7, #2
 80010e6:	1c0a      	adds	r2, r1, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	uint8_t DRAM_ADDRESS = 0x00;
 80010ea:	230f      	movs	r3, #15
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	if(Xpos >= LCD->COLUMS)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	795b      	ldrb	r3, [r3, #5]
 80010f6:	1cfa      	adds	r2, r7, #3
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d304      	bcc.n	8001108 <CLCD_I2C_SetCursor+0x36>
	{
		Xpos = LCD->COLUMS - 1;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	795a      	ldrb	r2, [r3, #5]
 8001102:	1cfb      	adds	r3, r7, #3
 8001104:	3a01      	subs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos >= LCD->ROWS)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	799b      	ldrb	r3, [r3, #6]
 800110c:	1cba      	adds	r2, r7, #2
 800110e:	7812      	ldrb	r2, [r2, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d304      	bcc.n	800111e <CLCD_I2C_SetCursor+0x4c>
	{
		Ypos = LCD->ROWS -1;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	799a      	ldrb	r2, [r3, #6]
 8001118:	1cbb      	adds	r3, r7, #2
 800111a:	3a01      	subs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
	}
	if(Ypos == 0)
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d105      	bne.n	8001132 <CLCD_I2C_SetCursor+0x60>
	{
		DRAM_ADDRESS = 0x00 + Xpos;
 8001126:	230f      	movs	r3, #15
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	1cfa      	adds	r2, r7, #3
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	701a      	strb	r2, [r3, #0]
 8001130:	e01f      	b.n	8001172 <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 1)
 8001132:	1cbb      	adds	r3, r7, #2
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d106      	bne.n	8001148 <CLCD_I2C_SetCursor+0x76>
	{
		DRAM_ADDRESS = 0x40 + Xpos;
 800113a:	230f      	movs	r3, #15
 800113c:	18fb      	adds	r3, r7, r3
 800113e:	1cfa      	adds	r2, r7, #3
 8001140:	7812      	ldrb	r2, [r2, #0]
 8001142:	3240      	adds	r2, #64	; 0x40
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	e014      	b.n	8001172 <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 2)
 8001148:	1cbb      	adds	r3, r7, #2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d106      	bne.n	800115e <CLCD_I2C_SetCursor+0x8c>
	{
		DRAM_ADDRESS = 0x14 + Xpos;
 8001150:	230f      	movs	r3, #15
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	1cfa      	adds	r2, r7, #3
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	3214      	adds	r2, #20
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	e009      	b.n	8001172 <CLCD_I2C_SetCursor+0xa0>
	}
	else if(Ypos == 3)
 800115e:	1cbb      	adds	r3, r7, #2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d105      	bne.n	8001172 <CLCD_I2C_SetCursor+0xa0>
	{
		DRAM_ADDRESS = 0x54 + Xpos;
 8001166:	230f      	movs	r3, #15
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	1cfa      	adds	r2, r7, #3
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	3254      	adds	r2, #84	; 0x54
 8001170:	701a      	strb	r2, [r3, #0]
	}
	CLCD_WriteI2C(LCD, LCD_SETDDRAMADDR|DRAM_ADDRESS, CLCD_COMMAND);
 8001172:	230f      	movs	r3, #15
 8001174:	18fb      	adds	r3, r7, r3
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	4252      	negs	r2, r2
 800117c:	4313      	orrs	r3, r2
 800117e:	b2d9      	uxtb	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fea8 	bl	8000eda <CLCD_WriteI2C>
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b004      	add	sp, #16
 8001190:	bd80      	pop	{r7, pc}

08001192 <CLCD_I2C_WriteChar>:
void CLCD_I2C_WriteChar(CLCD_I2C_Name* LCD, char character)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	000a      	movs	r2, r1
 800119c:	1cfb      	adds	r3, r7, #3
 800119e:	701a      	strb	r2, [r3, #0]
	CLCD_WriteI2C(LCD, character, CLCD_DATA);
 80011a0:	1cfb      	adds	r3, r7, #3
 80011a2:	7819      	ldrb	r1, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff fe96 	bl	8000eda <CLCD_WriteI2C>
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <CLCD_I2C_WriteString>:
void CLCD_I2C_WriteString(CLCD_I2C_Name* LCD, char *String)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
	while(*String)CLCD_I2C_WriteChar(LCD, *String++);
 80011c0:	e008      	b.n	80011d4 <CLCD_I2C_WriteString+0x1e>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	1c5a      	adds	r2, r3, #1
 80011c6:	603a      	str	r2, [r7, #0]
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff ffdf 	bl	8001192 <CLCD_I2C_WriteChar>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f2      	bne.n	80011c2 <CLCD_I2C_WriteString+0xc>
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <ShowLCD_String>:
	LCD->DISPLAYCTRL &= ~LCD_BLINKON;
	CLCD_WriteI2C(LCD, LCD->DISPLAYCTRL, CLCD_COMMAND);
}

void ShowLCD_String(char *str, uint8_t col, uint8_t row)
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	0008      	movs	r0, r1
 80011f2:	0011      	movs	r1, r2
 80011f4:	1cfb      	adds	r3, r7, #3
 80011f6:	1c02      	adds	r2, r0, #0
 80011f8:	701a      	strb	r2, [r3, #0]
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	1c0a      	adds	r2, r1, #0
 80011fe:	701a      	strb	r2, [r3, #0]
	char buffer[_USER_TEXT_LCD_NUM_COL];

	if (row >= _USER_TEXT_LCD_NUM_ROW)
 8001200:	1cbb      	adds	r3, r7, #2
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d842      	bhi.n	800128e <ShowLCD_String+0xa6>
		return;
	for (uint8_t i = 0; i <= _USER_TEXT_LCD_NUM_COL; i++)
 8001208:	231f      	movs	r3, #31
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
 8001210:	e021      	b.n	8001256 <ShowLCD_String+0x6e>
	{
		if (i < strlen(str))
 8001212:	251f      	movs	r5, #31
 8001214:	197b      	adds	r3, r7, r5
 8001216:	781c      	ldrb	r4, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	0018      	movs	r0, r3
 800121c:	f7fe ff74 	bl	8000108 <strlen>
 8001220:	0003      	movs	r3, r0
 8001222:	429c      	cmp	r4, r3
 8001224:	d20a      	bcs.n	800123c <ShowLCD_String+0x54>
			buffer[i] = str[i];
 8001226:	197b      	adds	r3, r7, r5
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	18d2      	adds	r2, r2, r3
 800122e:	197b      	adds	r3, r7, r5
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	7811      	ldrb	r1, [r2, #0]
 8001234:	220c      	movs	r2, #12
 8001236:	18ba      	adds	r2, r7, r2
 8001238:	54d1      	strb	r1, [r2, r3]
 800123a:	e006      	b.n	800124a <ShowLCD_String+0x62>
		else
			buffer[i] = ' ';
 800123c:	231f      	movs	r3, #31
 800123e:	18fb      	adds	r3, r7, r3
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	220c      	movs	r2, #12
 8001244:	18ba      	adds	r2, r7, r2
 8001246:	2120      	movs	r1, #32
 8001248:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i <= _USER_TEXT_LCD_NUM_COL; i++)
 800124a:	211f      	movs	r1, #31
 800124c:	187b      	adds	r3, r7, r1
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	187b      	adds	r3, r7, r1
 8001252:	3201      	adds	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
 8001256:	231f      	movs	r3, #31
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b10      	cmp	r3, #16
 800125e:	d9d8      	bls.n	8001212 <ShowLCD_String+0x2a>
	}
	buffer[_USER_TEXT_LCD_NUM_COL-col] = 0;
 8001260:	1cfb      	adds	r3, r7, #3
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2210      	movs	r2, #16
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	240c      	movs	r4, #12
 800126a:	193a      	adds	r2, r7, r4
 800126c:	2100      	movs	r1, #0
 800126e:	54d1      	strb	r1, [r2, r3]

	CLCD_I2C_SetCursor(&LCD1, col, row);
 8001270:	1cbb      	adds	r3, r7, #2
 8001272:	781a      	ldrb	r2, [r3, #0]
 8001274:	1cfb      	adds	r3, r7, #3
 8001276:	7819      	ldrb	r1, [r3, #0]
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <ShowLCD_String+0xb0>)
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff ff29 	bl	80010d2 <CLCD_I2C_SetCursor>
	CLCD_I2C_WriteString(&LCD1, buffer);
 8001280:	193a      	adds	r2, r7, r4
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <ShowLCD_String+0xb0>)
 8001284:	0011      	movs	r1, r2
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff ff95 	bl	80011b6 <CLCD_I2C_WriteString>
 800128c:	e000      	b.n	8001290 <ShowLCD_String+0xa8>
		return;
 800128e:	46c0      	nop			; (mov r8, r8)
}
 8001290:	46bd      	mov	sp, r7
 8001292:	b008      	add	sp, #32
 8001294:	bdb0      	pop	{r4, r5, r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	20000178 	.word	0x20000178

0800129c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a0:	f000 fca8 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a4:	f000 f81c 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a8:	f000 fa0e 	bl	80016c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ac:	f000 f9ee 	bl	800168c <MX_DMA_Init>
  MX_IWDG_Init();
 80012b0:	f000 f916 	bl	80014e0 <MX_IWDG_Init>
  MX_ADC_Init();
 80012b4:	f000 f878 	bl	80013a8 <MX_ADC_Init>
  MX_I2C1_Init();
 80012b8:	f000 f8d2 	bl	8001460 <MX_I2C1_Init>
  MX_TIM15_Init();
 80012bc:	f000 f930 	bl	8001520 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  heatCtrlInit();
 80012c0:	f7ff fd20 	bl	8000d04 <heatCtrlInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Tan so IWDG = 40 khz,IWDG_PRESCALER_32,indow : 4095 => time = 3.276 s
  _MCU_WDT_Init();
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <main+0x40>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f002 fb5a 	bl	8003980 <HAL_IWDG_Init>
  while(1) {
      _MCU_WDT_Refresh();
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <main+0x40>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f002 fba0 	bl	8003a14 <HAL_IWDG_Refresh>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      heatCtrlLoop();
 80012d4:	f7ff fd80 	bl	8000dd8 <heatCtrlLoop>
      _MCU_WDT_Refresh();
 80012d8:	e7f8      	b.n	80012cc <main+0x30>
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	20000254 	.word	0x20000254

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b095      	sub	sp, #84	; 0x54
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	2420      	movs	r4, #32
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	0018      	movs	r0, r3
 80012ec:	2330      	movs	r3, #48	; 0x30
 80012ee:	001a      	movs	r2, r3
 80012f0:	2100      	movs	r1, #0
 80012f2:	f003 ffc0 	bl	8005276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f6:	2310      	movs	r3, #16
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	0018      	movs	r0, r3
 80012fc:	2310      	movs	r3, #16
 80012fe:	001a      	movs	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	f003 ffb8 	bl	8005276 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001306:	003b      	movs	r3, r7
 8001308:	0018      	movs	r0, r3
 800130a:	2310      	movs	r3, #16
 800130c:	001a      	movs	r2, r3
 800130e:	2100      	movs	r1, #0
 8001310:	f003 ffb1 	bl	8005276 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001314:	0021      	movs	r1, r4
 8001316:	187b      	adds	r3, r7, r1
 8001318:	220a      	movs	r2, #10
 800131a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2201      	movs	r2, #1
 8001320:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2210      	movs	r2, #16
 8001326:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2201      	movs	r2, #1
 800132c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2202      	movs	r2, #2
 8001332:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800133a:	187b      	adds	r3, r7, r1
 800133c:	22a0      	movs	r2, #160	; 0xa0
 800133e:	0392      	lsls	r2, r2, #14
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	187b      	adds	r3, r7, r1
 800134a:	0018      	movs	r0, r3
 800134c:	f002 fb72 	bl	8003a34 <HAL_RCC_OscConfig>
 8001350:	1e03      	subs	r3, r0, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001354:	f000 fa7a 	bl	800184c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	2110      	movs	r1, #16
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2202      	movs	r2, #2
 8001364:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001366:	187b      	adds	r3, r7, r1
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800136c:	187b      	adds	r3, r7, r1
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001372:	187b      	adds	r3, r7, r1
 8001374:	2101      	movs	r1, #1
 8001376:	0018      	movs	r0, r3
 8001378:	f002 fe76 	bl	8004068 <HAL_RCC_ClockConfig>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001380:	f000 fa64 	bl	800184c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001384:	003b      	movs	r3, r7
 8001386:	2220      	movs	r2, #32
 8001388:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800138a:	003b      	movs	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	003b      	movs	r3, r7
 8001392:	0018      	movs	r0, r3
 8001394:	f002 ff9a 	bl	80042cc <HAL_RCCEx_PeriphCLKConfig>
 8001398:	1e03      	subs	r3, r0, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800139c:	f000 fa56 	bl	800184c <Error_Handler>
  }
}
 80013a0:	46c0      	nop			; (mov r8, r8)
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b015      	add	sp, #84	; 0x54
 80013a6:	bd90      	pop	{r4, r7, pc}

080013a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	0018      	movs	r0, r3
 80013b2:	230c      	movs	r3, #12
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f003 ff5d 	bl	8005276 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_ADC_Init+0xb0>)
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <MX_ADC_Init+0xb4>)
 80013c0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <MX_ADC_Init+0xb0>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	0612      	lsls	r2, r2, #24
 80013c8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013ca:	4b23      	ldr	r3, [pc, #140]	; (8001458 <MX_ADC_Init+0xb0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <MX_ADC_Init+0xb0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_ADC_Init+0xb0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_ADC_Init+0xb0>)
 80013de:	2204      	movs	r2, #4
 80013e0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_ADC_Init+0xb0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_ADC_Init+0xb0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_ADC_Init+0xb0>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_ADC_Init+0xb0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_ADC_Init+0xb0>)
 80013fc:	22c2      	movs	r2, #194	; 0xc2
 80013fe:	32ff      	adds	r2, #255	; 0xff
 8001400:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_ADC_Init+0xb0>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001408:	4b13      	ldr	r3, [pc, #76]	; (8001458 <MX_ADC_Init+0xb0>)
 800140a:	2224      	movs	r2, #36	; 0x24
 800140c:	2101      	movs	r1, #1
 800140e:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_ADC_Init+0xb0>)
 8001412:	2201      	movs	r2, #1
 8001414:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_ADC_Init+0xb0>)
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fc73 	bl	8001d04 <HAL_ADC_Init>
 800141e:	1e03      	subs	r3, r0, #0
 8001420:	d001      	beq.n	8001426 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8001422:	f000 fa13 	bl	800184c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2280      	movs	r2, #128	; 0x80
 8001430:	0152      	lsls	r2, r2, #5
 8001432:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2207      	movs	r2, #7
 8001438:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800143a:	1d3a      	adds	r2, r7, #4
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <MX_ADC_Init+0xb0>)
 800143e:	0011      	movs	r1, r2
 8001440:	0018      	movs	r0, r3
 8001442:	f000 fe31 	bl	80020a8 <HAL_ADC_ConfigChannel>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d001      	beq.n	800144e <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800144a:	f000 f9ff 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b004      	add	sp, #16
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	20000184 	.word	0x20000184
 800145c:	40012400 	.word	0x40012400

08001460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <MX_I2C1_Init+0x78>)
 8001468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_I2C1_Init+0x74>)
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <MX_I2C1_Init+0x7c>)
 800146e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001478:	2201      	movs	r2, #1
 800147a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_I2C1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <MX_I2C1_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <MX_I2C1_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_I2C1_Init+0x74>)
 800149c:	0018      	movs	r0, r3
 800149e:	f001 fec1 	bl	8003224 <HAL_I2C_Init>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014a6:	f000 f9d1 	bl	800184c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <MX_I2C1_Init+0x74>)
 80014ac:	2100      	movs	r1, #0
 80014ae:	0018      	movs	r0, r3
 80014b0:	f002 f9ce 	bl	8003850 <HAL_I2CEx_ConfigAnalogFilter>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d001      	beq.n	80014bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014b8:	f000 f9c8 	bl	800184c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <MX_I2C1_Init+0x74>)
 80014be:	2100      	movs	r1, #0
 80014c0:	0018      	movs	r0, r3
 80014c2:	f002 fa11 	bl	80038e8 <HAL_I2CEx_ConfigDigitalFilter>
 80014c6:	1e03      	subs	r3, r0, #0
 80014c8:	d001      	beq.n	80014ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 f9bf 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000208 	.word	0x20000208
 80014d8:	40005400 	.word	0x40005400
 80014dc:	2000090e 	.word	0x2000090e

080014e0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_IWDG_Init+0x34>)
 80014e6:	4a0c      	ldr	r2, [pc, #48]	; (8001518 <MX_IWDG_Init+0x38>)
 80014e8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <MX_IWDG_Init+0x34>)
 80014ec:	2204      	movs	r2, #4
 80014ee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_IWDG_Init+0x34>)
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <MX_IWDG_Init+0x3c>)
 80014f4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <MX_IWDG_Init+0x34>)
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <MX_IWDG_Init+0x3c>)
 80014fa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <MX_IWDG_Init+0x34>)
 80014fe:	0018      	movs	r0, r3
 8001500:	f002 fa3e 	bl	8003980 <HAL_IWDG_Init>
 8001504:	1e03      	subs	r3, r0, #0
 8001506:	d001      	beq.n	800150c <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8001508:	f000 f9a0 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	20000254 	.word	0x20000254
 8001518:	40003000 	.word	0x40003000
 800151c:	00000fff 	.word	0x00000fff

08001520 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	; 0x58
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001526:	2348      	movs	r3, #72	; 0x48
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	0018      	movs	r0, r3
 800152c:	2310      	movs	r3, #16
 800152e:	001a      	movs	r2, r3
 8001530:	2100      	movs	r1, #0
 8001532:	f003 fea0 	bl	8005276 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001536:	2340      	movs	r3, #64	; 0x40
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	0018      	movs	r0, r3
 800153c:	2308      	movs	r3, #8
 800153e:	001a      	movs	r2, r3
 8001540:	2100      	movs	r1, #0
 8001542:	f003 fe98 	bl	8005276 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001546:	2324      	movs	r3, #36	; 0x24
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	0018      	movs	r0, r3
 800154c:	231c      	movs	r3, #28
 800154e:	001a      	movs	r2, r3
 8001550:	2100      	movs	r1, #0
 8001552:	f003 fe90 	bl	8005276 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	0018      	movs	r0, r3
 800155a:	2320      	movs	r3, #32
 800155c:	001a      	movs	r2, r3
 800155e:	2100      	movs	r1, #0
 8001560:	f003 fe89 	bl	8005276 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001564:	4b46      	ldr	r3, [pc, #280]	; (8001680 <MX_TIM15_Init+0x160>)
 8001566:	4a47      	ldr	r2, [pc, #284]	; (8001684 <MX_TIM15_Init+0x164>)
 8001568:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 48;
 800156a:	4b45      	ldr	r3, [pc, #276]	; (8001680 <MX_TIM15_Init+0x160>)
 800156c:	2230      	movs	r2, #48	; 0x30
 800156e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b43      	ldr	r3, [pc, #268]	; (8001680 <MX_TIM15_Init+0x160>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001576:	4b42      	ldr	r3, [pc, #264]	; (8001680 <MX_TIM15_Init+0x160>)
 8001578:	4a43      	ldr	r2, [pc, #268]	; (8001688 <MX_TIM15_Init+0x168>)
 800157a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b40      	ldr	r3, [pc, #256]	; (8001680 <MX_TIM15_Init+0x160>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <MX_TIM15_Init+0x160>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b3d      	ldr	r3, [pc, #244]	; (8001680 <MX_TIM15_Init+0x160>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800158e:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <MX_TIM15_Init+0x160>)
 8001590:	0018      	movs	r0, r3
 8001592:	f002 ff69 	bl	8004468 <HAL_TIM_Base_Init>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d001      	beq.n	800159e <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800159a:	f000 f957 	bl	800184c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	2148      	movs	r1, #72	; 0x48
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	0152      	lsls	r2, r2, #5
 80015a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015a8:	187a      	adds	r2, r7, r1
 80015aa:	4b35      	ldr	r3, [pc, #212]	; (8001680 <MX_TIM15_Init+0x160>)
 80015ac:	0011      	movs	r1, r2
 80015ae:	0018      	movs	r0, r3
 80015b0:	f003 f970 	bl	8004894 <HAL_TIM_ConfigClockSource>
 80015b4:	1e03      	subs	r3, r0, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80015b8:	f000 f948 	bl	800184c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <MX_TIM15_Init+0x160>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f002 ffa2 	bl	8004508 <HAL_TIM_PWM_Init>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80015c8:	f000 f940 	bl	800184c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2140      	movs	r1, #64	; 0x40
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2200      	movs	r2, #0
 80015d8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015da:	187a      	adds	r2, r7, r1
 80015dc:	4b28      	ldr	r3, [pc, #160]	; (8001680 <MX_TIM15_Init+0x160>)
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f003 fd51 	bl	8005088 <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80015ea:	f000 f92f 	bl	800184c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ee:	2124      	movs	r1, #36	; 0x24
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2260      	movs	r2, #96	; 0x60
 80015f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	2202      	movs	r2, #2
 8001600:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161a:	1879      	adds	r1, r7, r1
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_TIM15_Init+0x160>)
 800161e:	2204      	movs	r2, #4
 8001620:	0018      	movs	r0, r3
 8001622:	f003 f87b 	bl	800471c <HAL_TIM_PWM_ConfigChannel>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d001      	beq.n	800162e <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 800162a:	f000 f90f 	bl	800184c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	0192      	lsls	r2, r2, #6
 8001652:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800165a:	1d3a      	adds	r2, r7, #4
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_TIM15_Init+0x160>)
 800165e:	0011      	movs	r1, r2
 8001660:	0018      	movs	r0, r3
 8001662:	f003 fd69 	bl	8005138 <HAL_TIMEx_ConfigBreakDeadTime>
 8001666:	1e03      	subs	r3, r0, #0
 8001668:	d001      	beq.n	800166e <MX_TIM15_Init+0x14e>
  {
    Error_Handler();
 800166a:	f000 f8ef 	bl	800184c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <MX_TIM15_Init+0x160>)
 8001670:	0018      	movs	r0, r3
 8001672:	f000 f9f5 	bl	8001a60 <HAL_TIM_MspPostInit>

}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b016      	add	sp, #88	; 0x58
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	20000264 	.word	0x20000264
 8001684:	40014000 	.word	0x40014000
 8001688:	000003e7 	.word	0x000003e7

0800168c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_DMA_Init+0x38>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_DMA_Init+0x38>)
 8001698:	2101      	movs	r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	615a      	str	r2, [r3, #20]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_DMA_Init+0x38>)
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2009      	movs	r0, #9
 80016b0:	f001 f83a 	bl	8002728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016b4:	2009      	movs	r0, #9
 80016b6:	f001 f84c 	bl	8002752 <HAL_NVIC_EnableIRQ>

}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40021000 	.word	0x40021000

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	2414      	movs	r4, #20
 80016d0:	193b      	adds	r3, r7, r4
 80016d2:	0018      	movs	r0, r3
 80016d4:	2314      	movs	r3, #20
 80016d6:	001a      	movs	r2, r3
 80016d8:	2100      	movs	r1, #0
 80016da:	f003 fdcc 	bl	8005276 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b55      	ldr	r3, [pc, #340]	; (8001834 <MX_GPIO_Init+0x16c>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <MX_GPIO_Init+0x16c>)
 80016e4:	2180      	movs	r1, #128	; 0x80
 80016e6:	0309      	lsls	r1, r1, #12
 80016e8:	430a      	orrs	r2, r1
 80016ea:	615a      	str	r2, [r3, #20]
 80016ec:	4b51      	ldr	r3, [pc, #324]	; (8001834 <MX_GPIO_Init+0x16c>)
 80016ee:	695a      	ldr	r2, [r3, #20]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	031b      	lsls	r3, r3, #12
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fa:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <MX_GPIO_Init+0x16c>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	4b4d      	ldr	r3, [pc, #308]	; (8001834 <MX_GPIO_Init+0x16c>)
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	03c9      	lsls	r1, r1, #15
 8001704:	430a      	orrs	r2, r1
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	4b4a      	ldr	r3, [pc, #296]	; (8001834 <MX_GPIO_Init+0x16c>)
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	03db      	lsls	r3, r3, #15
 8001710:	4013      	ands	r3, r2
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b47      	ldr	r3, [pc, #284]	; (8001834 <MX_GPIO_Init+0x16c>)
 8001718:	695a      	ldr	r2, [r3, #20]
 800171a:	4b46      	ldr	r3, [pc, #280]	; (8001834 <MX_GPIO_Init+0x16c>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0289      	lsls	r1, r1, #10
 8001720:	430a      	orrs	r2, r1
 8001722:	615a      	str	r2, [r3, #20]
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <MX_GPIO_Init+0x16c>)
 8001726:	695a      	ldr	r2, [r3, #20]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	029b      	lsls	r3, r3, #10
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b40      	ldr	r3, [pc, #256]	; (8001834 <MX_GPIO_Init+0x16c>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <MX_GPIO_Init+0x16c>)
 8001738:	2180      	movs	r1, #128	; 0x80
 800173a:	02c9      	lsls	r1, r1, #11
 800173c:	430a      	orrs	r2, r1
 800173e:	615a      	str	r2, [r3, #20]
 8001740:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <MX_GPIO_Init+0x16c>)
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	02db      	lsls	r3, r3, #11
 8001748:	4013      	ands	r3, r2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STT_Pin|RLSOL_Pin, GPIO_PIN_RESET);
 800174e:	2390      	movs	r3, #144	; 0x90
 8001750:	0119      	lsls	r1, r3, #4
 8001752:	2390      	movs	r3, #144	; 0x90
 8001754:	05db      	lsls	r3, r3, #23
 8001756:	2200      	movs	r2, #0
 8001758:	0018      	movs	r0, r3
 800175a:	f001 fd46 	bl	80031ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	22e0      	movs	r2, #224	; 0xe0
 8001762:	0212      	lsls	r2, r2, #8
 8001764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2203      	movs	r2, #3
 800176a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001772:	193b      	adds	r3, r7, r4
 8001774:	4a30      	ldr	r2, [pc, #192]	; (8001838 <MX_GPIO_Init+0x170>)
 8001776:	0019      	movs	r1, r3
 8001778:	0010      	movs	r0, r2
 800177a:	f001 fba9 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF6 PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	22c3      	movs	r2, #195	; 0xc3
 8001782:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	193b      	adds	r3, r7, r4
 8001786:	2203      	movs	r2, #3
 8001788:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	193b      	adds	r3, r7, r4
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001790:	193b      	adds	r3, r7, r4
 8001792:	4a2a      	ldr	r2, [pc, #168]	; (800183c <MX_GPIO_Init+0x174>)
 8001794:	0019      	movs	r1, r3
 8001796:	0010      	movs	r0, r2
 8001798:	f001 fb9a 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5
                           PA6 PA7 PA9 PA10
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 800179c:	193b      	adds	r3, r7, r4
 800179e:	4a28      	ldr	r2, [pc, #160]	; (8001840 <MX_GPIO_Init+0x178>)
 80017a0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2203      	movs	r2, #3
 80017a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	193a      	adds	r2, r7, r4
 80017b0:	2390      	movs	r3, #144	; 0x90
 80017b2:	05db      	lsls	r3, r3, #23
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f001 fb8a 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	4a21      	ldr	r2, [pc, #132]	; (8001844 <MX_GPIO_Init+0x17c>)
 80017c0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2203      	movs	r2, #3
 80017c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <MX_GPIO_Init+0x180>)
 80017d2:	0019      	movs	r1, r3
 80017d4:	0010      	movs	r0, r2
 80017d6:	f001 fb7b 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STT_Pin RLSOL_Pin */
  GPIO_InitStruct.Pin = LED_STT_Pin|RLSOL_Pin;
 80017da:	0021      	movs	r1, r4
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2290      	movs	r2, #144	; 0x90
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e4:	000c      	movs	r4, r1
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	2201      	movs	r2, #1
 80017ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	2202      	movs	r2, #2
 80017f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	193a      	adds	r2, r7, r4
 80017fa:	2390      	movs	r3, #144	; 0x90
 80017fc:	05db      	lsls	r3, r3, #23
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f001 fb65 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001806:	0021      	movs	r1, r4
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	0212      	lsls	r2, r2, #8
 800180e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	187b      	adds	r3, r7, r1
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001816:	187b      	adds	r3, r7, r1
 8001818:	2201      	movs	r2, #1
 800181a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800181c:	187a      	adds	r2, r7, r1
 800181e:	2390      	movs	r3, #144	; 0x90
 8001820:	05db      	lsls	r3, r3, #23
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f001 fb53 	bl	8002ed0 <HAL_GPIO_Init>

}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b00b      	add	sp, #44	; 0x2c
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	40021000 	.word	0x40021000
 8001838:	48000800 	.word	0x48000800
 800183c:	48001400 	.word	0x48001400
 8001840:	000016f6 	.word	0x000016f6
 8001844:	0000fcff 	.word	0x0000fcff
 8001848:	48000400 	.word	0x48000400

0800184c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001850:	b672      	cpsid	i
}
 8001852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1) {
 8001854:	e7fe      	b.n	8001854 <Error_Handler+0x8>
	...

08001858 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_MspInit+0x44>)
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <HAL_MspInit+0x44>)
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	619a      	str	r2, [r3, #24]
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_MspInit+0x44>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_MspInit+0x44>)
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_MspInit+0x44>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0549      	lsls	r1, r1, #21
 8001880:	430a      	orrs	r2, r1
 8001882:	61da      	str	r2, [r3, #28]
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_MspInit+0x44>)
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	055b      	lsls	r3, r3, #21
 800188c:	4013      	ands	r3, r2
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b08b      	sub	sp, #44	; 0x2c
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	2414      	movs	r4, #20
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	0018      	movs	r0, r3
 80018ae:	2314      	movs	r3, #20
 80018b0:	001a      	movs	r2, r3
 80018b2:	2100      	movs	r1, #0
 80018b4:	f003 fcdf 	bl	8005276 <memset>
  if(hadc->Instance==ADC1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a2d      	ldr	r2, [pc, #180]	; (8001974 <HAL_ADC_MspInit+0xd4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d153      	bne.n	800196a <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018c2:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_ADC_MspInit+0xd8>)
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <HAL_ADC_MspInit+0xd8>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0089      	lsls	r1, r1, #2
 80018cc:	430a      	orrs	r2, r1
 80018ce:	619a      	str	r2, [r3, #24]
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_ADC_MspInit+0xd8>)
 80018d2:	699a      	ldr	r2, [r3, #24]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_ADC_MspInit+0xd8>)
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_ADC_MspInit+0xd8>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0289      	lsls	r1, r1, #10
 80018e8:	430a      	orrs	r2, r1
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_ADC_MspInit+0xd8>)
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	029b      	lsls	r3, r3, #10
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018fa:	193b      	adds	r3, r7, r4
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001900:	193b      	adds	r3, r7, r4
 8001902:	2203      	movs	r2, #3
 8001904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	193b      	adds	r3, r7, r4
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	193a      	adds	r2, r7, r4
 800190e:	2390      	movs	r3, #144	; 0x90
 8001910:	05db      	lsls	r3, r3, #23
 8001912:	0011      	movs	r1, r2
 8001914:	0018      	movs	r0, r3
 8001916:	f001 fadb 	bl	8002ed0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <HAL_ADC_MspInit+0xdc>)
 800191c:	4a18      	ldr	r2, [pc, #96]	; (8001980 <HAL_ADC_MspInit+0xe0>)
 800191e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001920:	4b16      	ldr	r3, [pc, #88]	; (800197c <HAL_ADC_MspInit+0xdc>)
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <HAL_ADC_MspInit+0xdc>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800192c:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_ADC_MspInit+0xdc>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_ADC_MspInit+0xdc>)
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0052      	lsls	r2, r2, #1
 8001938:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_ADC_MspInit+0xdc>)
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	00d2      	lsls	r2, r2, #3
 8001940:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <HAL_ADC_MspInit+0xdc>)
 8001944:	2220      	movs	r2, #32
 8001946:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_ADC_MspInit+0xdc>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_ADC_MspInit+0xdc>)
 8001950:	0018      	movs	r0, r3
 8001952:	f000 ff23 	bl	800279c <HAL_DMA_Init>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d001      	beq.n	800195e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800195a:	f7ff ff77 	bl	800184c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a06      	ldr	r2, [pc, #24]	; (800197c <HAL_ADC_MspInit+0xdc>)
 8001962:	631a      	str	r2, [r3, #48]	; 0x30
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_ADC_MspInit+0xdc>)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b00b      	add	sp, #44	; 0x2c
 8001970:	bd90      	pop	{r4, r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	40012400 	.word	0x40012400
 8001978:	40021000 	.word	0x40021000
 800197c:	200001c4 	.word	0x200001c4
 8001980:	40020008 	.word	0x40020008

08001984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	2414      	movs	r4, #20
 800198e:	193b      	adds	r3, r7, r4
 8001990:	0018      	movs	r0, r3
 8001992:	2314      	movs	r3, #20
 8001994:	001a      	movs	r2, r3
 8001996:	2100      	movs	r1, #0
 8001998:	f003 fc6d 	bl	8005276 <memset>
  if(hi2c->Instance==I2C1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_I2C_MspInit+0x90>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d132      	bne.n	8001a0c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_I2C_MspInit+0x94>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_I2C_MspInit+0x94>)
 80019ac:	2180      	movs	r1, #128	; 0x80
 80019ae:	02c9      	lsls	r1, r1, #11
 80019b0:	430a      	orrs	r2, r1
 80019b2:	615a      	str	r2, [r3, #20]
 80019b4:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_I2C_MspInit+0x94>)
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	02db      	lsls	r3, r3, #11
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	22c0      	movs	r2, #192	; 0xc0
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ca:	0021      	movs	r1, r4
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2212      	movs	r2, #18
 80019d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	2201      	movs	r2, #1
 80019d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2203      	movs	r2, #3
 80019dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2201      	movs	r2, #1
 80019e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_I2C_MspInit+0x98>)
 80019e8:	0019      	movs	r1, r3
 80019ea:	0010      	movs	r0, r2
 80019ec:	f001 fa70 	bl	8002ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_I2C_MspInit+0x94>)
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_I2C_MspInit+0x94>)
 80019f6:	2180      	movs	r1, #128	; 0x80
 80019f8:	0389      	lsls	r1, r1, #14
 80019fa:	430a      	orrs	r2, r1
 80019fc:	61da      	str	r2, [r3, #28]
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_I2C_MspInit+0x94>)
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	039b      	lsls	r3, r3, #14
 8001a06:	4013      	ands	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b00b      	add	sp, #44	; 0x2c
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	40005400 	.word	0x40005400
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	48000400 	.word	0x48000400

08001a20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_TIM_Base_MspInit+0x38>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10d      	bne.n	8001a4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_TIM_Base_MspInit+0x3c>)
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_TIM_Base_MspInit+0x3c>)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	0249      	lsls	r1, r1, #9
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_TIM_Base_MspInit+0x3c>)
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	025b      	lsls	r3, r3, #9
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	40014000 	.word	0x40014000
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b089      	sub	sp, #36	; 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	240c      	movs	r4, #12
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	2314      	movs	r3, #20
 8001a70:	001a      	movs	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	f003 fbff 	bl	8005276 <memset>
  if(htim->Instance==TIM15)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <HAL_TIM_MspPostInit+0x74>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d124      	bne.n	8001acc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_TIM_MspPostInit+0x78>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_TIM_MspPostInit+0x78>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0289      	lsls	r1, r1, #10
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	615a      	str	r2, [r3, #20]
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_TIM_MspPostInit+0x78>)
 8001a92:	695a      	ldr	r2, [r3, #20]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	029b      	lsls	r3, r3, #10
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PA3     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM15;
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	187a      	adds	r2, r7, r1
 8001ac0:	2390      	movs	r3, #144	; 0x90
 8001ac2:	05db      	lsls	r3, r3, #23
 8001ac4:	0011      	movs	r1, r2
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f001 fa02 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b009      	add	sp, #36	; 0x24
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	40014000 	.word	0x40014000
 8001ad8:	40021000 	.word	0x40021000

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while(1) {
 8001ae0:	e7fe      	b.n	8001ae0 <NMI_Handler+0x4>

08001ae2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ae6:	e7fe      	b.n	8001ae6 <HardFault_Handler+0x4>

08001ae8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 f8c0 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8001b04:	f000 fe42 	bl	800278c <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <DMA1_Channel1_IRQHandler+0x14>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 feee 	bl	80028f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	200001c4 	.word	0x200001c4

08001b28 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	; (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if(NULL == __sbrk_heap_end) {
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if(__sbrk_heap_end + incr > max_heap) {
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	18d3      	adds	r3, r2, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
		errno = ENOMEM;
 8001b58:	f003 fb4c 	bl	80051f4 <__errno>
 8001b5c:	0003      	movs	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001b62:	2301      	movs	r3, #1
 8001b64:	425b      	negs	r3, r3
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	18d2      	adds	r2, r2, r3
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <_sbrk+0x64>)
 8001b78:	601a      	str	r2, [r3, #0]

	return (void*) prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b006      	add	sp, #24
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20002000 	.word	0x20002000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	200002ac 	.word	0x200002ac
 8001b90:	200002e8 	.word	0x200002e8

08001b94 <SystemInit>:
/**
 * @brief  Setup the microcontroller system
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	 before branch to main program. This call is made inside
	 the "startup_stm32f0xx.s" file.
	 User can setups the default system clock (System clock source, PLL Multiplier
	 and Divider factors, AHB/APBx prescalers and Flash settings).
	 */
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480d      	ldr	r0, [pc, #52]	; (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490e      	ldr	r1, [pc, #56]	; (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0b      	ldr	r2, [pc, #44]	; (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0b      	ldr	r4, [pc, #44]	; (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bca:	f7ff ffe3 	bl	8001b94 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bce:	f003 fb17 	bl	8005200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd2:	f7ff fb63 	bl	800129c <main>

08001bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   r0, =_estack
 8001bd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001be4:	08005c38 	.word	0x08005c38
  ldr r2, =_sbss
 8001be8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bec:	200002e8 	.word	0x200002e8

08001bf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_Init+0x24>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <HAL_Init+0x24>)
 8001bfe:	2110      	movs	r1, #16
 8001c00:	430a      	orrs	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f000 f809 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0a:	f7ff fe25 	bl	8001858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_InitTick+0x5c>)
 8001c26:	681c      	ldr	r4, [r3, #0]
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_InitTick+0x60>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	23fa      	movs	r3, #250	; 0xfa
 8001c30:	0098      	lsls	r0, r3, #2
 8001c32:	f7fe fa7b 	bl	800012c <__udivsi3>
 8001c36:	0003      	movs	r3, r0
 8001c38:	0019      	movs	r1, r3
 8001c3a:	0020      	movs	r0, r4
 8001c3c:	f7fe fa76 	bl	800012c <__udivsi3>
 8001c40:	0003      	movs	r3, r0
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fd95 	bl	8002772 <HAL_SYSTICK_Config>
 8001c48:	1e03      	subs	r3, r0, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e00f      	b.n	8001c70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	d80b      	bhi.n	8001c6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fd62 	bl	8002728 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <HAL_InitTick+0x64>)
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b003      	add	sp, #12
 8001c76:	bd90      	pop	{r4, r7, pc}
 8001c78:	20000004 	.word	0x20000004
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	20000008 	.word	0x20000008

08001c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <HAL_IncTick+0x1c>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	18d2      	adds	r2, r2, r3
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c96:	601a      	str	r2, [r3, #0]
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	2000000c 	.word	0x2000000c
 8001ca4:	200002b0 	.word	0x200002b0

08001ca8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  return uwTick;
 8001cac:	4b02      	ldr	r3, [pc, #8]	; (8001cb8 <HAL_GetTick+0x10>)
 8001cae:	681b      	ldr	r3, [r3, #0]
}
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	200002b0 	.word	0x200002b0

08001cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc4:	f7ff fff0 	bl	8001ca8 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	d005      	beq.n	8001ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_Delay+0x44>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	001a      	movs	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	189b      	adds	r3, r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	f7ff ffe0 	bl	8001ca8 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d8f7      	bhi.n	8001ce4 <HAL_Delay+0x28>
  {
  }
}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	b004      	add	sp, #16
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	2000000c 	.word	0x2000000c

08001d04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	230f      	movs	r3, #15
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e125      	b.n	8001f6e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2234      	movs	r2, #52	; 0x34
 8001d34:	2100      	movs	r1, #0
 8001d36:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7ff fdb0 	bl	80018a0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d44:	2210      	movs	r2, #16
 8001d46:	4013      	ands	r3, r2
 8001d48:	d000      	beq.n	8001d4c <HAL_ADC_Init+0x48>
 8001d4a:	e103      	b.n	8001f54 <HAL_ADC_Init+0x250>
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d000      	beq.n	8001d58 <HAL_ADC_Init+0x54>
 8001d56:	e0fd      	b.n	8001f54 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001d62:	d000      	beq.n	8001d66 <HAL_ADC_Init+0x62>
 8001d64:	e0f6      	b.n	8001f54 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	4a83      	ldr	r2, [pc, #524]	; (8001f78 <HAL_ADC_Init+0x274>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2202      	movs	r2, #2
 8001d70:	431a      	orrs	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d112      	bne.n	8001daa <HAL_ADC_Init+0xa6>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d009      	beq.n	8001da6 <HAL_ADC_Init+0xa2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Init+0xa6>
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_ADC_Init+0xa8>
 8001daa:	2300      	movs	r3, #0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d116      	bne.n	8001dde <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2218      	movs	r2, #24
 8001db8:	4393      	bics	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	0899      	lsrs	r1, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4964      	ldr	r1, [pc, #400]	; (8001f7c <HAL_ADC_Init+0x278>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	7e1b      	ldrb	r3, [r3, #24]
 8001df2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7e5b      	ldrb	r3, [r3, #25]
 8001df8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001dfa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7e9b      	ldrb	r3, [r3, #26]
 8001e00:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001e02:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d002      	beq.n	8001e12 <HAL_ADC_Init+0x10e>
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	015b      	lsls	r3, r3, #5
 8001e10:	e000      	b.n	8001e14 <HAL_ADC_Init+0x110>
 8001e12:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e14:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001e1a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d101      	bne.n	8001e28 <HAL_ADC_Init+0x124>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e000      	b.n	8001e2a <HAL_ADC_Init+0x126>
 8001e28:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001e2a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2124      	movs	r1, #36	; 0x24
 8001e30:	5c5b      	ldrb	r3, [r3, r1]
 8001e32:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001e34:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	7edb      	ldrb	r3, [r3, #27]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d115      	bne.n	8001e70 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7e9b      	ldrb	r3, [r3, #26]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	0252      	lsls	r2, r2, #9
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	e00b      	b.n	8001e70 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	2220      	movs	r2, #32
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e68:	2201      	movs	r2, #1
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	69da      	ldr	r2, [r3, #28]
 8001e74:	23c2      	movs	r3, #194	; 0xc2
 8001e76:	33ff      	adds	r3, #255	; 0xff
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d007      	beq.n	8001e8c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001e84:	4313      	orrs	r3, r2
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68d9      	ldr	r1, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	055b      	lsls	r3, r3, #21
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d01b      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d017      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d013      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d00f      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d00b      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d007      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d003      	beq.n	8001ee0 <HAL_ADC_Init+0x1dc>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	2b07      	cmp	r3, #7
 8001ede:	d112      	bne.n	8001f06 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695a      	ldr	r2, [r3, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2107      	movs	r1, #7
 8001eec:	438a      	bics	r2, r1
 8001eee:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6959      	ldr	r1, [r3, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efa:	2207      	movs	r2, #7
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a1c      	ldr	r2, [pc, #112]	; (8001f80 <HAL_ADC_Init+0x27c>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d10b      	bne.n	8001f2e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	2203      	movs	r2, #3
 8001f22:	4393      	bics	r3, r2
 8001f24:	2201      	movs	r2, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f2c:	e01c      	b.n	8001f68 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	2212      	movs	r2, #18
 8001f34:	4393      	bics	r3, r2
 8001f36:	2210      	movs	r2, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2201      	movs	r2, #1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001f52:	e009      	b.n	8001f68 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	2210      	movs	r2, #16
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001f60:	230f      	movs	r3, #15
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001f68:	230f      	movs	r3, #15
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	781b      	ldrb	r3, [r3, #0]
}
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b004      	add	sp, #16
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	fffffefd 	.word	0xfffffefd
 8001f7c:	fffe0219 	.word	0xfffe0219
 8001f80:	833fffe7 	.word	0x833fffe7

08001f84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f90:	2317      	movs	r3, #23
 8001f92:	18fb      	adds	r3, r7, r3
 8001f94:	2200      	movs	r2, #0
 8001f96:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d15e      	bne.n	8002062 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2234      	movs	r2, #52	; 0x34
 8001fa8:	5c9b      	ldrb	r3, [r3, r2]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Start_DMA+0x2e>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e05e      	b.n	8002070 <HAL_ADC_Start_DMA+0xec>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2234      	movs	r2, #52	; 0x34
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	7e5b      	ldrb	r3, [r3, #25]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d007      	beq.n	8001fd2 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001fc2:	2317      	movs	r3, #23
 8001fc4:	18fc      	adds	r4, r7, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f000 f963 	bl	8002294 <ADC_Enable>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fd2:	2317      	movs	r3, #23
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d146      	bne.n	800206a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	4a25      	ldr	r2, [pc, #148]	; (8002078 <HAL_ADC_Start_DMA+0xf4>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	0052      	lsls	r2, r2, #1
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2234      	movs	r2, #52	; 0x34
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	4a1e      	ldr	r2, [pc, #120]	; (800207c <HAL_ADC_Start_DMA+0xf8>)
 8002002:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_ADC_Start_DMA+0xfc>)
 800200a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_ADC_Start_DMA+0x100>)
 8002012:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	221c      	movs	r2, #28
 800201a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2110      	movs	r1, #16
 8002028:	430a      	orrs	r2, r1
 800202a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	430a      	orrs	r2, r1
 800203a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3340      	adds	r3, #64	; 0x40
 8002046:	0019      	movs	r1, r3
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f000 fbee 	bl	800282c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2104      	movs	r1, #4
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e003      	b.n	800206a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002062:	2317      	movs	r3, #23
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	2202      	movs	r2, #2
 8002068:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800206a:	2317      	movs	r3, #23
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	781b      	ldrb	r3, [r3, #0]
}
 8002070:	0018      	movs	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	b007      	add	sp, #28
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	fffff0fe 	.word	0xfffff0fe
 800207c:	0800238d 	.word	0x0800238d
 8002080:	08002441 	.word	0x08002441
 8002084:	0800245f 	.word	0x0800245f

08002088 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b002      	add	sp, #8
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b2:	230f      	movs	r3, #15
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	055b      	lsls	r3, r3, #21
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d011      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x46>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d00d      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x46>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d009      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x46>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020de:	2b03      	cmp	r3, #3
 80020e0:	d005      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x46>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d001      	beq.n	80020ee <HAL_ADC_ConfigChannel+0x46>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2234      	movs	r2, #52	; 0x34
 80020f2:	5c9b      	ldrb	r3, [r3, r2]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x54>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0bb      	b.n	8002274 <HAL_ADC_ConfigChannel+0x1cc>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2234      	movs	r2, #52	; 0x34
 8002100:	2101      	movs	r1, #1
 8002102:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2204      	movs	r2, #4
 800210c:	4013      	ands	r3, r2
 800210e:	d000      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x6a>
 8002110:	e09f      	b.n	8002252 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4a59      	ldr	r2, [pc, #356]	; (800227c <HAL_ADC_ConfigChannel+0x1d4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_ADC_ConfigChannel+0x76>
 800211c:	e077      	b.n	800220e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2201      	movs	r2, #1
 800212a:	409a      	lsls	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	055b      	lsls	r3, r3, #21
 800213c:	429a      	cmp	r2, r3
 800213e:	d037      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d033      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214c:	2b02      	cmp	r3, #2
 800214e:	d02f      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002154:	2b03      	cmp	r3, #3
 8002156:	d02b      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b04      	cmp	r3, #4
 800215e:	d027      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	2b05      	cmp	r3, #5
 8002166:	d023      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	2b06      	cmp	r3, #6
 800216e:	d01f      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	2b07      	cmp	r3, #7
 8002176:	d01b      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	2107      	movs	r1, #7
 8002184:	400b      	ands	r3, r1
 8002186:	429a      	cmp	r2, r3
 8002188:	d012      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695a      	ldr	r2, [r3, #20]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2107      	movs	r1, #7
 8002196:	438a      	bics	r2, r1
 8002198:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6959      	ldr	r1, [r3, #20]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2207      	movs	r2, #7
 80021a6:	401a      	ands	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d003      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x118>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d152      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021c0:	4b2f      	ldr	r3, [pc, #188]	; (8002280 <HAL_ADC_ConfigChannel+0x1d8>)
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b10      	cmp	r3, #16
 80021ca:	d102      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x12a>
 80021cc:	2380      	movs	r3, #128	; 0x80
 80021ce:	041b      	lsls	r3, r3, #16
 80021d0:	e001      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x12e>
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	03db      	lsls	r3, r3, #15
 80021d6:	4a2a      	ldr	r2, [pc, #168]	; (8002280 <HAL_ADC_ConfigChannel+0x1d8>)
 80021d8:	430b      	orrs	r3, r1
 80021da:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d140      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e4:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_ADC_ConfigChannel+0x1dc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4927      	ldr	r1, [pc, #156]	; (8002288 <HAL_ADC_ConfigChannel+0x1e0>)
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fd ff9e 	bl	800012c <__udivsi3>
 80021f0:	0003      	movs	r3, r0
 80021f2:	001a      	movs	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021fe:	e002      	b.n	8002206 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	3b01      	subs	r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x158>
 800220c:	e02b      	b.n	8002266 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	4099      	lsls	r1, r3
 800221c:	000b      	movs	r3, r1
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	400a      	ands	r2, r1
 8002226:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b10      	cmp	r3, #16
 800222e:	d003      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x190>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b11      	cmp	r3, #17
 8002236:	d116      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_ADC_ConfigChannel+0x1d8>)
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b10      	cmp	r3, #16
 8002242:	d101      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1a0>
 8002244:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_ADC_ConfigChannel+0x1e4>)
 8002246:	e000      	b.n	800224a <HAL_ADC_ConfigChannel+0x1a2>
 8002248:	4a11      	ldr	r2, [pc, #68]	; (8002290 <HAL_ADC_ConfigChannel+0x1e8>)
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_ADC_ConfigChannel+0x1d8>)
 800224c:	400a      	ands	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e009      	b.n	8002266 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002256:	2220      	movs	r2, #32
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800225e:	230f      	movs	r3, #15
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	2201      	movs	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2234      	movs	r2, #52	; 0x34
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800226e:	230f      	movs	r3, #15
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b004      	add	sp, #16
 800227a:	bd80      	pop	{r7, pc}
 800227c:	00001001 	.word	0x00001001
 8002280:	40012708 	.word	0x40012708
 8002284:	20000004 	.word	0x20000004
 8002288:	000f4240 	.word	0x000f4240
 800228c:	ff7fffff 	.word	0xff7fffff
 8002290:	ffbfffff 	.word	0xffbfffff

08002294 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2203      	movs	r2, #3
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d112      	bne.n	80022d8 <ADC_Enable+0x44>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d009      	beq.n	80022d4 <ADC_Enable+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	401a      	ands	r2, r3
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d101      	bne.n	80022d8 <ADC_Enable+0x44>
 80022d4:	2301      	movs	r3, #1
 80022d6:	e000      	b.n	80022da <ADC_Enable+0x46>
 80022d8:	2300      	movs	r3, #0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d14b      	bne.n	8002376 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <ADC_Enable+0xec>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	d00d      	beq.n	8002306 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	2210      	movs	r2, #16
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	2201      	movs	r2, #1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e038      	b.n	8002378 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002316:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <ADC_Enable+0xf0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	491b      	ldr	r1, [pc, #108]	; (8002388 <ADC_Enable+0xf4>)
 800231c:	0018      	movs	r0, r3
 800231e:	f7fd ff05 	bl	800012c <__udivsi3>
 8002322:	0003      	movs	r3, r0
 8002324:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002326:	e002      	b.n	800232e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	3b01      	subs	r3, #1
 800232c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f9      	bne.n	8002328 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002334:	f7ff fcb8 	bl	8001ca8 <HAL_GetTick>
 8002338:	0003      	movs	r3, r0
 800233a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800233c:	e014      	b.n	8002368 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800233e:	f7ff fcb3 	bl	8001ca8 <HAL_GetTick>
 8002342:	0002      	movs	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d90d      	bls.n	8002368 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002350:	2210      	movs	r2, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235c:	2201      	movs	r2, #1
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e007      	b.n	8002378 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2201      	movs	r2, #1
 8002370:	4013      	ands	r3, r2
 8002372:	2b01      	cmp	r3, #1
 8002374:	d1e3      	bne.n	800233e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}
 8002380:	80000017 	.word	0x80000017
 8002384:	20000004 	.word	0x20000004
 8002388:	000f4240 	.word	0x000f4240

0800238c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239e:	2250      	movs	r2, #80	; 0x50
 80023a0:	4013      	ands	r3, r2
 80023a2:	d140      	bne.n	8002426 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	23c0      	movs	r3, #192	; 0xc0
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	d12d      	bne.n	800241c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d129      	bne.n	800241c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2208      	movs	r2, #8
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d122      	bne.n	800241c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2204      	movs	r2, #4
 80023de:	4013      	ands	r3, r2
 80023e0:	d110      	bne.n	8002404 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	210c      	movs	r1, #12
 80023ee:	438a      	bics	r2, r1
 80023f0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <ADC_DMAConvCplt+0xb0>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	2201      	movs	r2, #1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	639a      	str	r2, [r3, #56]	; 0x38
 8002402:	e00b      	b.n	800241c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	2220      	movs	r2, #32
 800240a:	431a      	orrs	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	2201      	movs	r2, #1
 8002416:	431a      	orrs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	0018      	movs	r0, r3
 8002420:	f7fe fd36 	bl	8000e90 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002424:	e005      	b.n	8002432 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	0010      	movs	r0, r2
 8002430:	4798      	blx	r3
}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	46bd      	mov	sp, r7
 8002436:	b004      	add	sp, #16
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	fffffefe 	.word	0xfffffefe

08002440 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0018      	movs	r0, r3
 8002452:	f7ff fe19 	bl	8002088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}

0800245e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	431a      	orrs	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	2204      	movs	r2, #4
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	0018      	movs	r0, r3
 8002488:	f7ff fe06 	bl	8002098 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b004      	add	sp, #16
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800249c:	2317      	movs	r3, #23
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2234      	movs	r2, #52	; 0x34
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_ADCEx_Calibration_Start+0x26>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e084      	b.n	80025c4 <HAL_ADCEx_Calibration_Start+0x130>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2234      	movs	r2, #52	; 0x34
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2203      	movs	r2, #3
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d112      	bne.n	80024f6 <HAL_ADCEx_Calibration_Start+0x62>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2201      	movs	r2, #1
 80024d8:	4013      	ands	r3, r2
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d009      	beq.n	80024f2 <HAL_ADCEx_Calibration_Start+0x5e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	401a      	ands	r2, r3
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	021b      	lsls	r3, r3, #8
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d101      	bne.n	80024f6 <HAL_ADCEx_Calibration_Start+0x62>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_ADCEx_Calibration_Start+0x64>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d152      	bne.n	80025a2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002500:	4a32      	ldr	r2, [pc, #200]	; (80025cc <HAL_ADCEx_Calibration_Start+0x138>)
 8002502:	4013      	ands	r3, r2
 8002504:	2202      	movs	r2, #2
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2203      	movs	r2, #3
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2103      	movs	r1, #3
 8002524:	438a      	bics	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689a      	ldr	r2, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2180      	movs	r1, #128	; 0x80
 8002534:	0609      	lsls	r1, r1, #24
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800253a:	f7ff fbb5 	bl	8001ca8 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002542:	e014      	b.n	800256e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002544:	f7ff fbb0 	bl	8001ca8 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d90d      	bls.n	800256e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002556:	2212      	movs	r2, #18
 8002558:	4393      	bics	r3, r2
 800255a:	2210      	movs	r2, #16
 800255c:	431a      	orrs	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2234      	movs	r2, #52	; 0x34
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e02a      	b.n	80025c4 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	0fdb      	lsrs	r3, r3, #31
 8002576:	07da      	lsls	r2, r3, #31
 8002578:	2380      	movs	r3, #128	; 0x80
 800257a:	061b      	lsls	r3, r3, #24
 800257c:	429a      	cmp	r2, r3
 800257e:	d0e1      	beq.n	8002544 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	2203      	movs	r2, #3
 8002596:	4393      	bics	r3, r2
 8002598:	2201      	movs	r2, #1
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	639a      	str	r2, [r3, #56]	; 0x38
 80025a0:	e009      	b.n	80025b6 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	2220      	movs	r2, #32
 80025a8:	431a      	orrs	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2234      	movs	r2, #52	; 0x34
 80025ba:	2100      	movs	r1, #0
 80025bc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80025be:	2317      	movs	r3, #23
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	781b      	ldrb	r3, [r3, #0]
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b006      	add	sp, #24
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	fffffefd 	.word	0xfffffefd

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	0002      	movs	r2, r0
 80025d8:	1dfb      	adds	r3, r7, #7
 80025da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b7f      	cmp	r3, #127	; 0x7f
 80025e2:	d809      	bhi.n	80025f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e4:	1dfb      	adds	r3, r7, #7
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	001a      	movs	r2, r3
 80025ea:	231f      	movs	r3, #31
 80025ec:	401a      	ands	r2, r3
 80025ee:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_EnableIRQ+0x30>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	4091      	lsls	r1, r2
 80025f4:	000a      	movs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
  }
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b002      	add	sp, #8
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	0002      	movs	r2, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	1dfb      	adds	r3, r7, #7
 8002610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002612:	1dfb      	adds	r3, r7, #7
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b7f      	cmp	r3, #127	; 0x7f
 8002618:	d828      	bhi.n	800266c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800261a:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <__NVIC_SetPriority+0xd4>)
 800261c:	1dfb      	adds	r3, r7, #7
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b25b      	sxtb	r3, r3
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	33c0      	adds	r3, #192	; 0xc0
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	589b      	ldr	r3, [r3, r2]
 800262a:	1dfa      	adds	r2, r7, #7
 800262c:	7812      	ldrb	r2, [r2, #0]
 800262e:	0011      	movs	r1, r2
 8002630:	2203      	movs	r2, #3
 8002632:	400a      	ands	r2, r1
 8002634:	00d2      	lsls	r2, r2, #3
 8002636:	21ff      	movs	r1, #255	; 0xff
 8002638:	4091      	lsls	r1, r2
 800263a:	000a      	movs	r2, r1
 800263c:	43d2      	mvns	r2, r2
 800263e:	401a      	ands	r2, r3
 8002640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	019b      	lsls	r3, r3, #6
 8002646:	22ff      	movs	r2, #255	; 0xff
 8002648:	401a      	ands	r2, r3
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	0018      	movs	r0, r3
 8002650:	2303      	movs	r3, #3
 8002652:	4003      	ands	r3, r0
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002658:	481f      	ldr	r0, [pc, #124]	; (80026d8 <__NVIC_SetPriority+0xd4>)
 800265a:	1dfb      	adds	r3, r7, #7
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	b25b      	sxtb	r3, r3
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	430a      	orrs	r2, r1
 8002664:	33c0      	adds	r3, #192	; 0xc0
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800266a:	e031      	b.n	80026d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800266c:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <__NVIC_SetPriority+0xd8>)
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	0019      	movs	r1, r3
 8002674:	230f      	movs	r3, #15
 8002676:	400b      	ands	r3, r1
 8002678:	3b08      	subs	r3, #8
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3306      	adds	r3, #6
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	18d3      	adds	r3, r2, r3
 8002682:	3304      	adds	r3, #4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	1dfa      	adds	r2, r7, #7
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	0011      	movs	r1, r2
 800268c:	2203      	movs	r2, #3
 800268e:	400a      	ands	r2, r1
 8002690:	00d2      	lsls	r2, r2, #3
 8002692:	21ff      	movs	r1, #255	; 0xff
 8002694:	4091      	lsls	r1, r2
 8002696:	000a      	movs	r2, r1
 8002698:	43d2      	mvns	r2, r2
 800269a:	401a      	ands	r2, r3
 800269c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	019b      	lsls	r3, r3, #6
 80026a2:	22ff      	movs	r2, #255	; 0xff
 80026a4:	401a      	ands	r2, r3
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	0018      	movs	r0, r3
 80026ac:	2303      	movs	r3, #3
 80026ae:	4003      	ands	r3, r0
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026b4:	4809      	ldr	r0, [pc, #36]	; (80026dc <__NVIC_SetPriority+0xd8>)
 80026b6:	1dfb      	adds	r3, r7, #7
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	001c      	movs	r4, r3
 80026bc:	230f      	movs	r3, #15
 80026be:	4023      	ands	r3, r4
 80026c0:	3b08      	subs	r3, #8
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	430a      	orrs	r2, r1
 80026c6:	3306      	adds	r3, #6
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	18c3      	adds	r3, r0, r3
 80026cc:	3304      	adds	r3, #4
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b003      	add	sp, #12
 80026d6:	bd90      	pop	{r4, r7, pc}
 80026d8:	e000e100 	.word	0xe000e100
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	1e5a      	subs	r2, r3, #1
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	045b      	lsls	r3, r3, #17
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d301      	bcc.n	80026f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f4:	2301      	movs	r3, #1
 80026f6:	e010      	b.n	800271a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f8:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <SysTick_Config+0x44>)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	3a01      	subs	r2, #1
 80026fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002700:	2301      	movs	r3, #1
 8002702:	425b      	negs	r3, r3
 8002704:	2103      	movs	r1, #3
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff ff7c 	bl	8002604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <SysTick_Config+0x44>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SysTick_Config+0x44>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	210f      	movs	r1, #15
 8002734:	187b      	adds	r3, r7, r1
 8002736:	1c02      	adds	r2, r0, #0
 8002738:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	187b      	adds	r3, r7, r1
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b25b      	sxtb	r3, r3
 8002742:	0011      	movs	r1, r2
 8002744:	0018      	movs	r0, r3
 8002746:	f7ff ff5d 	bl	8002604 <__NVIC_SetPriority>
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	0002      	movs	r2, r0
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b25b      	sxtb	r3, r3
 8002764:	0018      	movs	r0, r3
 8002766:	f7ff ff33 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b002      	add	sp, #8
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff ffaf 	bl	80026e0 <SysTick_Config>
 8002782:	0003      	movs	r3, r0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002790:	f7fe fb86 	bl	8000ea0 <HAL_SYSTICK_Callback>
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e036      	b.n	8002820 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	2102      	movs	r1, #2
 80027b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a18      	ldr	r2, [pc, #96]	; (8002828 <HAL_DMA_Init+0x8c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	0018      	movs	r0, r3
 8002804:	f000 f946 	bl	8002a94 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2221      	movs	r2, #33	; 0x21
 8002812:	2101      	movs	r1, #1
 8002814:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	2100      	movs	r1, #0
 800281c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}  
 8002820:	0018      	movs	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}
 8002828:	ffffc00f 	.word	0xffffc00f

0800282c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
 8002838:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800283a:	2317      	movs	r3, #23
 800283c:	18fb      	adds	r3, r7, r3
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	5c9b      	ldrb	r3, [r3, r2]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_DMA_Start_IT+0x24>
 800284c:	2302      	movs	r3, #2
 800284e:	e04f      	b.n	80028f0 <HAL_DMA_Start_IT+0xc4>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	2101      	movs	r1, #1
 8002856:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	; 0x21
 800285c:	5c9b      	ldrb	r3, [r3, r2]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d13a      	bne.n	80028da <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2221      	movs	r2, #33	; 0x21
 8002868:	2102      	movs	r1, #2
 800286a:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2101      	movs	r1, #1
 800287e:	438a      	bics	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f8d7 	bl	8002a3c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	210e      	movs	r1, #14
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e00f      	b.n	80028c8 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	210a      	movs	r1, #10
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2104      	movs	r1, #4
 80028c4:	438a      	bics	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2101      	movs	r1, #1
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	e007      	b.n	80028ea <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80028e2:	2317      	movs	r3, #23
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2202      	movs	r2, #2
 80028e8:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80028ea:	2317      	movs	r3, #23
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	781b      	ldrb	r3, [r3, #0]
} 
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b006      	add	sp, #24
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	2204      	movs	r2, #4
 8002916:	409a      	lsls	r2, r3
 8002918:	0013      	movs	r3, r2
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	d024      	beq.n	800296a <HAL_DMA_IRQHandler+0x72>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2204      	movs	r2, #4
 8002924:	4013      	ands	r3, r2
 8002926:	d020      	beq.n	800296a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2220      	movs	r2, #32
 8002930:	4013      	ands	r3, r2
 8002932:	d107      	bne.n	8002944 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2104      	movs	r1, #4
 8002940:	438a      	bics	r2, r1
 8002942:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294c:	2104      	movs	r1, #4
 800294e:	4091      	lsls	r1, r2
 8002950:	000a      	movs	r2, r1
 8002952:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d100      	bne.n	800295e <HAL_DMA_IRQHandler+0x66>
 800295c:	e06a      	b.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	0010      	movs	r0, r2
 8002966:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002968:	e064      	b.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2202      	movs	r2, #2
 8002970:	409a      	lsls	r2, r3
 8002972:	0013      	movs	r3, r2
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	d02b      	beq.n	80029d2 <HAL_DMA_IRQHandler+0xda>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2202      	movs	r2, #2
 800297e:	4013      	ands	r3, r2
 8002980:	d027      	beq.n	80029d2 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2220      	movs	r2, #32
 800298a:	4013      	ands	r3, r2
 800298c:	d10b      	bne.n	80029a6 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	210a      	movs	r1, #10
 800299a:	438a      	bics	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2221      	movs	r2, #33	; 0x21
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	2102      	movs	r1, #2
 80029b0:	4091      	lsls	r1, r2
 80029b2:	000a      	movs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d036      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	0010      	movs	r0, r2
 80029ce:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80029d0:	e030      	b.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2208      	movs	r2, #8
 80029d8:	409a      	lsls	r2, r3
 80029da:	0013      	movs	r3, r2
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	d028      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2208      	movs	r2, #8
 80029e6:	4013      	ands	r3, r2
 80029e8:	d024      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	210e      	movs	r1, #14
 80029f6:	438a      	bics	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2101      	movs	r1, #1
 8002a04:	4091      	lsls	r1, r2
 8002a06:	000a      	movs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2221      	movs	r2, #33	; 0x21
 8002a14:	2101      	movs	r1, #1
 8002a16:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	0010      	movs	r0, r2
 8002a30:	4798      	blx	r3
    }
   }
}  
 8002a32:	e7ff      	b.n	8002a34 <HAL_DMA_IRQHandler+0x13c>
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2101      	movs	r1, #1
 8002a54:	4091      	lsls	r1, r2
 8002a56:	000a      	movs	r2, r1
 8002a58:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b10      	cmp	r3, #16
 8002a68:	d108      	bne.n	8002a7c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a7a:	e007      	b.n	8002a8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	60da      	str	r2, [r3, #12]
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <DMA_CalcBaseAndBitshift+0x30>)
 8002aa2:	4694      	mov	ip, r2
 8002aa4:	4463      	add	r3, ip
 8002aa6:	2114      	movs	r1, #20
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7fd fb3f 	bl	800012c <__udivsi3>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	009a      	lsls	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a03      	ldr	r2, [pc, #12]	; (8002ac8 <DMA_CalcBaseAndBitshift+0x34>)
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	bffdfff8 	.word	0xbffdfff8
 8002ac8:	40020000 	.word	0x40020000

08002acc <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	603a      	str	r2, [r7, #0]
 8002ad8:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ada:	2317      	movs	r3, #23
 8002adc:	18fb      	adds	r3, r7, r3
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002ae2:	2316      	movs	r3, #22
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8002aea:	2315      	movs	r3, #21
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002af2:	4b3e      	ldr	r3, [pc, #248]	; (8002bec <HAL_FLASH_Program+0x120>)
 8002af4:	7e1b      	ldrb	r3, [r3, #24]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_FLASH_Program+0x32>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e072      	b.n	8002be4 <HAL_FLASH_Program+0x118>
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <HAL_FLASH_Program+0x120>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b04:	2317      	movs	r3, #23
 8002b06:	18fe      	adds	r6, r7, r3
 8002b08:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_FLASH_Program+0x124>)
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 f8c4 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002b10:	0003      	movs	r3, r0
 8002b12:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8002b14:	2317      	movs	r3, #23
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d15c      	bne.n	8002bd8 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d104      	bne.n	8002b2e <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002b24:	2315      	movs	r3, #21
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e00b      	b.n	8002b46 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d104      	bne.n	8002b3e <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002b34:	2315      	movs	r3, #21
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2202      	movs	r2, #2
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e003      	b.n	8002b46 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002b3e:	2315      	movs	r3, #21
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	2204      	movs	r2, #4
 8002b44:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8002b46:	2316      	movs	r3, #22
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e039      	b.n	8002bc4 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002b50:	2116      	movs	r1, #22
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	005a      	lsls	r2, r3, #1
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	18d0      	adds	r0, r2, r3
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	001a      	movs	r2, r3
 8002b64:	3a20      	subs	r2, #32
 8002b66:	2a00      	cmp	r2, #0
 8002b68:	db03      	blt.n	8002b72 <HAL_FLASH_Program+0xa6>
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	40d1      	lsrs	r1, r2
 8002b6e:	000c      	movs	r4, r1
 8002b70:	e008      	b.n	8002b84 <HAL_FLASH_Program+0xb8>
 8002b72:	2220      	movs	r2, #32
 8002b74:	1ad2      	subs	r2, r2, r3
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4091      	lsls	r1, r2
 8002b7a:	000a      	movs	r2, r1
 8002b7c:	6839      	ldr	r1, [r7, #0]
 8002b7e:	40d9      	lsrs	r1, r3
 8002b80:	000c      	movs	r4, r1
 8002b82:	4314      	orrs	r4, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	40da      	lsrs	r2, r3
 8002b88:	0015      	movs	r5, r2
 8002b8a:	b2a3      	uxth	r3, r4
 8002b8c:	0019      	movs	r1, r3
 8002b8e:	f000 f867 	bl	8002c60 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002b92:	2317      	movs	r3, #23
 8002b94:	18fe      	adds	r6, r7, r3
 8002b96:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <HAL_FLASH_Program+0x124>)
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 f87d 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002b9e:	0003      	movs	r3, r0
 8002ba0:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002ba2:	4b14      	ldr	r3, [pc, #80]	; (8002bf4 <HAL_FLASH_Program+0x128>)
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_FLASH_Program+0x128>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	438a      	bics	r2, r1
 8002bac:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002bae:	2317      	movs	r3, #23
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10e      	bne.n	8002bd6 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8002bb8:	2116      	movs	r1, #22
 8002bba:	187b      	adds	r3, r7, r1
 8002bbc:	781a      	ldrb	r2, [r3, #0]
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	3201      	adds	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	2316      	movs	r3, #22
 8002bc6:	18fa      	adds	r2, r7, r3
 8002bc8:	2315      	movs	r3, #21
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d3bd      	bcc.n	8002b50 <HAL_FLASH_Program+0x84>
 8002bd4:	e000      	b.n	8002bd8 <HAL_FLASH_Program+0x10c>
      {
        break;
 8002bd6:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002bd8:	4b04      	ldr	r3, [pc, #16]	; (8002bec <HAL_FLASH_Program+0x120>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	761a      	strb	r2, [r3, #24]

  return status;
 8002bde:	2317      	movs	r3, #23
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	781b      	ldrb	r3, [r3, #0]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b007      	add	sp, #28
 8002bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bec:	200002b8 	.word	0x200002b8
 8002bf0:	0000c350 	.word	0x0000c350
 8002bf4:	40022000 	.word	0x40022000

08002bf8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <HAL_FLASH_Unlock+0x40>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2280      	movs	r2, #128	; 0x80
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_FLASH_Unlock+0x40>)
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <HAL_FLASH_Unlock+0x44>)
 8002c12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <HAL_FLASH_Unlock+0x40>)
 8002c16:	4a0a      	ldr	r2, [pc, #40]	; (8002c40 <HAL_FLASH_Unlock+0x48>)
 8002c18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <HAL_FLASH_Unlock+0x40>)
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	4013      	ands	r3, r2
 8002c22:	d002      	beq.n	8002c2a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b002      	add	sp, #8
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	40022000 	.word	0x40022000
 8002c3c:	45670123 	.word	0x45670123
 8002c40:	cdef89ab 	.word	0xcdef89ab

08002c44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002c48:	4b04      	ldr	r3, [pc, #16]	; (8002c5c <HAL_FLASH_Lock+0x18>)
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <HAL_FLASH_Lock+0x18>)
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	430a      	orrs	r2, r1
 8002c52:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	0018      	movs	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40022000 	.word	0x40022000

08002c60 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	000a      	movs	r2, r1
 8002c6a:	1cbb      	adds	r3, r7, #2
 8002c6c:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <FLASH_Program_HalfWord+0x30>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <FLASH_Program_HalfWord+0x34>)
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <FLASH_Program_HalfWord+0x34>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1cba      	adds	r2, r7, #2
 8002c84:	8812      	ldrh	r2, [r2, #0]
 8002c86:	801a      	strh	r2, [r3, #0]
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b002      	add	sp, #8
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200002b8 	.word	0x200002b8
 8002c94:	40022000 	.word	0x40022000

08002c98 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002ca0:	f7ff f802 	bl	8001ca8 <HAL_GetTick>
 8002ca4:	0003      	movs	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002ca8:	e00f      	b.n	8002cca <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3301      	adds	r3, #1
 8002cae:	d00c      	beq.n	8002cca <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <FLASH_WaitForLastOperation+0x2e>
 8002cb6:	f7fe fff7 	bl	8001ca8 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d201      	bcs.n	8002cca <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e01f      	b.n	8002d0a <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d0e9      	beq.n	8002caa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d102      	bne.n	8002ce8 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2210      	movs	r2, #16
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b10      	cmp	r3, #16
 8002cf2:	d005      	beq.n	8002d00 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002cf4:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <FLASH_WaitForLastOperation+0x7c>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d103      	bne.n	8002d08 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002d00:	f000 f80a 	bl	8002d18 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	40022000 	.word	0x40022000

08002d18 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <FLASH_SetErrorCode+0x58>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2210      	movs	r2, #16
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d109      	bne.n	8002d42 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <FLASH_SetErrorCode+0x5c>)
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2202      	movs	r2, #2
 8002d34:	431a      	orrs	r2, r3
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <FLASH_SetErrorCode+0x5c>)
 8002d38:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <FLASH_SetErrorCode+0x58>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2204      	movs	r2, #4
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d109      	bne.n	8002d62 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002d4e:	4b09      	ldr	r3, [pc, #36]	; (8002d74 <FLASH_SetErrorCode+0x5c>)
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	2201      	movs	r2, #1
 8002d54:	431a      	orrs	r2, r3
 8002d56:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <FLASH_SetErrorCode+0x5c>)
 8002d58:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002d62:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <FLASH_SetErrorCode+0x58>)
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	60da      	str	r2, [r3, #12]
}  
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40022000 	.word	0x40022000
 8002d74:	200002b8 	.word	0x200002b8

08002d78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002d78:	b5b0      	push	{r4, r5, r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002d82:	230f      	movs	r3, #15
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002d8e:	4b32      	ldr	r3, [pc, #200]	; (8002e58 <HAL_FLASHEx_Erase+0xe0>)
 8002d90:	7e1b      	ldrb	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_FLASHEx_Erase+0x22>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e05a      	b.n	8002e50 <HAL_FLASHEx_Erase+0xd8>
 8002d9a:	4b2f      	ldr	r3, [pc, #188]	; (8002e58 <HAL_FLASHEx_Erase+0xe0>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d116      	bne.n	8002dd6 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002da8:	4b2c      	ldr	r3, [pc, #176]	; (8002e5c <HAL_FLASHEx_Erase+0xe4>)
 8002daa:	0018      	movs	r0, r3
 8002dac:	f7ff ff74 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d147      	bne.n	8002e44 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002db4:	f000 f856 	bl	8002e64 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002db8:	230f      	movs	r3, #15
 8002dba:	18fc      	adds	r4, r7, r3
 8002dbc:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_FLASHEx_Erase+0xe4>)
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7ff ff6a 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_FLASHEx_Erase+0xe8>)
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	4b24      	ldr	r3, [pc, #144]	; (8002e60 <HAL_FLASHEx_Erase+0xe8>)
 8002dce:	2104      	movs	r1, #4
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	611a      	str	r2, [r3, #16]
 8002dd4:	e036      	b.n	8002e44 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_FLASHEx_Erase+0xe4>)
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f7ff ff5d 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002dde:	1e03      	subs	r3, r0, #0
 8002de0:	d130      	bne.n	8002e44 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2201      	movs	r2, #1
 8002de6:	4252      	negs	r2, r2
 8002de8:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	e01f      	b.n	8002e32 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	0018      	movs	r0, r3
 8002df6:	f000 f84d 	bl	8002e94 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002dfa:	250f      	movs	r5, #15
 8002dfc:	197c      	adds	r4, r7, r5
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_FLASHEx_Erase+0xe4>)
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7ff ff49 	bl	8002c98 <FLASH_WaitForLastOperation>
 8002e06:	0003      	movs	r3, r0
 8002e08:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e0a:	4b15      	ldr	r3, [pc, #84]	; (8002e60 <HAL_FLASHEx_Erase+0xe8>)
 8002e0c:	691a      	ldr	r2, [r3, #16]
 8002e0e:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <HAL_FLASHEx_Erase+0xe8>)
 8002e10:	2102      	movs	r1, #2
 8002e12:	438a      	bics	r2, r1
 8002e14:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8002e16:	197b      	adds	r3, r7, r5
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	601a      	str	r2, [r3, #0]
            break;
 8002e24:	e00e      	b.n	8002e44 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	00d2      	lsls	r2, r2, #3
 8002e2c:	4694      	mov	ip, r2
 8002e2e:	4463      	add	r3, ip
 8002e30:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	029a      	lsls	r2, r3, #10
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d3d6      	bcc.n	8002df2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002e44:	4b04      	ldr	r3, [pc, #16]	; (8002e58 <HAL_FLASHEx_Erase+0xe0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	761a      	strb	r2, [r3, #24]

  return status;
 8002e4a:	230f      	movs	r3, #15
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	781b      	ldrb	r3, [r3, #0]
}
 8002e50:	0018      	movs	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b004      	add	sp, #16
 8002e56:	bdb0      	pop	{r4, r5, r7, pc}
 8002e58:	200002b8 	.word	0x200002b8
 8002e5c:	0000c350 	.word	0x0000c350
 8002e60:	40022000 	.word	0x40022000

08002e64 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e68:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <FLASH_MassErase+0x28>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002e6e:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <FLASH_MassErase+0x2c>)
 8002e70:	691a      	ldr	r2, [r3, #16]
 8002e72:	4b07      	ldr	r3, [pc, #28]	; (8002e90 <FLASH_MassErase+0x2c>)
 8002e74:	2104      	movs	r1, #4
 8002e76:	430a      	orrs	r2, r1
 8002e78:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <FLASH_MassErase+0x2c>)
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <FLASH_MassErase+0x2c>)
 8002e80:	2140      	movs	r1, #64	; 0x40
 8002e82:	430a      	orrs	r2, r1
 8002e84:	611a      	str	r2, [r3, #16]
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	200002b8 	.word	0x200002b8
 8002e90:	40022000 	.word	0x40022000

08002e94 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <FLASH_PageErase+0x34>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <FLASH_PageErase+0x38>)
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <FLASH_PageErase+0x38>)
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <FLASH_PageErase+0x38>)
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002eb4:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <FLASH_PageErase+0x38>)
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <FLASH_PageErase+0x38>)
 8002eba:	2140      	movs	r1, #64	; 0x40
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	611a      	str	r2, [r3, #16]
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200002b8 	.word	0x200002b8
 8002ecc:	40022000 	.word	0x40022000

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ede:	e14f      	b.n	8003180 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4091      	lsls	r1, r2
 8002eea:	000a      	movs	r2, r1
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d100      	bne.n	8002ef8 <HAL_GPIO_Init+0x28>
 8002ef6:	e140      	b.n	800317a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d00b      	beq.n	8002f18 <HAL_GPIO_Init+0x48>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d007      	beq.n	8002f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f0c:	2b11      	cmp	r3, #17
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b12      	cmp	r3, #18
 8002f16:	d130      	bne.n	8002f7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	409a      	lsls	r2, r3
 8002f26:	0013      	movs	r3, r2
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	68da      	ldr	r2, [r3, #12]
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	0013      	movs	r3, r2
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f4e:	2201      	movs	r2, #1
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	43da      	mvns	r2, r3
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	091b      	lsrs	r3, r3, #4
 8002f64:	2201      	movs	r2, #1
 8002f66:	401a      	ands	r2, r3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	409a      	lsls	r2, r3
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2203      	movs	r2, #3
 8002f86:	409a      	lsls	r2, r3
 8002f88:	0013      	movs	r3, r2
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	0013      	movs	r3, r2
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_Init+0xea>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d123      	bne.n	8003002 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	08da      	lsrs	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3208      	adds	r2, #8
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	58d3      	ldr	r3, [r2, r3]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2207      	movs	r2, #7
 8002fcc:	4013      	ands	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	0013      	movs	r3, r2
 8002fd6:	43da      	mvns	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2107      	movs	r1, #7
 8002fe6:	400b      	ands	r3, r1
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	409a      	lsls	r2, r3
 8002fec:	0013      	movs	r3, r2
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	08da      	lsrs	r2, r3, #3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3208      	adds	r2, #8
 8002ffc:	0092      	lsls	r2, r2, #2
 8002ffe:	6939      	ldr	r1, [r7, #16]
 8003000:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	2203      	movs	r2, #3
 800300e:	409a      	lsls	r2, r3
 8003010:	0013      	movs	r3, r2
 8003012:	43da      	mvns	r2, r3
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4013      	ands	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2203      	movs	r2, #3
 8003020:	401a      	ands	r2, r3
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	055b      	lsls	r3, r3, #21
 800303e:	4013      	ands	r3, r2
 8003040:	d100      	bne.n	8003044 <HAL_GPIO_Init+0x174>
 8003042:	e09a      	b.n	800317a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003044:	4b54      	ldr	r3, [pc, #336]	; (8003198 <HAL_GPIO_Init+0x2c8>)
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	4b53      	ldr	r3, [pc, #332]	; (8003198 <HAL_GPIO_Init+0x2c8>)
 800304a:	2101      	movs	r1, #1
 800304c:	430a      	orrs	r2, r1
 800304e:	619a      	str	r2, [r3, #24]
 8003050:	4b51      	ldr	r3, [pc, #324]	; (8003198 <HAL_GPIO_Init+0x2c8>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	2201      	movs	r2, #1
 8003056:	4013      	ands	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800305c:	4a4f      	ldr	r2, [pc, #316]	; (800319c <HAL_GPIO_Init+0x2cc>)
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	589b      	ldr	r3, [r3, r2]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2203      	movs	r2, #3
 800306e:	4013      	ands	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	409a      	lsls	r2, r3
 8003076:	0013      	movs	r3, r2
 8003078:	43da      	mvns	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	2390      	movs	r3, #144	; 0x90
 8003084:	05db      	lsls	r3, r3, #23
 8003086:	429a      	cmp	r2, r3
 8003088:	d013      	beq.n	80030b2 <HAL_GPIO_Init+0x1e2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a44      	ldr	r2, [pc, #272]	; (80031a0 <HAL_GPIO_Init+0x2d0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00d      	beq.n	80030ae <HAL_GPIO_Init+0x1de>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a43      	ldr	r2, [pc, #268]	; (80031a4 <HAL_GPIO_Init+0x2d4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <HAL_GPIO_Init+0x1da>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a42      	ldr	r2, [pc, #264]	; (80031a8 <HAL_GPIO_Init+0x2d8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d101      	bne.n	80030a6 <HAL_GPIO_Init+0x1d6>
 80030a2:	2303      	movs	r3, #3
 80030a4:	e006      	b.n	80030b4 <HAL_GPIO_Init+0x1e4>
 80030a6:	2305      	movs	r3, #5
 80030a8:	e004      	b.n	80030b4 <HAL_GPIO_Init+0x1e4>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e002      	b.n	80030b4 <HAL_GPIO_Init+0x1e4>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_GPIO_Init+0x1e4>
 80030b2:	2300      	movs	r3, #0
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	2103      	movs	r1, #3
 80030b8:	400a      	ands	r2, r1
 80030ba:	0092      	lsls	r2, r2, #2
 80030bc:	4093      	lsls	r3, r2
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030c4:	4935      	ldr	r1, [pc, #212]	; (800319c <HAL_GPIO_Init+0x2cc>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d2:	4b36      	ldr	r3, [pc, #216]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43da      	mvns	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	025b      	lsls	r3, r3, #9
 80030ea:	4013      	ands	r3, r2
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80030fc:	4b2b      	ldr	r3, [pc, #172]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43da      	mvns	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	029b      	lsls	r3, r3, #10
 8003114:	4013      	ands	r3, r2
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43da      	mvns	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	035b      	lsls	r3, r3, #13
 800313e:	4013      	ands	r3, r2
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003150:	4b16      	ldr	r3, [pc, #88]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43da      	mvns	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	039b      	lsls	r3, r3, #14
 8003168:	4013      	ands	r3, r2
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <HAL_GPIO_Init+0x2dc>)
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	3301      	adds	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	40da      	lsrs	r2, r3
 8003188:	1e13      	subs	r3, r2, #0
 800318a:	d000      	beq.n	800318e <HAL_GPIO_Init+0x2be>
 800318c:	e6a8      	b.n	8002ee0 <HAL_GPIO_Init+0x10>
  } 
}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b006      	add	sp, #24
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	40010000 	.word	0x40010000
 80031a0:	48000400 	.word	0x48000400
 80031a4:	48000800 	.word	0x48000800
 80031a8:	48000c00 	.word	0x48000c00
 80031ac:	40010400 	.word	0x40010400

080031b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	000a      	movs	r2, r1
 80031ba:	1cbb      	adds	r3, r7, #2
 80031bc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	1cba      	adds	r2, r7, #2
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	4013      	ands	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80031ca:	230f      	movs	r3, #15
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e003      	b.n	80031dc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031d4:	230f      	movs	r3, #15
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80031dc:	230f      	movs	r3, #15
 80031de:	18fb      	adds	r3, r7, r3
 80031e0:	781b      	ldrb	r3, [r3, #0]
  }
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b004      	add	sp, #16
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	0008      	movs	r0, r1
 80031f4:	0011      	movs	r1, r2
 80031f6:	1cbb      	adds	r3, r7, #2
 80031f8:	1c02      	adds	r2, r0, #0
 80031fa:	801a      	strh	r2, [r3, #0]
 80031fc:	1c7b      	adds	r3, r7, #1
 80031fe:	1c0a      	adds	r2, r1, #0
 8003200:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003202:	1c7b      	adds	r3, r7, #1
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800320a:	1cbb      	adds	r3, r7, #2
 800320c:	881a      	ldrh	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003212:	e003      	b.n	800321c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003214:	1cbb      	adds	r3, r7, #2
 8003216:	881a      	ldrh	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e082      	b.n	800333c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2241      	movs	r2, #65	; 0x41
 800323a:	5c9b      	ldrb	r3, [r3, r2]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2240      	movs	r2, #64	; 0x40
 8003246:	2100      	movs	r1, #0
 8003248:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f7fe fb99 	bl	8001984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2241      	movs	r2, #65	; 0x41
 8003256:	2124      	movs	r1, #36	; 0x24
 8003258:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2101      	movs	r1, #1
 8003266:	438a      	bics	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4934      	ldr	r1, [pc, #208]	; (8003344 <HAL_I2C_Init+0x120>)
 8003274:	400a      	ands	r2, r1
 8003276:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4931      	ldr	r1, [pc, #196]	; (8003348 <HAL_I2C_Init+0x124>)
 8003284:	400a      	ands	r2, r1
 8003286:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0209      	lsls	r1, r1, #8
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	e007      	b.n	80032b2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2184      	movs	r1, #132	; 0x84
 80032ac:	0209      	lsls	r1, r1, #8
 80032ae:	430a      	orrs	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d104      	bne.n	80032c4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	491f      	ldr	r1, [pc, #124]	; (800334c <HAL_I2C_Init+0x128>)
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	491a      	ldr	r1, [pc, #104]	; (8003348 <HAL_I2C_Init+0x124>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	431a      	orrs	r2, r3
 80032ee:	0011      	movs	r1, r2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	021a      	lsls	r2, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69d9      	ldr	r1, [r3, #28]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1a      	ldr	r2, [r3, #32]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2101      	movs	r1, #1
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2241      	movs	r2, #65	; 0x41
 8003328:	2120      	movs	r1, #32
 800332a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2242      	movs	r2, #66	; 0x42
 8003336:	2100      	movs	r1, #0
 8003338:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b002      	add	sp, #8
 8003342:	bd80      	pop	{r7, pc}
 8003344:	f0ffffff 	.word	0xf0ffffff
 8003348:	ffff7fff 	.word	0xffff7fff
 800334c:	02008000 	.word	0x02008000

08003350 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af02      	add	r7, sp, #8
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	0008      	movs	r0, r1
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	0019      	movs	r1, r3
 800335e:	230a      	movs	r3, #10
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	1c02      	adds	r2, r0, #0
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	2308      	movs	r3, #8
 8003368:	18fb      	adds	r3, r7, r3
 800336a:	1c0a      	adds	r2, r1, #0
 800336c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2241      	movs	r2, #65	; 0x41
 8003372:	5c9b      	ldrb	r3, [r3, r2]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b20      	cmp	r3, #32
 8003378:	d000      	beq.n	800337c <HAL_I2C_Master_Transmit+0x2c>
 800337a:	e0e7      	b.n	800354c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	5c9b      	ldrb	r3, [r3, r2]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d101      	bne.n	800338a <HAL_I2C_Master_Transmit+0x3a>
 8003386:	2302      	movs	r3, #2
 8003388:	e0e1      	b.n	800354e <HAL_I2C_Master_Transmit+0x1fe>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003392:	f7fe fc89 	bl	8001ca8 <HAL_GetTick>
 8003396:	0003      	movs	r3, r0
 8003398:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	0219      	lsls	r1, r3, #8
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2319      	movs	r3, #25
 80033a6:	2201      	movs	r2, #1
 80033a8:	f000 f8fc 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 80033ac:	1e03      	subs	r3, r0, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0cc      	b.n	800354e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2241      	movs	r2, #65	; 0x41
 80033b8:	2121      	movs	r1, #33	; 0x21
 80033ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2242      	movs	r2, #66	; 0x42
 80033c0:	2110      	movs	r1, #16
 80033c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2208      	movs	r2, #8
 80033d4:	18ba      	adds	r2, r7, r2
 80033d6:	8812      	ldrh	r2, [r2, #0]
 80033d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	2bff      	cmp	r3, #255	; 0xff
 80033e8:	d911      	bls.n	800340e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	22ff      	movs	r2, #255	; 0xff
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	045c      	lsls	r4, r3, #17
 80033fa:	230a      	movs	r3, #10
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	8819      	ldrh	r1, [r3, #0]
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	4b55      	ldr	r3, [pc, #340]	; (8003558 <HAL_I2C_Master_Transmit+0x208>)
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	0023      	movs	r3, r4
 8003408:	f000 f9ec 	bl	80037e4 <I2C_TransferConfig>
 800340c:	e075      	b.n	80034fa <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	b2da      	uxtb	r2, r3
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	049c      	lsls	r4, r3, #18
 8003422:	230a      	movs	r3, #10
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	8819      	ldrh	r1, [r3, #0]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <HAL_I2C_Master_Transmit+0x208>)
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	0023      	movs	r3, r4
 8003430:	f000 f9d8 	bl	80037e4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003434:	e061      	b.n	80034fa <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	0018      	movs	r0, r3
 800343e:	f000 f8f0 	bl	8003622 <I2C_WaitOnTXISFlagUntilTimeout>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e081      	b.n	800354e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	781a      	ldrb	r2, [r3, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d03a      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x1aa>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d136      	bne.n	80034fa <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800348c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	0013      	movs	r3, r2
 8003496:	2200      	movs	r2, #0
 8003498:	2180      	movs	r1, #128	; 0x80
 800349a:	f000 f883 	bl	80035a4 <I2C_WaitOnFlagUntilTimeout>
 800349e:	1e03      	subs	r3, r0, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e053      	b.n	800354e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2bff      	cmp	r3, #255	; 0xff
 80034ae:	d911      	bls.n	80034d4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	22ff      	movs	r2, #255	; 0xff
 80034b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	045c      	lsls	r4, r3, #17
 80034c0:	230a      	movs	r3, #10
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	8819      	ldrh	r1, [r3, #0]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	0023      	movs	r3, r4
 80034ce:	f000 f989 	bl	80037e4 <I2C_TransferConfig>
 80034d2:	e012      	b.n	80034fa <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	049c      	lsls	r4, r3, #18
 80034e8:	230a      	movs	r3, #10
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	8819      	ldrh	r1, [r3, #0]
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	2300      	movs	r3, #0
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	0023      	movs	r3, r4
 80034f6:	f000 f975 	bl	80037e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d198      	bne.n	8003436 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	0018      	movs	r0, r3
 800350c:	f000 f8c8 	bl	80036a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003510:	1e03      	subs	r3, r0, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e01a      	b.n	800354e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2220      	movs	r2, #32
 800351e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	490c      	ldr	r1, [pc, #48]	; (800355c <HAL_I2C_Master_Transmit+0x20c>)
 800352c:	400a      	ands	r2, r1
 800352e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2241      	movs	r2, #65	; 0x41
 8003534:	2120      	movs	r1, #32
 8003536:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2242      	movs	r2, #66	; 0x42
 800353c:	2100      	movs	r1, #0
 800353e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2240      	movs	r2, #64	; 0x40
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800354c:	2302      	movs	r3, #2
  }
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b007      	add	sp, #28
 8003554:	bd90      	pop	{r4, r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	80002000 	.word	0x80002000
 800355c:	fe00e800 	.word	0xfe00e800

08003560 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	2202      	movs	r2, #2
 8003570:	4013      	ands	r3, r2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d103      	bne.n	800357e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	2b01      	cmp	r3, #1
 800358a:	d007      	beq.n	800359c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	430a      	orrs	r2, r1
 800359a:	619a      	str	r2, [r3, #24]
  }
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	1dfb      	adds	r3, r7, #7
 80035b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035b4:	e021      	b.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	3301      	adds	r3, #1
 80035ba:	d01e      	beq.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035bc:	f7fe fb74 	bl	8001ca8 <HAL_GetTick>
 80035c0:	0002      	movs	r2, r0
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d113      	bne.n	80035fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d6:	2220      	movs	r2, #32
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2241      	movs	r2, #65	; 0x41
 80035e2:	2120      	movs	r1, #32
 80035e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2242      	movs	r2, #66	; 0x42
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2240      	movs	r2, #64	; 0x40
 80035f2:	2100      	movs	r1, #0
 80035f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	425a      	negs	r2, r3
 800360a:	4153      	adcs	r3, r2
 800360c:	b2db      	uxtb	r3, r3
 800360e:	001a      	movs	r2, r3
 8003610:	1dfb      	adds	r3, r7, #7
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d0ce      	beq.n	80035b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	0018      	movs	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	b004      	add	sp, #16
 8003620:	bd80      	pop	{r7, pc}

08003622 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800362e:	e02b      	b.n	8003688 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	0018      	movs	r0, r3
 8003638:	f000 f86e 	bl	8003718 <I2C_IsAcknowledgeFailed>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d001      	beq.n	8003644 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e029      	b.n	8003698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3301      	adds	r3, #1
 8003648:	d01e      	beq.n	8003688 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364a:	f7fe fb2d 	bl	8001ca8 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d113      	bne.n	8003688 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	2220      	movs	r2, #32
 8003666:	431a      	orrs	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2241      	movs	r2, #65	; 0x41
 8003670:	2120      	movs	r1, #32
 8003672:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2242      	movs	r2, #66	; 0x42
 8003678:	2100      	movs	r1, #0
 800367a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2240      	movs	r2, #64	; 0x40
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e007      	b.n	8003698 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	2b02      	cmp	r3, #2
 8003694:	d1cc      	bne.n	8003630 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	0018      	movs	r0, r3
 800369a:	46bd      	mov	sp, r7
 800369c:	b004      	add	sp, #16
 800369e:	bd80      	pop	{r7, pc}

080036a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ac:	e028      	b.n	8003700 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f82f 	bl	8003718 <I2C_IsAcknowledgeFailed>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d001      	beq.n	80036c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e026      	b.n	8003710 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fe faf1 	bl	8001ca8 <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d302      	bcc.n	80036d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d113      	bne.n	8003700 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	2220      	movs	r2, #32
 80036de:	431a      	orrs	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2241      	movs	r2, #65	; 0x41
 80036e8:	2120      	movs	r1, #32
 80036ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2242      	movs	r2, #66	; 0x42
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2240      	movs	r2, #64	; 0x40
 80036f8:	2100      	movs	r1, #0
 80036fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2220      	movs	r2, #32
 8003708:	4013      	ands	r3, r2
 800370a:	2b20      	cmp	r3, #32
 800370c:	d1cf      	bne.n	80036ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b004      	add	sp, #16
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2210      	movs	r2, #16
 800372c:	4013      	ands	r3, r2
 800372e:	2b10      	cmp	r3, #16
 8003730:	d151      	bne.n	80037d6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003732:	e021      	b.n	8003778 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	3301      	adds	r3, #1
 8003738:	d01e      	beq.n	8003778 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373a:	f7fe fab5 	bl	8001ca8 <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	429a      	cmp	r2, r3
 8003748:	d302      	bcc.n	8003750 <I2C_IsAcknowledgeFailed+0x38>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d113      	bne.n	8003778 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	2220      	movs	r2, #32
 8003756:	431a      	orrs	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2241      	movs	r2, #65	; 0x41
 8003760:	2120      	movs	r1, #32
 8003762:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2242      	movs	r2, #66	; 0x42
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	2100      	movs	r1, #0
 8003772:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e02f      	b.n	80037d8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2220      	movs	r2, #32
 8003780:	4013      	ands	r3, r2
 8003782:	2b20      	cmp	r3, #32
 8003784:	d1d6      	bne.n	8003734 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2210      	movs	r2, #16
 800378c:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2220      	movs	r2, #32
 8003794:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	0018      	movs	r0, r3
 800379a:	f7ff fee1 	bl	8003560 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	490d      	ldr	r1, [pc, #52]	; (80037e0 <I2C_IsAcknowledgeFailed+0xc8>)
 80037aa:	400a      	ands	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	2204      	movs	r2, #4
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2241      	movs	r2, #65	; 0x41
 80037be:	2120      	movs	r1, #32
 80037c0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2242      	movs	r2, #66	; 0x42
 80037c6:	2100      	movs	r1, #0
 80037c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	2100      	movs	r1, #0
 80037d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	0008      	movs	r0, r1
 80037ee:	0011      	movs	r1, r2
 80037f0:	607b      	str	r3, [r7, #4]
 80037f2:	240a      	movs	r4, #10
 80037f4:	193b      	adds	r3, r7, r4
 80037f6:	1c02      	adds	r2, r0, #0
 80037f8:	801a      	strh	r2, [r3, #0]
 80037fa:	2009      	movs	r0, #9
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	1c0a      	adds	r2, r1, #0
 8003800:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	0d51      	lsrs	r1, r2, #21
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	00d2      	lsls	r2, r2, #3
 8003810:	400a      	ands	r2, r1
 8003812:	490e      	ldr	r1, [pc, #56]	; (800384c <I2C_TransferConfig+0x68>)
 8003814:	430a      	orrs	r2, r1
 8003816:	43d2      	mvns	r2, r2
 8003818:	401a      	ands	r2, r3
 800381a:	0011      	movs	r1, r2
 800381c:	193b      	adds	r3, r7, r4
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	059b      	lsls	r3, r3, #22
 8003822:	0d9a      	lsrs	r2, r3, #22
 8003824:	183b      	adds	r3, r7, r0
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	0418      	lsls	r0, r3, #16
 800382a:	23ff      	movs	r3, #255	; 0xff
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	4003      	ands	r3, r0
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	431a      	orrs	r2, r3
 8003836:	6a3b      	ldr	r3, [r7, #32]
 8003838:	431a      	orrs	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b005      	add	sp, #20
 8003848:	bd90      	pop	{r4, r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	03ff63ff 	.word	0x03ff63ff

08003850 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2241      	movs	r2, #65	; 0x41
 800385e:	5c9b      	ldrb	r3, [r3, r2]
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b20      	cmp	r3, #32
 8003864:	d138      	bne.n	80038d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2240      	movs	r2, #64	; 0x40
 800386a:	5c9b      	ldrb	r3, [r3, r2]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d101      	bne.n	8003874 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003870:	2302      	movs	r3, #2
 8003872:	e032      	b.n	80038da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2240      	movs	r2, #64	; 0x40
 8003878:	2101      	movs	r1, #1
 800387a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2241      	movs	r2, #65	; 0x41
 8003880:	2124      	movs	r1, #36	; 0x24
 8003882:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2101      	movs	r1, #1
 8003890:	438a      	bics	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4911      	ldr	r1, [pc, #68]	; (80038e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6819      	ldr	r1, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	430a      	orrs	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2241      	movs	r2, #65	; 0x41
 80038c8:	2120      	movs	r1, #32
 80038ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038d4:	2300      	movs	r3, #0
 80038d6:	e000      	b.n	80038da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038d8:	2302      	movs	r3, #2
  }
}
 80038da:	0018      	movs	r0, r3
 80038dc:	46bd      	mov	sp, r7
 80038de:	b002      	add	sp, #8
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	ffffefff 	.word	0xffffefff

080038e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2241      	movs	r2, #65	; 0x41
 80038f6:	5c9b      	ldrb	r3, [r3, r2]
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d139      	bne.n	8003972 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2240      	movs	r2, #64	; 0x40
 8003902:	5c9b      	ldrb	r3, [r3, r2]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003908:	2302      	movs	r3, #2
 800390a:	e033      	b.n	8003974 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	2101      	movs	r1, #1
 8003912:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2241      	movs	r2, #65	; 0x41
 8003918:	2124      	movs	r1, #36	; 0x24
 800391a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2101      	movs	r1, #1
 8003928:	438a      	bics	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a11      	ldr	r2, [pc, #68]	; (800397c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2101      	movs	r1, #1
 800395a:	430a      	orrs	r2, r1
 800395c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2241      	movs	r2, #65	; 0x41
 8003962:	2120      	movs	r1, #32
 8003964:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2240      	movs	r2, #64	; 0x40
 800396a:	2100      	movs	r1, #0
 800396c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	e000      	b.n	8003974 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
  }
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b004      	add	sp, #16
 800397a:	bd80      	pop	{r7, pc}
 800397c:	fffff0ff 	.word	0xfffff0ff

08003980 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e036      	b.n	8003a00 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_IWDG_Init+0x88>)
 8003998:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <HAL_IWDG_Init+0x8c>)
 80039a0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6852      	ldr	r2, [r2, #4]
 80039aa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6892      	ldr	r2, [r2, #8]
 80039b4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80039b6:	f7fe f977 	bl	8001ca8 <HAL_GetTick>
 80039ba:	0003      	movs	r3, r0
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80039be:	e008      	b.n	80039d2 <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80039c0:	f7fe f972 	bl	8001ca8 <HAL_GetTick>
 80039c4:	0002      	movs	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b26      	cmp	r3, #38	; 0x26
 80039cc:	d901      	bls.n	80039d2 <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e016      	b.n	8003a00 <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f1      	bne.n	80039c0 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d005      	beq.n	80039f6 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	611a      	str	r2, [r3, #16]
 80039f4:	e003      	b.n	80039fe <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <HAL_IWDG_Init+0x90>)
 80039fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b004      	add	sp, #16
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	0000cccc 	.word	0x0000cccc
 8003a0c:	00005555 	.word	0x00005555
 8003a10:	0000aaaa 	.word	0x0000aaaa

08003a14 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a03      	ldr	r2, [pc, #12]	; (8003a30 <HAL_IWDG_Refresh+0x1c>)
 8003a22:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b002      	add	sp, #8
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	0000aaaa 	.word	0x0000aaaa

08003a34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e301      	b.n	800404a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d100      	bne.n	8003a52 <HAL_RCC_OscConfig+0x1e>
 8003a50:	e08d      	b.n	8003b6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a52:	4bc3      	ldr	r3, [pc, #780]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	220c      	movs	r2, #12
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d00e      	beq.n	8003a7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a5e:	4bc0      	ldr	r3, [pc, #768]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	220c      	movs	r2, #12
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d116      	bne.n	8003a98 <HAL_RCC_OscConfig+0x64>
 8003a6a:	4bbd      	ldr	r3, [pc, #756]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	025b      	lsls	r3, r3, #9
 8003a72:	401a      	ands	r2, r3
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	025b      	lsls	r3, r3, #9
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d10d      	bne.n	8003a98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	4bb8      	ldr	r3, [pc, #736]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	4013      	ands	r3, r2
 8003a86:	d100      	bne.n	8003a8a <HAL_RCC_OscConfig+0x56>
 8003a88:	e070      	b.n	8003b6c <HAL_RCC_OscConfig+0x138>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d000      	beq.n	8003a94 <HAL_RCC_OscConfig+0x60>
 8003a92:	e06b      	b.n	8003b6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e2d8      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d107      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x7c>
 8003aa0:	4baf      	ldr	r3, [pc, #700]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4bae      	ldr	r3, [pc, #696]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003aa6:	2180      	movs	r1, #128	; 0x80
 8003aa8:	0249      	lsls	r1, r1, #9
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e02f      	b.n	8003b10 <HAL_RCC_OscConfig+0xdc>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x9e>
 8003ab8:	4ba9      	ldr	r3, [pc, #676]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4ba8      	ldr	r3, [pc, #672]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003abe:	49a9      	ldr	r1, [pc, #676]	; (8003d64 <HAL_RCC_OscConfig+0x330>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	4ba6      	ldr	r3, [pc, #664]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4ba5      	ldr	r3, [pc, #660]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003aca:	49a7      	ldr	r1, [pc, #668]	; (8003d68 <HAL_RCC_OscConfig+0x334>)
 8003acc:	400a      	ands	r2, r1
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e01e      	b.n	8003b10 <HAL_RCC_OscConfig+0xdc>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d10e      	bne.n	8003af8 <HAL_RCC_OscConfig+0xc4>
 8003ada:	4ba1      	ldr	r3, [pc, #644]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4ba0      	ldr	r3, [pc, #640]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003ae0:	2180      	movs	r1, #128	; 0x80
 8003ae2:	02c9      	lsls	r1, r1, #11
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	4b9d      	ldr	r3, [pc, #628]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	4b9c      	ldr	r3, [pc, #624]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0249      	lsls	r1, r1, #9
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e00b      	b.n	8003b10 <HAL_RCC_OscConfig+0xdc>
 8003af8:	4b99      	ldr	r3, [pc, #612]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b98      	ldr	r3, [pc, #608]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003afe:	4999      	ldr	r1, [pc, #612]	; (8003d64 <HAL_RCC_OscConfig+0x330>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	4b96      	ldr	r3, [pc, #600]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b95      	ldr	r3, [pc, #596]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	4997      	ldr	r1, [pc, #604]	; (8003d68 <HAL_RCC_OscConfig+0x334>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d014      	beq.n	8003b42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7fe f8c6 	bl	8001ca8 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b22:	f7fe f8c1 	bl	8001ca8 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b64      	cmp	r3, #100	; 0x64
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e28a      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b34:	4b8a      	ldr	r3, [pc, #552]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	029b      	lsls	r3, r3, #10
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0xee>
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fe f8b1 	bl	8001ca8 <HAL_GetTick>
 8003b46:	0003      	movs	r3, r0
 8003b48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe f8ac 	bl	8001ca8 <HAL_GetTick>
 8003b50:	0002      	movs	r2, r0
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e275      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b80      	ldr	r3, [pc, #512]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	029b      	lsls	r3, r3, #10
 8003b66:	4013      	ands	r3, r2
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0x118>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2202      	movs	r2, #2
 8003b74:	4013      	ands	r3, r2
 8003b76:	d100      	bne.n	8003b7a <HAL_RCC_OscConfig+0x146>
 8003b78:	e069      	b.n	8003c4e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003b7a:	4b79      	ldr	r3, [pc, #484]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	220c      	movs	r2, #12
 8003b80:	4013      	ands	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003b84:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	220c      	movs	r2, #12
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d11c      	bne.n	8003bca <HAL_RCC_OscConfig+0x196>
 8003b90:	4b73      	ldr	r3, [pc, #460]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d116      	bne.n	8003bca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9c:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d005      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d001      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e24b      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4b6b      	ldr	r3, [pc, #428]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	22f8      	movs	r2, #248	; 0xf8
 8003bb8:	4393      	bics	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	00da      	lsls	r2, r3, #3
 8003bc2:	4b67      	ldr	r3, [pc, #412]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bc8:	e041      	b.n	8003c4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d024      	beq.n	8003c1c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd2:	4b63      	ldr	r3, [pc, #396]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b62      	ldr	r3, [pc, #392]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003bd8:	2101      	movs	r1, #1
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fe f863 	bl	8001ca8 <HAL_GetTick>
 8003be2:	0003      	movs	r3, r0
 8003be4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be8:	f7fe f85e 	bl	8001ca8 <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e227      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b59      	ldr	r3, [pc, #356]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	4013      	ands	r3, r2
 8003c02:	d0f1      	beq.n	8003be8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b56      	ldr	r3, [pc, #344]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	22f8      	movs	r2, #248	; 0xf8
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00da      	lsls	r2, r3, #3
 8003c14:	4b52      	ldr	r3, [pc, #328]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c16:	430a      	orrs	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e018      	b.n	8003c4e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1c:	4b50      	ldr	r3, [pc, #320]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c22:	2101      	movs	r1, #1
 8003c24:	438a      	bics	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe f83e 	bl	8001ca8 <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fe f839 	bl	8001ca8 <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e202      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c44:	4b46      	ldr	r3, [pc, #280]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d1f1      	bne.n	8003c32 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2208      	movs	r2, #8
 8003c54:	4013      	ands	r3, r2
 8003c56:	d036      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d019      	beq.n	8003c94 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c64:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c66:	2101      	movs	r1, #1
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c6c:	f7fe f81c 	bl	8001ca8 <HAL_GetTick>
 8003c70:	0003      	movs	r3, r0
 8003c72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c76:	f7fe f817 	bl	8001ca8 <HAL_GetTick>
 8003c7a:	0002      	movs	r2, r0
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e1e0      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c88:	4b35      	ldr	r3, [pc, #212]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d0f1      	beq.n	8003c76 <HAL_RCC_OscConfig+0x242>
 8003c92:	e018      	b.n	8003cc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca0:	f7fe f802 	bl	8001ca8 <HAL_GetTick>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003caa:	f7fd fffd 	bl	8001ca8 <HAL_GetTick>
 8003cae:	0002      	movs	r2, r0
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e1c6      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d1f1      	bne.n	8003caa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2204      	movs	r2, #4
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x29e>
 8003cd0:	e0b4      	b.n	8003e3c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd2:	201f      	movs	r0, #31
 8003cd4:	183b      	adds	r3, r7, r0
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cda:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003cdc:	69da      	ldr	r2, [r3, #28]
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	055b      	lsls	r3, r3, #21
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d110      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	2180      	movs	r1, #128	; 0x80
 8003cee:	0549      	lsls	r1, r1, #21
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	61da      	str	r2, [r3, #28]
 8003cf4:	4b1a      	ldr	r3, [pc, #104]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	055b      	lsls	r3, r3, #21
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d02:	183b      	adds	r3, r7, r0
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d08:	4b18      	ldr	r3, [pc, #96]	; (8003d6c <HAL_RCC_OscConfig+0x338>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4013      	ands	r3, r2
 8003d12:	d11a      	bne.n	8003d4a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <HAL_RCC_OscConfig+0x338>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <HAL_RCC_OscConfig+0x338>)
 8003d1a:	2180      	movs	r1, #128	; 0x80
 8003d1c:	0049      	lsls	r1, r1, #1
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fd ffc1 	bl	8001ca8 <HAL_GetTick>
 8003d26:	0003      	movs	r3, r0
 8003d28:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd ffbc 	bl	8001ca8 <HAL_GetTick>
 8003d30:	0002      	movs	r2, r0
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	; 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e185      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <HAL_RCC_OscConfig+0x338>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4013      	ands	r3, r2
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d10e      	bne.n	8003d70 <HAL_RCC_OscConfig+0x33c>
 8003d52:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003d54:	6a1a      	ldr	r2, [r3, #32]
 8003d56:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	2101      	movs	r1, #1
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	621a      	str	r2, [r3, #32]
 8003d5e:	e035      	b.n	8003dcc <HAL_RCC_OscConfig+0x398>
 8003d60:	40021000 	.word	0x40021000
 8003d64:	fffeffff 	.word	0xfffeffff
 8003d68:	fffbffff 	.word	0xfffbffff
 8003d6c:	40007000 	.word	0x40007000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10c      	bne.n	8003d92 <HAL_RCC_OscConfig+0x35e>
 8003d78:	4bb6      	ldr	r3, [pc, #728]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	4bb5      	ldr	r3, [pc, #724]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003d7e:	2101      	movs	r1, #1
 8003d80:	438a      	bics	r2, r1
 8003d82:	621a      	str	r2, [r3, #32]
 8003d84:	4bb3      	ldr	r3, [pc, #716]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	4bb2      	ldr	r3, [pc, #712]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003d8a:	2104      	movs	r1, #4
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	621a      	str	r2, [r3, #32]
 8003d90:	e01c      	b.n	8003dcc <HAL_RCC_OscConfig+0x398>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b05      	cmp	r3, #5
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x380>
 8003d9a:	4bae      	ldr	r3, [pc, #696]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	4bad      	ldr	r3, [pc, #692]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003da0:	2104      	movs	r1, #4
 8003da2:	430a      	orrs	r2, r1
 8003da4:	621a      	str	r2, [r3, #32]
 8003da6:	4bab      	ldr	r3, [pc, #684]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003da8:	6a1a      	ldr	r2, [r3, #32]
 8003daa:	4baa      	ldr	r3, [pc, #680]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003dac:	2101      	movs	r1, #1
 8003dae:	430a      	orrs	r2, r1
 8003db0:	621a      	str	r2, [r3, #32]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0x398>
 8003db4:	4ba7      	ldr	r3, [pc, #668]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	4ba6      	ldr	r3, [pc, #664]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003dba:	2101      	movs	r1, #1
 8003dbc:	438a      	bics	r2, r1
 8003dbe:	621a      	str	r2, [r3, #32]
 8003dc0:	4ba4      	ldr	r3, [pc, #656]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003dc2:	6a1a      	ldr	r2, [r3, #32]
 8003dc4:	4ba3      	ldr	r3, [pc, #652]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003dc6:	2104      	movs	r1, #4
 8003dc8:	438a      	bics	r2, r1
 8003dca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d014      	beq.n	8003dfe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd4:	f7fd ff68 	bl	8001ca8 <HAL_GetTick>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ddc:	e009      	b.n	8003df2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dde:	f7fd ff63 	bl	8001ca8 <HAL_GetTick>
 8003de2:	0002      	movs	r2, r0
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	4a9b      	ldr	r2, [pc, #620]	; (8004058 <HAL_RCC_OscConfig+0x624>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e12b      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df2:	4b98      	ldr	r3, [pc, #608]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	2202      	movs	r2, #2
 8003df8:	4013      	ands	r3, r2
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x3aa>
 8003dfc:	e013      	b.n	8003e26 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfe:	f7fd ff53 	bl	8001ca8 <HAL_GetTick>
 8003e02:	0003      	movs	r3, r0
 8003e04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e06:	e009      	b.n	8003e1c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e08:	f7fd ff4e 	bl	8001ca8 <HAL_GetTick>
 8003e0c:	0002      	movs	r2, r0
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	4a91      	ldr	r2, [pc, #580]	; (8004058 <HAL_RCC_OscConfig+0x624>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e116      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1c:	4b8d      	ldr	r3, [pc, #564]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	2202      	movs	r2, #2
 8003e22:	4013      	ands	r3, r2
 8003e24:	d1f0      	bne.n	8003e08 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e26:	231f      	movs	r3, #31
 8003e28:	18fb      	adds	r3, r7, r3
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d105      	bne.n	8003e3c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e30:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	4b87      	ldr	r3, [pc, #540]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e36:	4989      	ldr	r1, [pc, #548]	; (800405c <HAL_RCC_OscConfig+0x628>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2210      	movs	r2, #16
 8003e42:	4013      	ands	r3, r2
 8003e44:	d063      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d12a      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003e4e:	4b81      	ldr	r3, [pc, #516]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e52:	4b80      	ldr	r3, [pc, #512]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e54:	2104      	movs	r1, #4
 8003e56:	430a      	orrs	r2, r1
 8003e58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003e5a:	4b7e      	ldr	r3, [pc, #504]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e5e:	4b7d      	ldr	r3, [pc, #500]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	430a      	orrs	r2, r1
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fd ff1f 	bl	8001ca8 <HAL_GetTick>
 8003e6a:	0003      	movs	r3, r0
 8003e6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e70:	f7fd ff1a 	bl	8001ca8 <HAL_GetTick>
 8003e74:	0002      	movs	r2, r0
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0e3      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003e82:	4b74      	ldr	r3, [pc, #464]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e86:	2202      	movs	r2, #2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d0f1      	beq.n	8003e70 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003e8c:	4b71      	ldr	r3, [pc, #452]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	22f8      	movs	r2, #248	; 0xf8
 8003e92:	4393      	bics	r3, r2
 8003e94:	0019      	movs	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	00da      	lsls	r2, r3, #3
 8003e9c:	4b6d      	ldr	r3, [pc, #436]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8003ea2:	e034      	b.n	8003f0e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	3305      	adds	r3, #5
 8003eaa:	d111      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003eac:	4b69      	ldr	r3, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb0:	4b68      	ldr	r3, [pc, #416]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003eb8:	4b66      	ldr	r3, [pc, #408]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebc:	22f8      	movs	r2, #248	; 0xf8
 8003ebe:	4393      	bics	r3, r2
 8003ec0:	0019      	movs	r1, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	00da      	lsls	r2, r3, #3
 8003ec8:	4b62      	ldr	r3, [pc, #392]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	635a      	str	r2, [r3, #52]	; 0x34
 8003ece:	e01e      	b.n	8003f0e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003ed0:	4b60      	ldr	r3, [pc, #384]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003ed2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ed4:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003edc:	4b5d      	ldr	r3, [pc, #372]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ee0:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fd fede 	bl	8001ca8 <HAL_GetTick>
 8003eec:	0003      	movs	r3, r0
 8003eee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003ef2:	f7fd fed9 	bl	8001ca8 <HAL_GetTick>
 8003ef6:	0002      	movs	r2, r0
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0a2      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	2202      	movs	r2, #2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d1f1      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d100      	bne.n	8003f18 <HAL_RCC_OscConfig+0x4e4>
 8003f16:	e097      	b.n	8004048 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f18:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	220c      	movs	r2, #12
 8003f1e:	4013      	ands	r3, r2
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d100      	bne.n	8003f26 <HAL_RCC_OscConfig+0x4f2>
 8003f24:	e06b      	b.n	8003ffe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d14c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	4b49      	ldr	r3, [pc, #292]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b48      	ldr	r3, [pc, #288]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f34:	494a      	ldr	r1, [pc, #296]	; (8004060 <HAL_RCC_OscConfig+0x62c>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd feb5 	bl	8001ca8 <HAL_GetTick>
 8003f3e:	0003      	movs	r3, r0
 8003f40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fd feb0 	bl	8001ca8 <HAL_GetTick>
 8003f48:	0002      	movs	r2, r0
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e079      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f56:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	049b      	lsls	r3, r3, #18
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d1f0      	bne.n	8003f44 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f62:	4b3c      	ldr	r3, [pc, #240]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	220f      	movs	r2, #15
 8003f68:	4393      	bics	r3, r2
 8003f6a:	0019      	movs	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4b38      	ldr	r3, [pc, #224]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f72:	430a      	orrs	r2, r1
 8003f74:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f76:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4a3a      	ldr	r2, [pc, #232]	; (8004064 <HAL_RCC_OscConfig+0x630>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	0019      	movs	r1, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f90:	4b30      	ldr	r3, [pc, #192]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b2f      	ldr	r3, [pc, #188]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003f96:	2180      	movs	r1, #128	; 0x80
 8003f98:	0449      	lsls	r1, r1, #17
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fe83 	bl	8001ca8 <HAL_GetTick>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa8:	f7fd fe7e 	bl	8001ca8 <HAL_GetTick>
 8003fac:	0002      	movs	r2, r0
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e047      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fba:	4b26      	ldr	r3, [pc, #152]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	2380      	movs	r3, #128	; 0x80
 8003fc0:	049b      	lsls	r3, r3, #18
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x574>
 8003fc6:	e03f      	b.n	8004048 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b22      	ldr	r3, [pc, #136]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b21      	ldr	r3, [pc, #132]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003fce:	4924      	ldr	r1, [pc, #144]	; (8004060 <HAL_RCC_OscConfig+0x62c>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd4:	f7fd fe68 	bl	8001ca8 <HAL_GetTick>
 8003fd8:	0003      	movs	r3, r0
 8003fda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd fe63 	bl	8001ca8 <HAL_GetTick>
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e02c      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	049b      	lsls	r3, r3, #18
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x5aa>
 8003ffc:	e024      	b.n	8004048 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e01f      	b.n	800404a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_OscConfig+0x620>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	2380      	movs	r3, #128	; 0x80
 800401a:	025b      	lsls	r3, r3, #9
 800401c:	401a      	ands	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	429a      	cmp	r2, r3
 8004024:	d10e      	bne.n	8004044 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	220f      	movs	r2, #15
 800402a:	401a      	ands	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	23f0      	movs	r3, #240	; 0xf0
 8004038:	039b      	lsls	r3, r3, #14
 800403a:	401a      	ands	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	0018      	movs	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	b008      	add	sp, #32
 8004050:	bd80      	pop	{r7, pc}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	40021000 	.word	0x40021000
 8004058:	00001388 	.word	0x00001388
 800405c:	efffffff 	.word	0xefffffff
 8004060:	feffffff 	.word	0xfeffffff
 8004064:	ffc2ffff 	.word	0xffc2ffff

08004068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0b3      	b.n	80041e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b5b      	ldr	r3, [pc, #364]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d911      	bls.n	80040ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b58      	ldr	r3, [pc, #352]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2201      	movs	r2, #1
 8004090:	4393      	bics	r3, r2
 8004092:	0019      	movs	r1, r3
 8004094:	4b55      	ldr	r3, [pc, #340]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409c:	4b53      	ldr	r3, [pc, #332]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2201      	movs	r2, #1
 80040a2:	4013      	ands	r3, r2
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d001      	beq.n	80040ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e09a      	b.n	80041e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	d015      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2204      	movs	r2, #4
 80040be:	4013      	ands	r3, r2
 80040c0:	d006      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040c2:	4b4b      	ldr	r3, [pc, #300]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80040c8:	21e0      	movs	r1, #224	; 0xe0
 80040ca:	00c9      	lsls	r1, r1, #3
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b47      	ldr	r3, [pc, #284]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	22f0      	movs	r2, #240	; 0xf0
 80040d6:	4393      	bics	r3, r2
 80040d8:	0019      	movs	r1, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	4b44      	ldr	r3, [pc, #272]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80040e0:	430a      	orrs	r2, r1
 80040e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2201      	movs	r2, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d040      	beq.n	8004170 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	4b3e      	ldr	r3, [pc, #248]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	; 0x80
 80040fc:	029b      	lsls	r3, r3, #10
 80040fe:	4013      	ands	r3, r2
 8004100:	d114      	bne.n	800412c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e06e      	b.n	80041e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b38      	ldr	r3, [pc, #224]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	2380      	movs	r3, #128	; 0x80
 8004114:	049b      	lsls	r3, r3, #18
 8004116:	4013      	ands	r3, r2
 8004118:	d108      	bne.n	800412c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e062      	b.n	80041e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b34      	ldr	r3, [pc, #208]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2202      	movs	r2, #2
 8004124:	4013      	ands	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e05b      	b.n	80041e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412c:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2203      	movs	r2, #3
 8004132:	4393      	bics	r3, r2
 8004134:	0019      	movs	r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004140:	f7fd fdb2 	bl	8001ca8 <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004148:	e009      	b.n	800415e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800414a:	f7fd fdad 	bl	8001ca8 <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <HAL_RCC_ClockConfig+0x18c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e042      	b.n	80041e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b24      	ldr	r3, [pc, #144]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	220c      	movs	r2, #12
 8004164:	401a      	ands	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1ec      	bne.n	800414a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	4013      	ands	r3, r2
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d211      	bcs.n	80041a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b1b      	ldr	r3, [pc, #108]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2201      	movs	r2, #1
 8004184:	4393      	bics	r3, r2
 8004186:	0019      	movs	r1, r3
 8004188:	4b18      	ldr	r3, [pc, #96]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004190:	4b16      	ldr	r3, [pc, #88]	; (80041ec <HAL_RCC_ClockConfig+0x184>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	4013      	ands	r3, r2
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	429a      	cmp	r2, r3
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e020      	b.n	80041e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2204      	movs	r2, #4
 80041a8:	4013      	ands	r3, r2
 80041aa:	d009      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	4a11      	ldr	r2, [pc, #68]	; (80041f8 <HAL_RCC_ClockConfig+0x190>)
 80041b2:	4013      	ands	r3, r2
 80041b4:	0019      	movs	r1, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041c0:	f000 f820 	bl	8004204 <HAL_RCC_GetSysClockFreq>
 80041c4:	0001      	movs	r1, r0
 80041c6:	4b0a      	ldr	r3, [pc, #40]	; (80041f0 <HAL_RCC_ClockConfig+0x188>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	091b      	lsrs	r3, r3, #4
 80041cc:	220f      	movs	r2, #15
 80041ce:	4013      	ands	r3, r2
 80041d0:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_RCC_ClockConfig+0x194>)
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	000a      	movs	r2, r1
 80041d6:	40da      	lsrs	r2, r3
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_ClockConfig+0x198>)
 80041da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80041dc:	2000      	movs	r0, #0
 80041de:	f7fd fd1d 	bl	8001c1c <HAL_InitTick>
  
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b004      	add	sp, #16
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40022000 	.word	0x40022000
 80041f0:	40021000 	.word	0x40021000
 80041f4:	00001388 	.word	0x00001388
 80041f8:	fffff8ff 	.word	0xfffff8ff
 80041fc:	08005bec 	.word	0x08005bec
 8004200:	20000004 	.word	0x20000004

08004204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b08f      	sub	sp, #60	; 0x3c
 8004208:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800420a:	2314      	movs	r3, #20
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	4a2b      	ldr	r2, [pc, #172]	; (80042bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004210:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004212:	c313      	stmia	r3!, {r0, r1, r4}
 8004214:	6812      	ldr	r2, [r2, #0]
 8004216:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004218:	1d3b      	adds	r3, r7, #4
 800421a:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800421c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800421e:	c313      	stmia	r3!, {r0, r1, r4}
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004228:	2300      	movs	r3, #0
 800422a:	62bb      	str	r3, [r7, #40]	; 0x28
 800422c:	2300      	movs	r3, #0
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004238:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800423e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004240:	220c      	movs	r2, #12
 8004242:	4013      	ands	r3, r2
 8004244:	2b04      	cmp	r3, #4
 8004246:	d002      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0x4a>
 8004248:	2b08      	cmp	r3, #8
 800424a:	d003      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x50>
 800424c:	e02d      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800424e:	4b1e      	ldr	r3, [pc, #120]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004250:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004252:	e02d      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	0c9b      	lsrs	r3, r3, #18
 8004258:	220f      	movs	r2, #15
 800425a:	4013      	ands	r3, r2
 800425c:	2214      	movs	r2, #20
 800425e:	18ba      	adds	r2, r7, r2
 8004260:	5cd3      	ldrb	r3, [r2, r3]
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004268:	220f      	movs	r2, #15
 800426a:	4013      	ands	r3, r2
 800426c:	1d3a      	adds	r2, r7, #4
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004274:	2380      	movs	r3, #128	; 0x80
 8004276:	025b      	lsls	r3, r3, #9
 8004278:	4013      	ands	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800427c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427e:	4812      	ldr	r0, [pc, #72]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004280:	f7fb ff54 	bl	800012c <__udivsi3>
 8004284:	0003      	movs	r3, r0
 8004286:	001a      	movs	r2, r3
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	4353      	muls	r3, r2
 800428c:	637b      	str	r3, [r7, #52]	; 0x34
 800428e:	e009      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004292:	000a      	movs	r2, r1
 8004294:	0152      	lsls	r2, r2, #5
 8004296:	1a52      	subs	r2, r2, r1
 8004298:	0193      	lsls	r3, r2, #6
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	185b      	adds	r3, r3, r1
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80042a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042a8:	e002      	b.n	80042b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042aa:	4b07      	ldr	r3, [pc, #28]	; (80042c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80042ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b00f      	add	sp, #60	; 0x3c
 80042b8:	bd90      	pop	{r4, r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	08005b98 	.word	0x08005b98
 80042c0:	08005ba8 	.word	0x08005ba8
 80042c4:	40021000 	.word	0x40021000
 80042c8:	007a1200 	.word	0x007a1200

080042cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	025b      	lsls	r3, r3, #9
 80042e4:	4013      	ands	r3, r2
 80042e6:	d100      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80042e8:	e08e      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80042ea:	2017      	movs	r0, #23
 80042ec:	183b      	adds	r3, r7, r0
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4b57      	ldr	r3, [pc, #348]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042f4:	69da      	ldr	r2, [r3, #28]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	055b      	lsls	r3, r3, #21
 80042fa:	4013      	ands	r3, r2
 80042fc:	d110      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	4b54      	ldr	r3, [pc, #336]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004300:	69da      	ldr	r2, [r3, #28]
 8004302:	4b53      	ldr	r3, [pc, #332]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004304:	2180      	movs	r1, #128	; 0x80
 8004306:	0549      	lsls	r1, r1, #21
 8004308:	430a      	orrs	r2, r1
 800430a:	61da      	str	r2, [r3, #28]
 800430c:	4b50      	ldr	r3, [pc, #320]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	2380      	movs	r3, #128	; 0x80
 8004312:	055b      	lsls	r3, r3, #21
 8004314:	4013      	ands	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800431a:	183b      	adds	r3, r7, r0
 800431c:	2201      	movs	r2, #1
 800431e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004320:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4013      	ands	r3, r2
 800432a:	d11a      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800432c:	4b49      	ldr	r3, [pc, #292]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b48      	ldr	r3, [pc, #288]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004332:	2180      	movs	r1, #128	; 0x80
 8004334:	0049      	lsls	r1, r1, #1
 8004336:	430a      	orrs	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433a:	f7fd fcb5 	bl	8001ca8 <HAL_GetTick>
 800433e:	0003      	movs	r3, r0
 8004340:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004342:	e008      	b.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004344:	f7fd fcb0 	bl	8001ca8 <HAL_GetTick>
 8004348:	0002      	movs	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e077      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	; 0x80
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4013      	ands	r3, r2
 8004360:	d0f0      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004362:	4b3b      	ldr	r3, [pc, #236]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	23c0      	movs	r3, #192	; 0xc0
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4013      	ands	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d034      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	23c0      	movs	r3, #192	; 0xc0
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4013      	ands	r3, r2
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	429a      	cmp	r2, r3
 8004382:	d02c      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004384:	4b32      	ldr	r3, [pc, #200]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4a33      	ldr	r2, [pc, #204]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800438e:	4b30      	ldr	r3, [pc, #192]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	0249      	lsls	r1, r1, #9
 8004398:	430a      	orrs	r2, r1
 800439a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800439c:	4b2c      	ldr	r3, [pc, #176]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800439e:	6a1a      	ldr	r2, [r3, #32]
 80043a0:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043a2:	492e      	ldr	r1, [pc, #184]	; (800445c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043a8:	4b29      	ldr	r3, [pc, #164]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	d013      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b6:	f7fd fc77 	bl	8001ca8 <HAL_GetTick>
 80043ba:	0003      	movs	r3, r0
 80043bc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043be:	e009      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fd fc72 	bl	8001ca8 <HAL_GetTick>
 80043c4:	0002      	movs	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	4a25      	ldr	r2, [pc, #148]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e038      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043de:	4b1c      	ldr	r3, [pc, #112]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4a1d      	ldr	r2, [pc, #116]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043f2:	2317      	movs	r3, #23
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043fc:	4b14      	ldr	r3, [pc, #80]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004402:	4918      	ldr	r1, [pc, #96]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004404:	400a      	ands	r2, r1
 8004406:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2201      	movs	r2, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d009      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	2203      	movs	r2, #3
 8004418:	4393      	bics	r3, r2
 800441a:	0019      	movs	r1, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004422:	430a      	orrs	r2, r1
 8004424:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2220      	movs	r2, #32
 800442c:	4013      	ands	r3, r2
 800442e:	d009      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004430:	4b07      	ldr	r3, [pc, #28]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	2210      	movs	r2, #16
 8004436:	4393      	bics	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68da      	ldr	r2, [r3, #12]
 800443e:	4b04      	ldr	r3, [pc, #16]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004440:	430a      	orrs	r2, r1
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	0018      	movs	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	b006      	add	sp, #24
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	40021000 	.word	0x40021000
 8004454:	40007000 	.word	0x40007000
 8004458:	fffffcff 	.word	0xfffffcff
 800445c:	fffeffff 	.word	0xfffeffff
 8004460:	00001388 	.word	0x00001388
 8004464:	efffffff 	.word	0xefffffff

08004468 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d101      	bne.n	800447a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e042      	b.n	8004500 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	223d      	movs	r2, #61	; 0x3d
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	d107      	bne.n	8004496 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	223c      	movs	r2, #60	; 0x3c
 800448a:	2100      	movs	r1, #0
 800448c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f7fd fac5 	bl	8001a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	223d      	movs	r2, #61	; 0x3d
 800449a:	2102      	movs	r1, #2
 800449c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	0019      	movs	r1, r3
 80044a8:	0010      	movs	r0, r2
 80044aa:	f000 fabd 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2246      	movs	r2, #70	; 0x46
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	223e      	movs	r2, #62	; 0x3e
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	223f      	movs	r2, #63	; 0x3f
 80044c2:	2101      	movs	r1, #1
 80044c4:	5499      	strb	r1, [r3, r2]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2240      	movs	r2, #64	; 0x40
 80044ca:	2101      	movs	r1, #1
 80044cc:	5499      	strb	r1, [r3, r2]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2241      	movs	r2, #65	; 0x41
 80044d2:	2101      	movs	r1, #1
 80044d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2242      	movs	r2, #66	; 0x42
 80044da:	2101      	movs	r1, #1
 80044dc:	5499      	strb	r1, [r3, r2]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2243      	movs	r2, #67	; 0x43
 80044e2:	2101      	movs	r1, #1
 80044e4:	5499      	strb	r1, [r3, r2]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2244      	movs	r2, #68	; 0x44
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2245      	movs	r2, #69	; 0x45
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	223d      	movs	r2, #61	; 0x3d
 80044fa:	2101      	movs	r1, #1
 80044fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e042      	b.n	80045a0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	223d      	movs	r2, #61	; 0x3d
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d107      	bne.n	8004536 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	223c      	movs	r2, #60	; 0x3c
 800452a:	2100      	movs	r1, #0
 800452c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 f839 	bl	80045a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	223d      	movs	r2, #61	; 0x3d
 800453a:	2102      	movs	r1, #2
 800453c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	0019      	movs	r1, r3
 8004548:	0010      	movs	r0, r2
 800454a:	f000 fa6d 	bl	8004a28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2246      	movs	r2, #70	; 0x46
 8004552:	2101      	movs	r1, #1
 8004554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	223e      	movs	r2, #62	; 0x3e
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	223f      	movs	r2, #63	; 0x3f
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2240      	movs	r2, #64	; 0x40
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2241      	movs	r2, #65	; 0x41
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2242      	movs	r2, #66	; 0x42
 800457a:	2101      	movs	r1, #1
 800457c:	5499      	strb	r1, [r3, r2]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2243      	movs	r2, #67	; 0x43
 8004582:	2101      	movs	r1, #1
 8004584:	5499      	strb	r1, [r3, r2]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2244      	movs	r2, #68	; 0x44
 800458a:	2101      	movs	r1, #1
 800458c:	5499      	strb	r1, [r3, r2]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2245      	movs	r2, #69	; 0x45
 8004592:	2101      	movs	r1, #1
 8004594:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	223d      	movs	r2, #61	; 0x3d
 800459a:	2101      	movs	r1, #1
 800459c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	0018      	movs	r0, r3
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b002      	add	sp, #8
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d108      	bne.n	80045da <HAL_TIM_PWM_Start+0x22>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	223e      	movs	r2, #62	; 0x3e
 80045cc:	5c9b      	ldrb	r3, [r3, r2]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	1e5a      	subs	r2, r3, #1
 80045d4:	4193      	sbcs	r3, r2
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	e01f      	b.n	800461a <HAL_TIM_PWM_Start+0x62>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d108      	bne.n	80045f2 <HAL_TIM_PWM_Start+0x3a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	223f      	movs	r2, #63	; 0x3f
 80045e4:	5c9b      	ldrb	r3, [r3, r2]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	1e5a      	subs	r2, r3, #1
 80045ec:	4193      	sbcs	r3, r2
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	e013      	b.n	800461a <HAL_TIM_PWM_Start+0x62>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d108      	bne.n	800460a <HAL_TIM_PWM_Start+0x52>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2240      	movs	r2, #64	; 0x40
 80045fc:	5c9b      	ldrb	r3, [r3, r2]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	1e5a      	subs	r2, r3, #1
 8004604:	4193      	sbcs	r3, r2
 8004606:	b2db      	uxtb	r3, r3
 8004608:	e007      	b.n	800461a <HAL_TIM_PWM_Start+0x62>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2241      	movs	r2, #65	; 0x41
 800460e:	5c9b      	ldrb	r3, [r3, r2]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	1e5a      	subs	r2, r3, #1
 8004616:	4193      	sbcs	r3, r2
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d001      	beq.n	8004622 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e06e      	b.n	8004700 <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0x7a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	223e      	movs	r2, #62	; 0x3e
 800462c:	2102      	movs	r1, #2
 800462e:	5499      	strb	r1, [r3, r2]
 8004630:	e013      	b.n	800465a <HAL_TIM_PWM_Start+0xa2>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0x8a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	223f      	movs	r2, #63	; 0x3f
 800463c:	2102      	movs	r1, #2
 800463e:	5499      	strb	r1, [r3, r2]
 8004640:	e00b      	b.n	800465a <HAL_TIM_PWM_Start+0xa2>
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d104      	bne.n	8004652 <HAL_TIM_PWM_Start+0x9a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2240      	movs	r2, #64	; 0x40
 800464c:	2102      	movs	r1, #2
 800464e:	5499      	strb	r1, [r3, r2]
 8004650:	e003      	b.n	800465a <HAL_TIM_PWM_Start+0xa2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2241      	movs	r2, #65	; 0x41
 8004656:	2102      	movs	r1, #2
 8004658:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	2201      	movs	r2, #1
 8004662:	0018      	movs	r0, r3
 8004664:	f000 fcec 	bl	8005040 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_TIM_PWM_Start+0x150>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_TIM_PWM_Start+0xd8>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <HAL_TIM_PWM_Start+0x154>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_TIM_PWM_Start+0xd8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_TIM_PWM_Start+0x158>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_TIM_PWM_Start+0xd8>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_TIM_PWM_Start+0x15c>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d101      	bne.n	8004694 <HAL_TIM_PWM_Start+0xdc>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <HAL_TIM_PWM_Start+0xde>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	0209      	lsls	r1, r1, #8
 80046a8:	430a      	orrs	r2, r1
 80046aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a15      	ldr	r2, [pc, #84]	; (8004708 <HAL_TIM_PWM_Start+0x150>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIM_PWM_Start+0x112>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a17      	ldr	r2, [pc, #92]	; (8004718 <HAL_TIM_PWM_Start+0x160>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIM_PWM_Start+0x112>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a11      	ldr	r2, [pc, #68]	; (800470c <HAL_TIM_PWM_Start+0x154>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d111      	bne.n	80046ee <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2207      	movs	r2, #7
 80046d2:	4013      	ands	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b06      	cmp	r3, #6
 80046da:	d010      	beq.n	80046fe <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2101      	movs	r1, #1
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ec:	e007      	b.n	80046fe <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2101      	movs	r1, #1
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	0018      	movs	r0, r3
 8004702:	46bd      	mov	sp, r7
 8004704:	b004      	add	sp, #16
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40012c00 	.word	0x40012c00
 800470c:	40014000 	.word	0x40014000
 8004710:	40014400 	.word	0x40014400
 8004714:	40014800 	.word	0x40014800
 8004718:	40000400 	.word	0x40000400

0800471c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	223c      	movs	r2, #60	; 0x3c
 800472c:	5c9b      	ldrb	r3, [r3, r2]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004732:	2302      	movs	r3, #2
 8004734:	e0a7      	b.n	8004886 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	223c      	movs	r2, #60	; 0x3c
 800473a:	2101      	movs	r1, #1
 800473c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b0c      	cmp	r3, #12
 8004742:	d100      	bne.n	8004746 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004744:	e076      	b.n	8004834 <HAL_TIM_PWM_ConfigChannel+0x118>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b0c      	cmp	r3, #12
 800474a:	d900      	bls.n	800474e <HAL_TIM_PWM_ConfigChannel+0x32>
 800474c:	e095      	b.n	800487a <HAL_TIM_PWM_ConfigChannel+0x15e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d04e      	beq.n	80047f2 <HAL_TIM_PWM_ConfigChannel+0xd6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b08      	cmp	r3, #8
 8004758:	d900      	bls.n	800475c <HAL_TIM_PWM_ConfigChannel+0x40>
 800475a:	e08e      	b.n	800487a <HAL_TIM_PWM_ConfigChannel+0x15e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d021      	beq.n	80047ac <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8004768:	e087      	b.n	800487a <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	0011      	movs	r1, r2
 8004772:	0018      	movs	r0, r3
 8004774:	f000 f9ce 	bl	8004b14 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699a      	ldr	r2, [r3, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2108      	movs	r1, #8
 8004784:	430a      	orrs	r2, r1
 8004786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2104      	movs	r1, #4
 8004794:	438a      	bics	r2, r1
 8004796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6999      	ldr	r1, [r3, #24]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	691a      	ldr	r2, [r3, #16]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	619a      	str	r2, [r3, #24]
      break;
 80047aa:	e067      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	0011      	movs	r1, r2
 80047b4:	0018      	movs	r0, r3
 80047b6:	f000 fa35 	bl	8004c24 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2180      	movs	r1, #128	; 0x80
 80047c6:	0109      	lsls	r1, r1, #4
 80047c8:	430a      	orrs	r2, r1
 80047ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	492e      	ldr	r1, [pc, #184]	; (8004890 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80047d8:	400a      	ands	r2, r1
 80047da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6999      	ldr	r1, [r3, #24]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	021a      	lsls	r2, r3, #8
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	619a      	str	r2, [r3, #24]
      break;
 80047f0:	e044      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	0011      	movs	r1, r2
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 fa96 	bl	8004d2c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2108      	movs	r1, #8
 800480c:	430a      	orrs	r2, r1
 800480e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69da      	ldr	r2, [r3, #28]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2104      	movs	r1, #4
 800481c:	438a      	bics	r2, r1
 800481e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69d9      	ldr	r1, [r3, #28]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	61da      	str	r2, [r3, #28]
      break;
 8004832:	e023      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	0011      	movs	r1, r2
 800483c:	0018      	movs	r0, r3
 800483e:	f000 fafb 	bl	8004e38 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	0109      	lsls	r1, r1, #4
 8004850:	430a      	orrs	r2, r1
 8004852:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69da      	ldr	r2, [r3, #28]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	490c      	ldr	r1, [pc, #48]	; (8004890 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8004860:	400a      	ands	r2, r1
 8004862:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69d9      	ldr	r1, [r3, #28]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
      break;
 8004878:	e000      	b.n	800487c <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 800487a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	223c      	movs	r2, #60	; 0x3c
 8004880:	2100      	movs	r1, #0
 8004882:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	fffffbff 	.word	0xfffffbff

08004894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	223c      	movs	r2, #60	; 0x3c
 80048a2:	5c9b      	ldrb	r3, [r3, r2]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_TIM_ConfigClockSource+0x18>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e0b7      	b.n	8004a1c <HAL_TIM_ConfigClockSource+0x188>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	223c      	movs	r2, #60	; 0x3c
 80048b0:	2101      	movs	r1, #1
 80048b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	223d      	movs	r2, #61	; 0x3d
 80048b8:	2102      	movs	r1, #2
 80048ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2277      	movs	r2, #119	; 0x77
 80048c8:	4393      	bics	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a55      	ldr	r2, [pc, #340]	; (8004a24 <HAL_TIM_ConfigClockSource+0x190>)
 80048d0:	4013      	ands	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2280      	movs	r2, #128	; 0x80
 80048e2:	0192      	lsls	r2, r2, #6
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d040      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xd6>
 80048e8:	2280      	movs	r2, #128	; 0x80
 80048ea:	0192      	lsls	r2, r2, #6
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d900      	bls.n	80048f2 <HAL_TIM_ConfigClockSource+0x5e>
 80048f0:	e088      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	0152      	lsls	r2, r2, #5
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d100      	bne.n	80048fc <HAL_TIM_ConfigClockSource+0x68>
 80048fa:	e085      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	0152      	lsls	r2, r2, #5
 8004900:	4293      	cmp	r3, r2
 8004902:	d900      	bls.n	8004906 <HAL_TIM_ConfigClockSource+0x72>
 8004904:	e07e      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 8004906:	2b70      	cmp	r3, #112	; 0x70
 8004908:	d018      	beq.n	800493c <HAL_TIM_ConfigClockSource+0xa8>
 800490a:	d900      	bls.n	800490e <HAL_TIM_ConfigClockSource+0x7a>
 800490c:	e07a      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 800490e:	2b60      	cmp	r3, #96	; 0x60
 8004910:	d04f      	beq.n	80049b2 <HAL_TIM_ConfigClockSource+0x11e>
 8004912:	d900      	bls.n	8004916 <HAL_TIM_ConfigClockSource+0x82>
 8004914:	e076      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 8004916:	2b50      	cmp	r3, #80	; 0x50
 8004918:	d03b      	beq.n	8004992 <HAL_TIM_ConfigClockSource+0xfe>
 800491a:	d900      	bls.n	800491e <HAL_TIM_ConfigClockSource+0x8a>
 800491c:	e072      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 800491e:	2b40      	cmp	r3, #64	; 0x40
 8004920:	d057      	beq.n	80049d2 <HAL_TIM_ConfigClockSource+0x13e>
 8004922:	d900      	bls.n	8004926 <HAL_TIM_ConfigClockSource+0x92>
 8004924:	e06e      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 8004926:	2b30      	cmp	r3, #48	; 0x30
 8004928:	d063      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15e>
 800492a:	d86b      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d060      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15e>
 8004930:	d868      	bhi.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
 8004932:	2b00      	cmp	r3, #0
 8004934:	d05d      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15e>
 8004936:	2b10      	cmp	r3, #16
 8004938:	d05b      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800493a:	e063      	b.n	8004a04 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	6899      	ldr	r1, [r3, #8]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f000 fb58 	bl	8005000 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2277      	movs	r2, #119	; 0x77
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
      break;
 8004968:	e04f      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f000 fb41 	bl	8005000 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2180      	movs	r1, #128	; 0x80
 800498a:	01c9      	lsls	r1, r1, #7
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
      break;
 8004990:	e03b      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	001a      	movs	r2, r3
 80049a0:	f000 fab4 	bl	8004f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2150      	movs	r1, #80	; 0x50
 80049aa:	0018      	movs	r0, r3
 80049ac:	f000 fb0e 	bl	8004fcc <TIM_ITRx_SetConfig>
      break;
 80049b0:	e02b      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6818      	ldr	r0, [r3, #0]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6859      	ldr	r1, [r3, #4]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	001a      	movs	r2, r3
 80049c0:	f000 fad2 	bl	8004f68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2160      	movs	r1, #96	; 0x60
 80049ca:	0018      	movs	r0, r3
 80049cc:	f000 fafe 	bl	8004fcc <TIM_ITRx_SetConfig>
      break;
 80049d0:	e01b      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6818      	ldr	r0, [r3, #0]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	001a      	movs	r2, r3
 80049e0:	f000 fa94 	bl	8004f0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2140      	movs	r1, #64	; 0x40
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 faee 	bl	8004fcc <TIM_ITRx_SetConfig>
      break;
 80049f0:	e00b      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	0019      	movs	r1, r3
 80049fc:	0010      	movs	r0, r2
 80049fe:	f000 fae5 	bl	8004fcc <TIM_ITRx_SetConfig>
        break;
 8004a02:	e002      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004a04:	46c0      	nop			; (mov r8, r8)
 8004a06:	e000      	b.n	8004a0a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004a08:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	223d      	movs	r2, #61	; 0x3d
 8004a0e:	2101      	movs	r1, #1
 8004a10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	223c      	movs	r2, #60	; 0x3c
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	0018      	movs	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b004      	add	sp, #16
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	ffff00ff 	.word	0xffff00ff

08004a28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a2f      	ldr	r2, [pc, #188]	; (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d003      	beq.n	8004a48 <TIM_Base_SetConfig+0x20>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <TIM_Base_SetConfig+0xd4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d108      	bne.n	8004a5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2270      	movs	r2, #112	; 0x70
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d013      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a25      	ldr	r2, [pc, #148]	; (8004afc <TIM_Base_SetConfig+0xd4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d00f      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a24      	ldr	r2, [pc, #144]	; (8004b00 <TIM_Base_SetConfig+0xd8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00b      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <TIM_Base_SetConfig+0xdc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <TIM_Base_SetConfig+0xe0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d003      	beq.n	8004a8a <TIM_Base_SetConfig+0x62>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a21      	ldr	r2, [pc, #132]	; (8004b0c <TIM_Base_SetConfig+0xe4>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d108      	bne.n	8004a9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <TIM_Base_SetConfig+0xe8>)
 8004a8e:	4013      	ands	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2280      	movs	r2, #128	; 0x80
 8004aa0:	4393      	bics	r3, r2
 8004aa2:	001a      	movs	r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <TIM_Base_SetConfig+0xd0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <TIM_Base_SetConfig+0xba>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <TIM_Base_SetConfig+0xdc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <TIM_Base_SetConfig+0xba>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a0c      	ldr	r2, [pc, #48]	; (8004b08 <TIM_Base_SetConfig+0xe0>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_Base_SetConfig+0xba>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a0b      	ldr	r2, [pc, #44]	; (8004b0c <TIM_Base_SetConfig+0xe4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d103      	bne.n	8004aea <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	615a      	str	r2, [r3, #20]
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b004      	add	sp, #16
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40002000 	.word	0x40002000
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	fffffcff 	.word	0xfffffcff

08004b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	2201      	movs	r2, #1
 8004b24:	4393      	bics	r3, r2
 8004b26:	001a      	movs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a1b      	ldr	r3, [r3, #32]
 8004b30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2270      	movs	r2, #112	; 0x70
 8004b42:	4393      	bics	r3, r2
 8004b44:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2203      	movs	r2, #3
 8004b4a:	4393      	bics	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	4393      	bics	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <TIM_OC1_SetConfig+0xf8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00b      	beq.n	8004b8a <TIM_OC1_SetConfig+0x76>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a26      	ldr	r2, [pc, #152]	; (8004c10 <TIM_OC1_SetConfig+0xfc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <TIM_OC1_SetConfig+0x76>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a25      	ldr	r2, [pc, #148]	; (8004c14 <TIM_OC1_SetConfig+0x100>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d003      	beq.n	8004b8a <TIM_OC1_SetConfig+0x76>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a24      	ldr	r2, [pc, #144]	; (8004c18 <TIM_OC1_SetConfig+0x104>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d10c      	bne.n	8004ba4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	4393      	bics	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <TIM_OC1_SetConfig+0xf8>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00b      	beq.n	8004bc4 <TIM_OC1_SetConfig+0xb0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <TIM_OC1_SetConfig+0xfc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d007      	beq.n	8004bc4 <TIM_OC1_SetConfig+0xb0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <TIM_OC1_SetConfig+0x100>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d003      	beq.n	8004bc4 <TIM_OC1_SetConfig+0xb0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <TIM_OC1_SetConfig+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d111      	bne.n	8004be8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <TIM_OC1_SetConfig+0x108>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <TIM_OC1_SetConfig+0x10c>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	621a      	str	r2, [r3, #32]
}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	46bd      	mov	sp, r7
 8004c06:	b006      	add	sp, #24
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	40012c00 	.word	0x40012c00
 8004c10:	40014000 	.word	0x40014000
 8004c14:	40014400 	.word	0x40014400
 8004c18:	40014800 	.word	0x40014800
 8004c1c:	fffffeff 	.word	0xfffffeff
 8004c20:	fffffdff 	.word	0xfffffdff

08004c24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	2210      	movs	r2, #16
 8004c34:	4393      	bics	r3, r2
 8004c36:	001a      	movs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4a2e      	ldr	r2, [pc, #184]	; (8004d0c <TIM_OC2_SetConfig+0xe8>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a2d      	ldr	r2, [pc, #180]	; (8004d10 <TIM_OC2_SetConfig+0xec>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	021b      	lsls	r3, r3, #8
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	4393      	bics	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a24      	ldr	r2, [pc, #144]	; (8004d14 <TIM_OC2_SetConfig+0xf0>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10d      	bne.n	8004ca2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2280      	movs	r2, #128	; 0x80
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2240      	movs	r2, #64	; 0x40
 8004c9e:	4393      	bics	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <TIM_OC2_SetConfig+0xf0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00b      	beq.n	8004cc2 <TIM_OC2_SetConfig+0x9e>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1a      	ldr	r2, [pc, #104]	; (8004d18 <TIM_OC2_SetConfig+0xf4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <TIM_OC2_SetConfig+0x9e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <TIM_OC2_SetConfig+0xf8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_OC2_SetConfig+0x9e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a18      	ldr	r2, [pc, #96]	; (8004d20 <TIM_OC2_SetConfig+0xfc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d113      	bne.n	8004cea <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4a17      	ldr	r2, [pc, #92]	; (8004d24 <TIM_OC2_SetConfig+0x100>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <TIM_OC2_SetConfig+0x104>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685a      	ldr	r2, [r3, #4]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	621a      	str	r2, [r3, #32]
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b006      	add	sp, #24
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	ffff8fff 	.word	0xffff8fff
 8004d10:	fffffcff 	.word	0xfffffcff
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40014000 	.word	0x40014000
 8004d1c:	40014400 	.word	0x40014400
 8004d20:	40014800 	.word	0x40014800
 8004d24:	fffffbff 	.word	0xfffffbff
 8004d28:	fffff7ff 	.word	0xfffff7ff

08004d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	4a35      	ldr	r2, [pc, #212]	; (8004e10 <TIM_OC3_SetConfig+0xe4>)
 8004d3c:	401a      	ands	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2270      	movs	r2, #112	; 0x70
 8004d58:	4393      	bics	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	4393      	bics	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	4a28      	ldr	r2, [pc, #160]	; (8004e14 <TIM_OC3_SetConfig+0xe8>)
 8004d72:	4013      	ands	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	021b      	lsls	r3, r3, #8
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a24      	ldr	r2, [pc, #144]	; (8004e18 <TIM_OC3_SetConfig+0xec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10d      	bne.n	8004da6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4a23      	ldr	r2, [pc, #140]	; (8004e1c <TIM_OC3_SetConfig+0xf0>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <TIM_OC3_SetConfig+0xf4>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <TIM_OC3_SetConfig+0xec>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00b      	beq.n	8004dc6 <TIM_OC3_SetConfig+0x9a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <TIM_OC3_SetConfig+0xf8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d007      	beq.n	8004dc6 <TIM_OC3_SetConfig+0x9a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <TIM_OC3_SetConfig+0xfc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d003      	beq.n	8004dc6 <TIM_OC3_SetConfig+0x9a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <TIM_OC3_SetConfig+0x100>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d113      	bne.n	8004dee <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <TIM_OC3_SetConfig+0x104>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <TIM_OC3_SetConfig+0x108>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b006      	add	sp, #24
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	fffffeff 	.word	0xfffffeff
 8004e14:	fffffdff 	.word	0xfffffdff
 8004e18:	40012c00 	.word	0x40012c00
 8004e1c:	fffff7ff 	.word	0xfffff7ff
 8004e20:	fffffbff 	.word	0xfffffbff
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40014400 	.word	0x40014400
 8004e2c:	40014800 	.word	0x40014800
 8004e30:	ffffefff 	.word	0xffffefff
 8004e34:	ffffdfff 	.word	0xffffdfff

08004e38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a28      	ldr	r2, [pc, #160]	; (8004ee8 <TIM_OC4_SetConfig+0xb0>)
 8004e48:	401a      	ands	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <TIM_OC4_SetConfig+0xb4>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	4a21      	ldr	r2, [pc, #132]	; (8004ef0 <TIM_OC4_SetConfig+0xb8>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	4a1d      	ldr	r2, [pc, #116]	; (8004ef4 <TIM_OC4_SetConfig+0xbc>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	031b      	lsls	r3, r3, #12
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <TIM_OC4_SetConfig+0xc0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_OC4_SetConfig+0x78>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a18      	ldr	r2, [pc, #96]	; (8004efc <TIM_OC4_SetConfig+0xc4>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_OC4_SetConfig+0x78>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <TIM_OC4_SetConfig+0xc8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_OC4_SetConfig+0x78>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <TIM_OC4_SetConfig+0xcc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d109      	bne.n	8004ec4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <TIM_OC4_SetConfig+0xd0>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	019b      	lsls	r3, r3, #6
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	b006      	add	sp, #24
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	ffffefff 	.word	0xffffefff
 8004eec:	ffff8fff 	.word	0xffff8fff
 8004ef0:	fffffcff 	.word	0xfffffcff
 8004ef4:	ffffdfff 	.word	0xffffdfff
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800
 8004f08:	ffffbfff 	.word	0xffffbfff

08004f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	2201      	movs	r2, #1
 8004f24:	4393      	bics	r3, r2
 8004f26:	001a      	movs	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	22f0      	movs	r2, #240	; 0xf0
 8004f36:	4393      	bics	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	220a      	movs	r2, #10
 8004f48:	4393      	bics	r3, r2
 8004f4a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	621a      	str	r2, [r3, #32]
}
 8004f60:	46c0      	nop			; (mov r8, r8)
 8004f62:	46bd      	mov	sp, r7
 8004f64:	b006      	add	sp, #24
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	2210      	movs	r2, #16
 8004f7a:	4393      	bics	r3, r2
 8004f7c:	001a      	movs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4a0d      	ldr	r2, [pc, #52]	; (8004fc8 <TIM_TI2_ConfigInputStage+0x60>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	22a0      	movs	r2, #160	; 0xa0
 8004fa4:	4393      	bics	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	011b      	lsls	r3, r3, #4
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	46c0      	nop			; (mov r8, r8)
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	b006      	add	sp, #24
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	ffff0fff 	.word	0xffff0fff

08004fcc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2270      	movs	r2, #112	; 0x70
 8004fe0:	4393      	bics	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	2207      	movs	r2, #7
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	609a      	str	r2, [r3, #8]
}
 8004ff6:	46c0      	nop			; (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b004      	add	sp, #16
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <TIM_ETR_SetConfig+0x3c>)
 8005018:	4013      	ands	r3, r2
 800501a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	021a      	lsls	r2, r3, #8
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	431a      	orrs	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4313      	orrs	r3, r2
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46bd      	mov	sp, r7
 8005038:	b006      	add	sp, #24
 800503a:	bd80      	pop	{r7, pc}
 800503c:	ffff00ff 	.word	0xffff00ff

08005040 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	221f      	movs	r2, #31
 8005050:	4013      	ands	r3, r2
 8005052:	2201      	movs	r2, #1
 8005054:	409a      	lsls	r2, r3
 8005056:	0013      	movs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	43d2      	mvns	r2, r2
 8005062:	401a      	ands	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	211f      	movs	r1, #31
 8005070:	400b      	ands	r3, r1
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4099      	lsls	r1, r3
 8005076:	000b      	movs	r3, r1
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	621a      	str	r2, [r3, #32]
}
 800507e:	46c0      	nop			; (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	b006      	add	sp, #24
 8005084:	bd80      	pop	{r7, pc}
	...

08005088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	223c      	movs	r2, #60	; 0x3c
 8005096:	5c9b      	ldrb	r3, [r3, r2]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800509c:	2302      	movs	r3, #2
 800509e:	e041      	b.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	223c      	movs	r2, #60	; 0x3c
 80050a4:	2101      	movs	r1, #1
 80050a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	223d      	movs	r2, #61	; 0x3d
 80050ac:	2102      	movs	r1, #2
 80050ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2270      	movs	r2, #112	; 0x70
 80050c4:	4393      	bics	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d009      	beq.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a11      	ldr	r2, [pc, #68]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d10c      	bne.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2280      	movs	r2, #128	; 0x80
 80050fc:	4393      	bics	r3, r2
 80050fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	223d      	movs	r2, #61	; 0x3d
 8005116:	2101      	movs	r1, #1
 8005118:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	223c      	movs	r2, #60	; 0x3c
 800511e:	2100      	movs	r1, #0
 8005120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b004      	add	sp, #16
 800512a:	bd80      	pop	{r7, pc}
 800512c:	40012c00 	.word	0x40012c00
 8005130:	40000400 	.word	0x40000400
 8005134:	40014000 	.word	0x40014000

08005138 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	223c      	movs	r2, #60	; 0x3c
 800514a:	5c9b      	ldrb	r3, [r3, r2]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d101      	bne.n	8005154 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005150:	2302      	movs	r3, #2
 8005152:	e03e      	b.n	80051d2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	223c      	movs	r2, #60	; 0x3c
 8005158:	2101      	movs	r1, #1
 800515a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	22ff      	movs	r2, #255	; 0xff
 8005160:	4393      	bics	r3, r2
 8005162:	001a      	movs	r2, r3
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005170:	401a      	ands	r2, r3
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800517e:	401a      	ands	r2, r3
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800518c:	401a      	ands	r2, r3
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800519a:	401a      	ands	r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a11      	ldr	r2, [pc, #68]	; (80051ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80051a8:	401a      	ands	r2, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80051b6:	401a      	ands	r2, r3
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	223c      	movs	r2, #60	; 0x3c
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	0018      	movs	r0, r3
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b004      	add	sp, #16
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	fffffcff 	.word	0xfffffcff
 80051e0:	fffffbff 	.word	0xfffffbff
 80051e4:	fffff7ff 	.word	0xfffff7ff
 80051e8:	ffffefff 	.word	0xffffefff
 80051ec:	ffffdfff 	.word	0xffffdfff
 80051f0:	ffffbfff 	.word	0xffffbfff

080051f4 <__errno>:
 80051f4:	4b01      	ldr	r3, [pc, #4]	; (80051fc <__errno+0x8>)
 80051f6:	6818      	ldr	r0, [r3, #0]
 80051f8:	4770      	bx	lr
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	20000010 	.word	0x20000010

08005200 <__libc_init_array>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	2600      	movs	r6, #0
 8005204:	4d0c      	ldr	r5, [pc, #48]	; (8005238 <__libc_init_array+0x38>)
 8005206:	4c0d      	ldr	r4, [pc, #52]	; (800523c <__libc_init_array+0x3c>)
 8005208:	1b64      	subs	r4, r4, r5
 800520a:	10a4      	asrs	r4, r4, #2
 800520c:	42a6      	cmp	r6, r4
 800520e:	d109      	bne.n	8005224 <__libc_init_array+0x24>
 8005210:	2600      	movs	r6, #0
 8005212:	f000 fc99 	bl	8005b48 <_init>
 8005216:	4d0a      	ldr	r5, [pc, #40]	; (8005240 <__libc_init_array+0x40>)
 8005218:	4c0a      	ldr	r4, [pc, #40]	; (8005244 <__libc_init_array+0x44>)
 800521a:	1b64      	subs	r4, r4, r5
 800521c:	10a4      	asrs	r4, r4, #2
 800521e:	42a6      	cmp	r6, r4
 8005220:	d105      	bne.n	800522e <__libc_init_array+0x2e>
 8005222:	bd70      	pop	{r4, r5, r6, pc}
 8005224:	00b3      	lsls	r3, r6, #2
 8005226:	58eb      	ldr	r3, [r5, r3]
 8005228:	4798      	blx	r3
 800522a:	3601      	adds	r6, #1
 800522c:	e7ee      	b.n	800520c <__libc_init_array+0xc>
 800522e:	00b3      	lsls	r3, r6, #2
 8005230:	58eb      	ldr	r3, [r5, r3]
 8005232:	4798      	blx	r3
 8005234:	3601      	adds	r6, #1
 8005236:	e7f2      	b.n	800521e <__libc_init_array+0x1e>
 8005238:	08005c30 	.word	0x08005c30
 800523c:	08005c30 	.word	0x08005c30
 8005240:	08005c30 	.word	0x08005c30
 8005244:	08005c34 	.word	0x08005c34

08005248 <memcmp>:
 8005248:	b530      	push	{r4, r5, lr}
 800524a:	2400      	movs	r4, #0
 800524c:	3901      	subs	r1, #1
 800524e:	42a2      	cmp	r2, r4
 8005250:	d101      	bne.n	8005256 <memcmp+0xe>
 8005252:	2000      	movs	r0, #0
 8005254:	e005      	b.n	8005262 <memcmp+0x1a>
 8005256:	5d03      	ldrb	r3, [r0, r4]
 8005258:	3401      	adds	r4, #1
 800525a:	5d0d      	ldrb	r5, [r1, r4]
 800525c:	42ab      	cmp	r3, r5
 800525e:	d0f6      	beq.n	800524e <memcmp+0x6>
 8005260:	1b58      	subs	r0, r3, r5
 8005262:	bd30      	pop	{r4, r5, pc}

08005264 <memcpy>:
 8005264:	2300      	movs	r3, #0
 8005266:	b510      	push	{r4, lr}
 8005268:	429a      	cmp	r2, r3
 800526a:	d100      	bne.n	800526e <memcpy+0xa>
 800526c:	bd10      	pop	{r4, pc}
 800526e:	5ccc      	ldrb	r4, [r1, r3]
 8005270:	54c4      	strb	r4, [r0, r3]
 8005272:	3301      	adds	r3, #1
 8005274:	e7f8      	b.n	8005268 <memcpy+0x4>

08005276 <memset>:
 8005276:	0003      	movs	r3, r0
 8005278:	1882      	adds	r2, r0, r2
 800527a:	4293      	cmp	r3, r2
 800527c:	d100      	bne.n	8005280 <memset+0xa>
 800527e:	4770      	bx	lr
 8005280:	7019      	strb	r1, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	e7f9      	b.n	800527a <memset+0x4>
	...

08005288 <_free_r>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	0005      	movs	r5, r0
 800528c:	2900      	cmp	r1, #0
 800528e:	d010      	beq.n	80052b2 <_free_r+0x2a>
 8005290:	1f0c      	subs	r4, r1, #4
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	da00      	bge.n	800529a <_free_r+0x12>
 8005298:	18e4      	adds	r4, r4, r3
 800529a:	0028      	movs	r0, r5
 800529c:	f000 f908 	bl	80054b0 <__malloc_lock>
 80052a0:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <_free_r+0x90>)
 80052a2:	6813      	ldr	r3, [r2, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d105      	bne.n	80052b4 <_free_r+0x2c>
 80052a8:	6063      	str	r3, [r4, #4]
 80052aa:	6014      	str	r4, [r2, #0]
 80052ac:	0028      	movs	r0, r5
 80052ae:	f000 f907 	bl	80054c0 <__malloc_unlock>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	d908      	bls.n	80052ca <_free_r+0x42>
 80052b8:	6821      	ldr	r1, [r4, #0]
 80052ba:	1860      	adds	r0, r4, r1
 80052bc:	4283      	cmp	r3, r0
 80052be:	d1f3      	bne.n	80052a8 <_free_r+0x20>
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	1841      	adds	r1, r0, r1
 80052c6:	6021      	str	r1, [r4, #0]
 80052c8:	e7ee      	b.n	80052a8 <_free_r+0x20>
 80052ca:	001a      	movs	r2, r3
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <_free_r+0x4e>
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	d9f9      	bls.n	80052ca <_free_r+0x42>
 80052d6:	6811      	ldr	r1, [r2, #0]
 80052d8:	1850      	adds	r0, r2, r1
 80052da:	42a0      	cmp	r0, r4
 80052dc:	d10b      	bne.n	80052f6 <_free_r+0x6e>
 80052de:	6820      	ldr	r0, [r4, #0]
 80052e0:	1809      	adds	r1, r1, r0
 80052e2:	1850      	adds	r0, r2, r1
 80052e4:	6011      	str	r1, [r2, #0]
 80052e6:	4283      	cmp	r3, r0
 80052e8:	d1e0      	bne.n	80052ac <_free_r+0x24>
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	1841      	adds	r1, r0, r1
 80052f0:	6011      	str	r1, [r2, #0]
 80052f2:	6053      	str	r3, [r2, #4]
 80052f4:	e7da      	b.n	80052ac <_free_r+0x24>
 80052f6:	42a0      	cmp	r0, r4
 80052f8:	d902      	bls.n	8005300 <_free_r+0x78>
 80052fa:	230c      	movs	r3, #12
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	e7d5      	b.n	80052ac <_free_r+0x24>
 8005300:	6821      	ldr	r1, [r4, #0]
 8005302:	1860      	adds	r0, r4, r1
 8005304:	4283      	cmp	r3, r0
 8005306:	d103      	bne.n	8005310 <_free_r+0x88>
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	1841      	adds	r1, r0, r1
 800530e:	6021      	str	r1, [r4, #0]
 8005310:	6063      	str	r3, [r4, #4]
 8005312:	6054      	str	r4, [r2, #4]
 8005314:	e7ca      	b.n	80052ac <_free_r+0x24>
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	200002d8 	.word	0x200002d8

0800531c <sbrk_aligned>:
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	4e0f      	ldr	r6, [pc, #60]	; (800535c <sbrk_aligned+0x40>)
 8005320:	000d      	movs	r5, r1
 8005322:	6831      	ldr	r1, [r6, #0]
 8005324:	0004      	movs	r4, r0
 8005326:	2900      	cmp	r1, #0
 8005328:	d102      	bne.n	8005330 <sbrk_aligned+0x14>
 800532a:	f000 f88f 	bl	800544c <_sbrk_r>
 800532e:	6030      	str	r0, [r6, #0]
 8005330:	0029      	movs	r1, r5
 8005332:	0020      	movs	r0, r4
 8005334:	f000 f88a 	bl	800544c <_sbrk_r>
 8005338:	1c43      	adds	r3, r0, #1
 800533a:	d00a      	beq.n	8005352 <sbrk_aligned+0x36>
 800533c:	2303      	movs	r3, #3
 800533e:	1cc5      	adds	r5, r0, #3
 8005340:	439d      	bics	r5, r3
 8005342:	42a8      	cmp	r0, r5
 8005344:	d007      	beq.n	8005356 <sbrk_aligned+0x3a>
 8005346:	1a29      	subs	r1, r5, r0
 8005348:	0020      	movs	r0, r4
 800534a:	f000 f87f 	bl	800544c <_sbrk_r>
 800534e:	1c43      	adds	r3, r0, #1
 8005350:	d101      	bne.n	8005356 <sbrk_aligned+0x3a>
 8005352:	2501      	movs	r5, #1
 8005354:	426d      	negs	r5, r5
 8005356:	0028      	movs	r0, r5
 8005358:	bd70      	pop	{r4, r5, r6, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	200002dc 	.word	0x200002dc

08005360 <_malloc_r>:
 8005360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005362:	2203      	movs	r2, #3
 8005364:	1ccb      	adds	r3, r1, #3
 8005366:	4393      	bics	r3, r2
 8005368:	3308      	adds	r3, #8
 800536a:	0006      	movs	r6, r0
 800536c:	001f      	movs	r7, r3
 800536e:	2b0c      	cmp	r3, #12
 8005370:	d232      	bcs.n	80053d8 <_malloc_r+0x78>
 8005372:	270c      	movs	r7, #12
 8005374:	42b9      	cmp	r1, r7
 8005376:	d831      	bhi.n	80053dc <_malloc_r+0x7c>
 8005378:	0030      	movs	r0, r6
 800537a:	f000 f899 	bl	80054b0 <__malloc_lock>
 800537e:	4d32      	ldr	r5, [pc, #200]	; (8005448 <_malloc_r+0xe8>)
 8005380:	682b      	ldr	r3, [r5, #0]
 8005382:	001c      	movs	r4, r3
 8005384:	2c00      	cmp	r4, #0
 8005386:	d12e      	bne.n	80053e6 <_malloc_r+0x86>
 8005388:	0039      	movs	r1, r7
 800538a:	0030      	movs	r0, r6
 800538c:	f7ff ffc6 	bl	800531c <sbrk_aligned>
 8005390:	0004      	movs	r4, r0
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d11e      	bne.n	80053d4 <_malloc_r+0x74>
 8005396:	682c      	ldr	r4, [r5, #0]
 8005398:	0025      	movs	r5, r4
 800539a:	2d00      	cmp	r5, #0
 800539c:	d14a      	bne.n	8005434 <_malloc_r+0xd4>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	0029      	movs	r1, r5
 80053a2:	18e3      	adds	r3, r4, r3
 80053a4:	0030      	movs	r0, r6
 80053a6:	9301      	str	r3, [sp, #4]
 80053a8:	f000 f850 	bl	800544c <_sbrk_r>
 80053ac:	9b01      	ldr	r3, [sp, #4]
 80053ae:	4283      	cmp	r3, r0
 80053b0:	d143      	bne.n	800543a <_malloc_r+0xda>
 80053b2:	6823      	ldr	r3, [r4, #0]
 80053b4:	3703      	adds	r7, #3
 80053b6:	1aff      	subs	r7, r7, r3
 80053b8:	2303      	movs	r3, #3
 80053ba:	439f      	bics	r7, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	2f0c      	cmp	r7, #12
 80053c0:	d200      	bcs.n	80053c4 <_malloc_r+0x64>
 80053c2:	270c      	movs	r7, #12
 80053c4:	0039      	movs	r1, r7
 80053c6:	0030      	movs	r0, r6
 80053c8:	f7ff ffa8 	bl	800531c <sbrk_aligned>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d034      	beq.n	800543a <_malloc_r+0xda>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	19df      	adds	r7, r3, r7
 80053d4:	6027      	str	r7, [r4, #0]
 80053d6:	e013      	b.n	8005400 <_malloc_r+0xa0>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dacb      	bge.n	8005374 <_malloc_r+0x14>
 80053dc:	230c      	movs	r3, #12
 80053de:	2500      	movs	r5, #0
 80053e0:	6033      	str	r3, [r6, #0]
 80053e2:	0028      	movs	r0, r5
 80053e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053e6:	6822      	ldr	r2, [r4, #0]
 80053e8:	1bd1      	subs	r1, r2, r7
 80053ea:	d420      	bmi.n	800542e <_malloc_r+0xce>
 80053ec:	290b      	cmp	r1, #11
 80053ee:	d917      	bls.n	8005420 <_malloc_r+0xc0>
 80053f0:	19e2      	adds	r2, r4, r7
 80053f2:	6027      	str	r7, [r4, #0]
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d111      	bne.n	800541c <_malloc_r+0xbc>
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	6011      	str	r1, [r2, #0]
 80053fe:	6053      	str	r3, [r2, #4]
 8005400:	0030      	movs	r0, r6
 8005402:	0025      	movs	r5, r4
 8005404:	f000 f85c 	bl	80054c0 <__malloc_unlock>
 8005408:	2207      	movs	r2, #7
 800540a:	350b      	adds	r5, #11
 800540c:	1d23      	adds	r3, r4, #4
 800540e:	4395      	bics	r5, r2
 8005410:	1aea      	subs	r2, r5, r3
 8005412:	429d      	cmp	r5, r3
 8005414:	d0e5      	beq.n	80053e2 <_malloc_r+0x82>
 8005416:	1b5b      	subs	r3, r3, r5
 8005418:	50a3      	str	r3, [r4, r2]
 800541a:	e7e2      	b.n	80053e2 <_malloc_r+0x82>
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	e7ec      	b.n	80053fa <_malloc_r+0x9a>
 8005420:	6862      	ldr	r2, [r4, #4]
 8005422:	42a3      	cmp	r3, r4
 8005424:	d101      	bne.n	800542a <_malloc_r+0xca>
 8005426:	602a      	str	r2, [r5, #0]
 8005428:	e7ea      	b.n	8005400 <_malloc_r+0xa0>
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	e7e8      	b.n	8005400 <_malloc_r+0xa0>
 800542e:	0023      	movs	r3, r4
 8005430:	6864      	ldr	r4, [r4, #4]
 8005432:	e7a7      	b.n	8005384 <_malloc_r+0x24>
 8005434:	002c      	movs	r4, r5
 8005436:	686d      	ldr	r5, [r5, #4]
 8005438:	e7af      	b.n	800539a <_malloc_r+0x3a>
 800543a:	230c      	movs	r3, #12
 800543c:	0030      	movs	r0, r6
 800543e:	6033      	str	r3, [r6, #0]
 8005440:	f000 f83e 	bl	80054c0 <__malloc_unlock>
 8005444:	e7cd      	b.n	80053e2 <_malloc_r+0x82>
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	200002d8 	.word	0x200002d8

0800544c <_sbrk_r>:
 800544c:	2300      	movs	r3, #0
 800544e:	b570      	push	{r4, r5, r6, lr}
 8005450:	4d06      	ldr	r5, [pc, #24]	; (800546c <_sbrk_r+0x20>)
 8005452:	0004      	movs	r4, r0
 8005454:	0008      	movs	r0, r1
 8005456:	602b      	str	r3, [r5, #0]
 8005458:	f7fc fb66 	bl	8001b28 <_sbrk>
 800545c:	1c43      	adds	r3, r0, #1
 800545e:	d103      	bne.n	8005468 <_sbrk_r+0x1c>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d000      	beq.n	8005468 <_sbrk_r+0x1c>
 8005466:	6023      	str	r3, [r4, #0]
 8005468:	bd70      	pop	{r4, r5, r6, pc}
 800546a:	46c0      	nop			; (mov r8, r8)
 800546c:	200002e0 	.word	0x200002e0

08005470 <siprintf>:
 8005470:	b40e      	push	{r1, r2, r3}
 8005472:	b500      	push	{lr}
 8005474:	490b      	ldr	r1, [pc, #44]	; (80054a4 <siprintf+0x34>)
 8005476:	b09c      	sub	sp, #112	; 0x70
 8005478:	ab1d      	add	r3, sp, #116	; 0x74
 800547a:	9002      	str	r0, [sp, #8]
 800547c:	9006      	str	r0, [sp, #24]
 800547e:	9107      	str	r1, [sp, #28]
 8005480:	9104      	str	r1, [sp, #16]
 8005482:	4809      	ldr	r0, [pc, #36]	; (80054a8 <siprintf+0x38>)
 8005484:	4909      	ldr	r1, [pc, #36]	; (80054ac <siprintf+0x3c>)
 8005486:	cb04      	ldmia	r3!, {r2}
 8005488:	9105      	str	r1, [sp, #20]
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	a902      	add	r1, sp, #8
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	f000 f880 	bl	8005594 <_svfiprintf_r>
 8005494:	2300      	movs	r3, #0
 8005496:	9a02      	ldr	r2, [sp, #8]
 8005498:	7013      	strb	r3, [r2, #0]
 800549a:	b01c      	add	sp, #112	; 0x70
 800549c:	bc08      	pop	{r3}
 800549e:	b003      	add	sp, #12
 80054a0:	4718      	bx	r3
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	7fffffff 	.word	0x7fffffff
 80054a8:	20000010 	.word	0x20000010
 80054ac:	ffff0208 	.word	0xffff0208

080054b0 <__malloc_lock>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	4802      	ldr	r0, [pc, #8]	; (80054bc <__malloc_lock+0xc>)
 80054b4:	f000 faf0 	bl	8005a98 <__retarget_lock_acquire_recursive>
 80054b8:	bd10      	pop	{r4, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	200002e4 	.word	0x200002e4

080054c0 <__malloc_unlock>:
 80054c0:	b510      	push	{r4, lr}
 80054c2:	4802      	ldr	r0, [pc, #8]	; (80054cc <__malloc_unlock+0xc>)
 80054c4:	f000 fae9 	bl	8005a9a <__retarget_lock_release_recursive>
 80054c8:	bd10      	pop	{r4, pc}
 80054ca:	46c0      	nop			; (mov r8, r8)
 80054cc:	200002e4 	.word	0x200002e4

080054d0 <__ssputs_r>:
 80054d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d2:	688e      	ldr	r6, [r1, #8]
 80054d4:	b085      	sub	sp, #20
 80054d6:	0007      	movs	r7, r0
 80054d8:	000c      	movs	r4, r1
 80054da:	9203      	str	r2, [sp, #12]
 80054dc:	9301      	str	r3, [sp, #4]
 80054de:	429e      	cmp	r6, r3
 80054e0:	d83c      	bhi.n	800555c <__ssputs_r+0x8c>
 80054e2:	2390      	movs	r3, #144	; 0x90
 80054e4:	898a      	ldrh	r2, [r1, #12]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	421a      	tst	r2, r3
 80054ea:	d034      	beq.n	8005556 <__ssputs_r+0x86>
 80054ec:	6909      	ldr	r1, [r1, #16]
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	6960      	ldr	r0, [r4, #20]
 80054f2:	1a5b      	subs	r3, r3, r1
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	2303      	movs	r3, #3
 80054f8:	4343      	muls	r3, r0
 80054fa:	0fdd      	lsrs	r5, r3, #31
 80054fc:	18ed      	adds	r5, r5, r3
 80054fe:	9b01      	ldr	r3, [sp, #4]
 8005500:	9802      	ldr	r0, [sp, #8]
 8005502:	3301      	adds	r3, #1
 8005504:	181b      	adds	r3, r3, r0
 8005506:	106d      	asrs	r5, r5, #1
 8005508:	42ab      	cmp	r3, r5
 800550a:	d900      	bls.n	800550e <__ssputs_r+0x3e>
 800550c:	001d      	movs	r5, r3
 800550e:	0553      	lsls	r3, r2, #21
 8005510:	d532      	bpl.n	8005578 <__ssputs_r+0xa8>
 8005512:	0029      	movs	r1, r5
 8005514:	0038      	movs	r0, r7
 8005516:	f7ff ff23 	bl	8005360 <_malloc_r>
 800551a:	1e06      	subs	r6, r0, #0
 800551c:	d109      	bne.n	8005532 <__ssputs_r+0x62>
 800551e:	230c      	movs	r3, #12
 8005520:	603b      	str	r3, [r7, #0]
 8005522:	2340      	movs	r3, #64	; 0x40
 8005524:	2001      	movs	r0, #1
 8005526:	89a2      	ldrh	r2, [r4, #12]
 8005528:	4240      	negs	r0, r0
 800552a:	4313      	orrs	r3, r2
 800552c:	81a3      	strh	r3, [r4, #12]
 800552e:	b005      	add	sp, #20
 8005530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005532:	9a02      	ldr	r2, [sp, #8]
 8005534:	6921      	ldr	r1, [r4, #16]
 8005536:	f7ff fe95 	bl	8005264 <memcpy>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	4a14      	ldr	r2, [pc, #80]	; (8005590 <__ssputs_r+0xc0>)
 800553e:	401a      	ands	r2, r3
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	4313      	orrs	r3, r2
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	9b02      	ldr	r3, [sp, #8]
 8005548:	6126      	str	r6, [r4, #16]
 800554a:	18f6      	adds	r6, r6, r3
 800554c:	6026      	str	r6, [r4, #0]
 800554e:	6165      	str	r5, [r4, #20]
 8005550:	9e01      	ldr	r6, [sp, #4]
 8005552:	1aed      	subs	r5, r5, r3
 8005554:	60a5      	str	r5, [r4, #8]
 8005556:	9b01      	ldr	r3, [sp, #4]
 8005558:	429e      	cmp	r6, r3
 800555a:	d900      	bls.n	800555e <__ssputs_r+0x8e>
 800555c:	9e01      	ldr	r6, [sp, #4]
 800555e:	0032      	movs	r2, r6
 8005560:	9903      	ldr	r1, [sp, #12]
 8005562:	6820      	ldr	r0, [r4, #0]
 8005564:	f000 faa5 	bl	8005ab2 <memmove>
 8005568:	68a3      	ldr	r3, [r4, #8]
 800556a:	2000      	movs	r0, #0
 800556c:	1b9b      	subs	r3, r3, r6
 800556e:	60a3      	str	r3, [r4, #8]
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	199e      	adds	r6, r3, r6
 8005574:	6026      	str	r6, [r4, #0]
 8005576:	e7da      	b.n	800552e <__ssputs_r+0x5e>
 8005578:	002a      	movs	r2, r5
 800557a:	0038      	movs	r0, r7
 800557c:	f000 faac 	bl	8005ad8 <_realloc_r>
 8005580:	1e06      	subs	r6, r0, #0
 8005582:	d1e0      	bne.n	8005546 <__ssputs_r+0x76>
 8005584:	0038      	movs	r0, r7
 8005586:	6921      	ldr	r1, [r4, #16]
 8005588:	f7ff fe7e 	bl	8005288 <_free_r>
 800558c:	e7c7      	b.n	800551e <__ssputs_r+0x4e>
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	fffffb7f 	.word	0xfffffb7f

08005594 <_svfiprintf_r>:
 8005594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005596:	b0a1      	sub	sp, #132	; 0x84
 8005598:	9003      	str	r0, [sp, #12]
 800559a:	001d      	movs	r5, r3
 800559c:	898b      	ldrh	r3, [r1, #12]
 800559e:	000f      	movs	r7, r1
 80055a0:	0016      	movs	r6, r2
 80055a2:	061b      	lsls	r3, r3, #24
 80055a4:	d511      	bpl.n	80055ca <_svfiprintf_r+0x36>
 80055a6:	690b      	ldr	r3, [r1, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10e      	bne.n	80055ca <_svfiprintf_r+0x36>
 80055ac:	2140      	movs	r1, #64	; 0x40
 80055ae:	f7ff fed7 	bl	8005360 <_malloc_r>
 80055b2:	6038      	str	r0, [r7, #0]
 80055b4:	6138      	str	r0, [r7, #16]
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d105      	bne.n	80055c6 <_svfiprintf_r+0x32>
 80055ba:	230c      	movs	r3, #12
 80055bc:	9a03      	ldr	r2, [sp, #12]
 80055be:	3801      	subs	r0, #1
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	b021      	add	sp, #132	; 0x84
 80055c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055c6:	2340      	movs	r3, #64	; 0x40
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	2300      	movs	r3, #0
 80055cc:	ac08      	add	r4, sp, #32
 80055ce:	6163      	str	r3, [r4, #20]
 80055d0:	3320      	adds	r3, #32
 80055d2:	7663      	strb	r3, [r4, #25]
 80055d4:	3310      	adds	r3, #16
 80055d6:	76a3      	strb	r3, [r4, #26]
 80055d8:	9507      	str	r5, [sp, #28]
 80055da:	0035      	movs	r5, r6
 80055dc:	782b      	ldrb	r3, [r5, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <_svfiprintf_r+0x52>
 80055e2:	2b25      	cmp	r3, #37	; 0x25
 80055e4:	d147      	bne.n	8005676 <_svfiprintf_r+0xe2>
 80055e6:	1bab      	subs	r3, r5, r6
 80055e8:	9305      	str	r3, [sp, #20]
 80055ea:	42b5      	cmp	r5, r6
 80055ec:	d00c      	beq.n	8005608 <_svfiprintf_r+0x74>
 80055ee:	0032      	movs	r2, r6
 80055f0:	0039      	movs	r1, r7
 80055f2:	9803      	ldr	r0, [sp, #12]
 80055f4:	f7ff ff6c 	bl	80054d0 <__ssputs_r>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d100      	bne.n	80055fe <_svfiprintf_r+0x6a>
 80055fc:	e0ae      	b.n	800575c <_svfiprintf_r+0x1c8>
 80055fe:	6962      	ldr	r2, [r4, #20]
 8005600:	9b05      	ldr	r3, [sp, #20]
 8005602:	4694      	mov	ip, r2
 8005604:	4463      	add	r3, ip
 8005606:	6163      	str	r3, [r4, #20]
 8005608:	782b      	ldrb	r3, [r5, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d100      	bne.n	8005610 <_svfiprintf_r+0x7c>
 800560e:	e0a5      	b.n	800575c <_svfiprintf_r+0x1c8>
 8005610:	2201      	movs	r2, #1
 8005612:	2300      	movs	r3, #0
 8005614:	4252      	negs	r2, r2
 8005616:	6062      	str	r2, [r4, #4]
 8005618:	a904      	add	r1, sp, #16
 800561a:	3254      	adds	r2, #84	; 0x54
 800561c:	1852      	adds	r2, r2, r1
 800561e:	1c6e      	adds	r6, r5, #1
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	60e3      	str	r3, [r4, #12]
 8005624:	60a3      	str	r3, [r4, #8]
 8005626:	7013      	strb	r3, [r2, #0]
 8005628:	65a3      	str	r3, [r4, #88]	; 0x58
 800562a:	2205      	movs	r2, #5
 800562c:	7831      	ldrb	r1, [r6, #0]
 800562e:	4854      	ldr	r0, [pc, #336]	; (8005780 <_svfiprintf_r+0x1ec>)
 8005630:	f000 fa34 	bl	8005a9c <memchr>
 8005634:	1c75      	adds	r5, r6, #1
 8005636:	2800      	cmp	r0, #0
 8005638:	d11f      	bne.n	800567a <_svfiprintf_r+0xe6>
 800563a:	6822      	ldr	r2, [r4, #0]
 800563c:	06d3      	lsls	r3, r2, #27
 800563e:	d504      	bpl.n	800564a <_svfiprintf_r+0xb6>
 8005640:	2353      	movs	r3, #83	; 0x53
 8005642:	a904      	add	r1, sp, #16
 8005644:	185b      	adds	r3, r3, r1
 8005646:	2120      	movs	r1, #32
 8005648:	7019      	strb	r1, [r3, #0]
 800564a:	0713      	lsls	r3, r2, #28
 800564c:	d504      	bpl.n	8005658 <_svfiprintf_r+0xc4>
 800564e:	2353      	movs	r3, #83	; 0x53
 8005650:	a904      	add	r1, sp, #16
 8005652:	185b      	adds	r3, r3, r1
 8005654:	212b      	movs	r1, #43	; 0x2b
 8005656:	7019      	strb	r1, [r3, #0]
 8005658:	7833      	ldrb	r3, [r6, #0]
 800565a:	2b2a      	cmp	r3, #42	; 0x2a
 800565c:	d016      	beq.n	800568c <_svfiprintf_r+0xf8>
 800565e:	0035      	movs	r5, r6
 8005660:	2100      	movs	r1, #0
 8005662:	200a      	movs	r0, #10
 8005664:	68e3      	ldr	r3, [r4, #12]
 8005666:	782a      	ldrb	r2, [r5, #0]
 8005668:	1c6e      	adds	r6, r5, #1
 800566a:	3a30      	subs	r2, #48	; 0x30
 800566c:	2a09      	cmp	r2, #9
 800566e:	d94e      	bls.n	800570e <_svfiprintf_r+0x17a>
 8005670:	2900      	cmp	r1, #0
 8005672:	d111      	bne.n	8005698 <_svfiprintf_r+0x104>
 8005674:	e017      	b.n	80056a6 <_svfiprintf_r+0x112>
 8005676:	3501      	adds	r5, #1
 8005678:	e7b0      	b.n	80055dc <_svfiprintf_r+0x48>
 800567a:	4b41      	ldr	r3, [pc, #260]	; (8005780 <_svfiprintf_r+0x1ec>)
 800567c:	6822      	ldr	r2, [r4, #0]
 800567e:	1ac0      	subs	r0, r0, r3
 8005680:	2301      	movs	r3, #1
 8005682:	4083      	lsls	r3, r0
 8005684:	4313      	orrs	r3, r2
 8005686:	002e      	movs	r6, r5
 8005688:	6023      	str	r3, [r4, #0]
 800568a:	e7ce      	b.n	800562a <_svfiprintf_r+0x96>
 800568c:	9b07      	ldr	r3, [sp, #28]
 800568e:	1d19      	adds	r1, r3, #4
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	9107      	str	r1, [sp, #28]
 8005694:	2b00      	cmp	r3, #0
 8005696:	db01      	blt.n	800569c <_svfiprintf_r+0x108>
 8005698:	930b      	str	r3, [sp, #44]	; 0x2c
 800569a:	e004      	b.n	80056a6 <_svfiprintf_r+0x112>
 800569c:	425b      	negs	r3, r3
 800569e:	60e3      	str	r3, [r4, #12]
 80056a0:	2302      	movs	r3, #2
 80056a2:	4313      	orrs	r3, r2
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	782b      	ldrb	r3, [r5, #0]
 80056a8:	2b2e      	cmp	r3, #46	; 0x2e
 80056aa:	d10a      	bne.n	80056c2 <_svfiprintf_r+0x12e>
 80056ac:	786b      	ldrb	r3, [r5, #1]
 80056ae:	2b2a      	cmp	r3, #42	; 0x2a
 80056b0:	d135      	bne.n	800571e <_svfiprintf_r+0x18a>
 80056b2:	9b07      	ldr	r3, [sp, #28]
 80056b4:	3502      	adds	r5, #2
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	9207      	str	r2, [sp, #28]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db2b      	blt.n	8005718 <_svfiprintf_r+0x184>
 80056c0:	9309      	str	r3, [sp, #36]	; 0x24
 80056c2:	4e30      	ldr	r6, [pc, #192]	; (8005784 <_svfiprintf_r+0x1f0>)
 80056c4:	2203      	movs	r2, #3
 80056c6:	0030      	movs	r0, r6
 80056c8:	7829      	ldrb	r1, [r5, #0]
 80056ca:	f000 f9e7 	bl	8005a9c <memchr>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d006      	beq.n	80056e0 <_svfiprintf_r+0x14c>
 80056d2:	2340      	movs	r3, #64	; 0x40
 80056d4:	1b80      	subs	r0, r0, r6
 80056d6:	4083      	lsls	r3, r0
 80056d8:	6822      	ldr	r2, [r4, #0]
 80056da:	3501      	adds	r5, #1
 80056dc:	4313      	orrs	r3, r2
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	7829      	ldrb	r1, [r5, #0]
 80056e2:	2206      	movs	r2, #6
 80056e4:	4828      	ldr	r0, [pc, #160]	; (8005788 <_svfiprintf_r+0x1f4>)
 80056e6:	1c6e      	adds	r6, r5, #1
 80056e8:	7621      	strb	r1, [r4, #24]
 80056ea:	f000 f9d7 	bl	8005a9c <memchr>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d03c      	beq.n	800576c <_svfiprintf_r+0x1d8>
 80056f2:	4b26      	ldr	r3, [pc, #152]	; (800578c <_svfiprintf_r+0x1f8>)
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d125      	bne.n	8005744 <_svfiprintf_r+0x1b0>
 80056f8:	2207      	movs	r2, #7
 80056fa:	9b07      	ldr	r3, [sp, #28]
 80056fc:	3307      	adds	r3, #7
 80056fe:	4393      	bics	r3, r2
 8005700:	3308      	adds	r3, #8
 8005702:	9307      	str	r3, [sp, #28]
 8005704:	6963      	ldr	r3, [r4, #20]
 8005706:	9a04      	ldr	r2, [sp, #16]
 8005708:	189b      	adds	r3, r3, r2
 800570a:	6163      	str	r3, [r4, #20]
 800570c:	e765      	b.n	80055da <_svfiprintf_r+0x46>
 800570e:	4343      	muls	r3, r0
 8005710:	0035      	movs	r5, r6
 8005712:	2101      	movs	r1, #1
 8005714:	189b      	adds	r3, r3, r2
 8005716:	e7a6      	b.n	8005666 <_svfiprintf_r+0xd2>
 8005718:	2301      	movs	r3, #1
 800571a:	425b      	negs	r3, r3
 800571c:	e7d0      	b.n	80056c0 <_svfiprintf_r+0x12c>
 800571e:	2300      	movs	r3, #0
 8005720:	200a      	movs	r0, #10
 8005722:	001a      	movs	r2, r3
 8005724:	3501      	adds	r5, #1
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	7829      	ldrb	r1, [r5, #0]
 800572a:	1c6e      	adds	r6, r5, #1
 800572c:	3930      	subs	r1, #48	; 0x30
 800572e:	2909      	cmp	r1, #9
 8005730:	d903      	bls.n	800573a <_svfiprintf_r+0x1a6>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d0c5      	beq.n	80056c2 <_svfiprintf_r+0x12e>
 8005736:	9209      	str	r2, [sp, #36]	; 0x24
 8005738:	e7c3      	b.n	80056c2 <_svfiprintf_r+0x12e>
 800573a:	4342      	muls	r2, r0
 800573c:	0035      	movs	r5, r6
 800573e:	2301      	movs	r3, #1
 8005740:	1852      	adds	r2, r2, r1
 8005742:	e7f1      	b.n	8005728 <_svfiprintf_r+0x194>
 8005744:	ab07      	add	r3, sp, #28
 8005746:	9300      	str	r3, [sp, #0]
 8005748:	003a      	movs	r2, r7
 800574a:	0021      	movs	r1, r4
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <_svfiprintf_r+0x1fc>)
 800574e:	9803      	ldr	r0, [sp, #12]
 8005750:	e000      	b.n	8005754 <_svfiprintf_r+0x1c0>
 8005752:	bf00      	nop
 8005754:	9004      	str	r0, [sp, #16]
 8005756:	9b04      	ldr	r3, [sp, #16]
 8005758:	3301      	adds	r3, #1
 800575a:	d1d3      	bne.n	8005704 <_svfiprintf_r+0x170>
 800575c:	89bb      	ldrh	r3, [r7, #12]
 800575e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005760:	065b      	lsls	r3, r3, #25
 8005762:	d400      	bmi.n	8005766 <_svfiprintf_r+0x1d2>
 8005764:	e72d      	b.n	80055c2 <_svfiprintf_r+0x2e>
 8005766:	2001      	movs	r0, #1
 8005768:	4240      	negs	r0, r0
 800576a:	e72a      	b.n	80055c2 <_svfiprintf_r+0x2e>
 800576c:	ab07      	add	r3, sp, #28
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	003a      	movs	r2, r7
 8005772:	0021      	movs	r1, r4
 8005774:	4b06      	ldr	r3, [pc, #24]	; (8005790 <_svfiprintf_r+0x1fc>)
 8005776:	9803      	ldr	r0, [sp, #12]
 8005778:	f000 f87c 	bl	8005874 <_printf_i>
 800577c:	e7ea      	b.n	8005754 <_svfiprintf_r+0x1c0>
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	08005bfc 	.word	0x08005bfc
 8005784:	08005c02 	.word	0x08005c02
 8005788:	08005c06 	.word	0x08005c06
 800578c:	00000000 	.word	0x00000000
 8005790:	080054d1 	.word	0x080054d1

08005794 <_printf_common>:
 8005794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005796:	0015      	movs	r5, r2
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	688a      	ldr	r2, [r1, #8]
 800579c:	690b      	ldr	r3, [r1, #16]
 800579e:	000c      	movs	r4, r1
 80057a0:	9000      	str	r0, [sp, #0]
 80057a2:	4293      	cmp	r3, r2
 80057a4:	da00      	bge.n	80057a8 <_printf_common+0x14>
 80057a6:	0013      	movs	r3, r2
 80057a8:	0022      	movs	r2, r4
 80057aa:	602b      	str	r3, [r5, #0]
 80057ac:	3243      	adds	r2, #67	; 0x43
 80057ae:	7812      	ldrb	r2, [r2, #0]
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	d001      	beq.n	80057b8 <_printf_common+0x24>
 80057b4:	3301      	adds	r3, #1
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	069b      	lsls	r3, r3, #26
 80057bc:	d502      	bpl.n	80057c4 <_printf_common+0x30>
 80057be:	682b      	ldr	r3, [r5, #0]
 80057c0:	3302      	adds	r3, #2
 80057c2:	602b      	str	r3, [r5, #0]
 80057c4:	6822      	ldr	r2, [r4, #0]
 80057c6:	2306      	movs	r3, #6
 80057c8:	0017      	movs	r7, r2
 80057ca:	401f      	ands	r7, r3
 80057cc:	421a      	tst	r2, r3
 80057ce:	d027      	beq.n	8005820 <_printf_common+0x8c>
 80057d0:	0023      	movs	r3, r4
 80057d2:	3343      	adds	r3, #67	; 0x43
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	4193      	sbcs	r3, r2
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	0692      	lsls	r2, r2, #26
 80057de:	d430      	bmi.n	8005842 <_printf_common+0xae>
 80057e0:	0022      	movs	r2, r4
 80057e2:	9901      	ldr	r1, [sp, #4]
 80057e4:	9800      	ldr	r0, [sp, #0]
 80057e6:	9e08      	ldr	r6, [sp, #32]
 80057e8:	3243      	adds	r2, #67	; 0x43
 80057ea:	47b0      	blx	r6
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d025      	beq.n	800583c <_printf_common+0xa8>
 80057f0:	2306      	movs	r3, #6
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	682a      	ldr	r2, [r5, #0]
 80057f6:	68e1      	ldr	r1, [r4, #12]
 80057f8:	2500      	movs	r5, #0
 80057fa:	4003      	ands	r3, r0
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d103      	bne.n	8005808 <_printf_common+0x74>
 8005800:	1a8d      	subs	r5, r1, r2
 8005802:	43eb      	mvns	r3, r5
 8005804:	17db      	asrs	r3, r3, #31
 8005806:	401d      	ands	r5, r3
 8005808:	68a3      	ldr	r3, [r4, #8]
 800580a:	6922      	ldr	r2, [r4, #16]
 800580c:	4293      	cmp	r3, r2
 800580e:	dd01      	ble.n	8005814 <_printf_common+0x80>
 8005810:	1a9b      	subs	r3, r3, r2
 8005812:	18ed      	adds	r5, r5, r3
 8005814:	2700      	movs	r7, #0
 8005816:	42bd      	cmp	r5, r7
 8005818:	d120      	bne.n	800585c <_printf_common+0xc8>
 800581a:	2000      	movs	r0, #0
 800581c:	e010      	b.n	8005840 <_printf_common+0xac>
 800581e:	3701      	adds	r7, #1
 8005820:	68e3      	ldr	r3, [r4, #12]
 8005822:	682a      	ldr	r2, [r5, #0]
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	42bb      	cmp	r3, r7
 8005828:	ddd2      	ble.n	80057d0 <_printf_common+0x3c>
 800582a:	0022      	movs	r2, r4
 800582c:	2301      	movs	r3, #1
 800582e:	9901      	ldr	r1, [sp, #4]
 8005830:	9800      	ldr	r0, [sp, #0]
 8005832:	9e08      	ldr	r6, [sp, #32]
 8005834:	3219      	adds	r2, #25
 8005836:	47b0      	blx	r6
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d1f0      	bne.n	800581e <_printf_common+0x8a>
 800583c:	2001      	movs	r0, #1
 800583e:	4240      	negs	r0, r0
 8005840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005842:	2030      	movs	r0, #48	; 0x30
 8005844:	18e1      	adds	r1, r4, r3
 8005846:	3143      	adds	r1, #67	; 0x43
 8005848:	7008      	strb	r0, [r1, #0]
 800584a:	0021      	movs	r1, r4
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	3145      	adds	r1, #69	; 0x45
 8005850:	7809      	ldrb	r1, [r1, #0]
 8005852:	18a2      	adds	r2, r4, r2
 8005854:	3243      	adds	r2, #67	; 0x43
 8005856:	3302      	adds	r3, #2
 8005858:	7011      	strb	r1, [r2, #0]
 800585a:	e7c1      	b.n	80057e0 <_printf_common+0x4c>
 800585c:	0022      	movs	r2, r4
 800585e:	2301      	movs	r3, #1
 8005860:	9901      	ldr	r1, [sp, #4]
 8005862:	9800      	ldr	r0, [sp, #0]
 8005864:	9e08      	ldr	r6, [sp, #32]
 8005866:	321a      	adds	r2, #26
 8005868:	47b0      	blx	r6
 800586a:	1c43      	adds	r3, r0, #1
 800586c:	d0e6      	beq.n	800583c <_printf_common+0xa8>
 800586e:	3701      	adds	r7, #1
 8005870:	e7d1      	b.n	8005816 <_printf_common+0x82>
	...

08005874 <_printf_i>:
 8005874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005876:	b08b      	sub	sp, #44	; 0x2c
 8005878:	9206      	str	r2, [sp, #24]
 800587a:	000a      	movs	r2, r1
 800587c:	3243      	adds	r2, #67	; 0x43
 800587e:	9307      	str	r3, [sp, #28]
 8005880:	9005      	str	r0, [sp, #20]
 8005882:	9204      	str	r2, [sp, #16]
 8005884:	7e0a      	ldrb	r2, [r1, #24]
 8005886:	000c      	movs	r4, r1
 8005888:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800588a:	2a78      	cmp	r2, #120	; 0x78
 800588c:	d807      	bhi.n	800589e <_printf_i+0x2a>
 800588e:	2a62      	cmp	r2, #98	; 0x62
 8005890:	d809      	bhi.n	80058a6 <_printf_i+0x32>
 8005892:	2a00      	cmp	r2, #0
 8005894:	d100      	bne.n	8005898 <_printf_i+0x24>
 8005896:	e0c1      	b.n	8005a1c <_printf_i+0x1a8>
 8005898:	2a58      	cmp	r2, #88	; 0x58
 800589a:	d100      	bne.n	800589e <_printf_i+0x2a>
 800589c:	e08c      	b.n	80059b8 <_printf_i+0x144>
 800589e:	0026      	movs	r6, r4
 80058a0:	3642      	adds	r6, #66	; 0x42
 80058a2:	7032      	strb	r2, [r6, #0]
 80058a4:	e022      	b.n	80058ec <_printf_i+0x78>
 80058a6:	0010      	movs	r0, r2
 80058a8:	3863      	subs	r0, #99	; 0x63
 80058aa:	2815      	cmp	r0, #21
 80058ac:	d8f7      	bhi.n	800589e <_printf_i+0x2a>
 80058ae:	f7fa fc33 	bl	8000118 <__gnu_thumb1_case_shi>
 80058b2:	0016      	.short	0x0016
 80058b4:	fff6001f 	.word	0xfff6001f
 80058b8:	fff6fff6 	.word	0xfff6fff6
 80058bc:	001ffff6 	.word	0x001ffff6
 80058c0:	fff6fff6 	.word	0xfff6fff6
 80058c4:	fff6fff6 	.word	0xfff6fff6
 80058c8:	003600a8 	.word	0x003600a8
 80058cc:	fff6009a 	.word	0xfff6009a
 80058d0:	00b9fff6 	.word	0x00b9fff6
 80058d4:	0036fff6 	.word	0x0036fff6
 80058d8:	fff6fff6 	.word	0xfff6fff6
 80058dc:	009e      	.short	0x009e
 80058de:	0026      	movs	r6, r4
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	3642      	adds	r6, #66	; 0x42
 80058e4:	1d11      	adds	r1, r2, #4
 80058e6:	6019      	str	r1, [r3, #0]
 80058e8:	6813      	ldr	r3, [r2, #0]
 80058ea:	7033      	strb	r3, [r6, #0]
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0a7      	b.n	8005a40 <_printf_i+0x1cc>
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	6819      	ldr	r1, [r3, #0]
 80058f4:	1d0a      	adds	r2, r1, #4
 80058f6:	0605      	lsls	r5, r0, #24
 80058f8:	d50b      	bpl.n	8005912 <_printf_i+0x9e>
 80058fa:	680d      	ldr	r5, [r1, #0]
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	2d00      	cmp	r5, #0
 8005900:	da03      	bge.n	800590a <_printf_i+0x96>
 8005902:	232d      	movs	r3, #45	; 0x2d
 8005904:	9a04      	ldr	r2, [sp, #16]
 8005906:	426d      	negs	r5, r5
 8005908:	7013      	strb	r3, [r2, #0]
 800590a:	4b61      	ldr	r3, [pc, #388]	; (8005a90 <_printf_i+0x21c>)
 800590c:	270a      	movs	r7, #10
 800590e:	9303      	str	r3, [sp, #12]
 8005910:	e01b      	b.n	800594a <_printf_i+0xd6>
 8005912:	680d      	ldr	r5, [r1, #0]
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	0641      	lsls	r1, r0, #25
 8005918:	d5f1      	bpl.n	80058fe <_printf_i+0x8a>
 800591a:	b22d      	sxth	r5, r5
 800591c:	e7ef      	b.n	80058fe <_printf_i+0x8a>
 800591e:	680d      	ldr	r5, [r1, #0]
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	1d08      	adds	r0, r1, #4
 8005924:	6018      	str	r0, [r3, #0]
 8005926:	062e      	lsls	r6, r5, #24
 8005928:	d501      	bpl.n	800592e <_printf_i+0xba>
 800592a:	680d      	ldr	r5, [r1, #0]
 800592c:	e003      	b.n	8005936 <_printf_i+0xc2>
 800592e:	066d      	lsls	r5, r5, #25
 8005930:	d5fb      	bpl.n	800592a <_printf_i+0xb6>
 8005932:	680d      	ldr	r5, [r1, #0]
 8005934:	b2ad      	uxth	r5, r5
 8005936:	4b56      	ldr	r3, [pc, #344]	; (8005a90 <_printf_i+0x21c>)
 8005938:	2708      	movs	r7, #8
 800593a:	9303      	str	r3, [sp, #12]
 800593c:	2a6f      	cmp	r2, #111	; 0x6f
 800593e:	d000      	beq.n	8005942 <_printf_i+0xce>
 8005940:	3702      	adds	r7, #2
 8005942:	0023      	movs	r3, r4
 8005944:	2200      	movs	r2, #0
 8005946:	3343      	adds	r3, #67	; 0x43
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	6863      	ldr	r3, [r4, #4]
 800594c:	60a3      	str	r3, [r4, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	db03      	blt.n	800595a <_printf_i+0xe6>
 8005952:	2204      	movs	r2, #4
 8005954:	6821      	ldr	r1, [r4, #0]
 8005956:	4391      	bics	r1, r2
 8005958:	6021      	str	r1, [r4, #0]
 800595a:	2d00      	cmp	r5, #0
 800595c:	d102      	bne.n	8005964 <_printf_i+0xf0>
 800595e:	9e04      	ldr	r6, [sp, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00c      	beq.n	800597e <_printf_i+0x10a>
 8005964:	9e04      	ldr	r6, [sp, #16]
 8005966:	0028      	movs	r0, r5
 8005968:	0039      	movs	r1, r7
 800596a:	f7fa fc65 	bl	8000238 <__aeabi_uidivmod>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	3e01      	subs	r6, #1
 8005972:	5c5b      	ldrb	r3, [r3, r1]
 8005974:	7033      	strb	r3, [r6, #0]
 8005976:	002b      	movs	r3, r5
 8005978:	0005      	movs	r5, r0
 800597a:	429f      	cmp	r7, r3
 800597c:	d9f3      	bls.n	8005966 <_printf_i+0xf2>
 800597e:	2f08      	cmp	r7, #8
 8005980:	d109      	bne.n	8005996 <_printf_i+0x122>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	07db      	lsls	r3, r3, #31
 8005986:	d506      	bpl.n	8005996 <_printf_i+0x122>
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	6922      	ldr	r2, [r4, #16]
 800598c:	4293      	cmp	r3, r2
 800598e:	dc02      	bgt.n	8005996 <_printf_i+0x122>
 8005990:	2330      	movs	r3, #48	; 0x30
 8005992:	3e01      	subs	r6, #1
 8005994:	7033      	strb	r3, [r6, #0]
 8005996:	9b04      	ldr	r3, [sp, #16]
 8005998:	1b9b      	subs	r3, r3, r6
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	0021      	movs	r1, r4
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	9805      	ldr	r0, [sp, #20]
 80059a4:	9b06      	ldr	r3, [sp, #24]
 80059a6:	aa09      	add	r2, sp, #36	; 0x24
 80059a8:	f7ff fef4 	bl	8005794 <_printf_common>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d14c      	bne.n	8005a4a <_printf_i+0x1d6>
 80059b0:	2001      	movs	r0, #1
 80059b2:	4240      	negs	r0, r0
 80059b4:	b00b      	add	sp, #44	; 0x2c
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	3145      	adds	r1, #69	; 0x45
 80059ba:	700a      	strb	r2, [r1, #0]
 80059bc:	4a34      	ldr	r2, [pc, #208]	; (8005a90 <_printf_i+0x21c>)
 80059be:	9203      	str	r2, [sp, #12]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	6821      	ldr	r1, [r4, #0]
 80059c4:	ca20      	ldmia	r2!, {r5}
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	0608      	lsls	r0, r1, #24
 80059ca:	d516      	bpl.n	80059fa <_printf_i+0x186>
 80059cc:	07cb      	lsls	r3, r1, #31
 80059ce:	d502      	bpl.n	80059d6 <_printf_i+0x162>
 80059d0:	2320      	movs	r3, #32
 80059d2:	4319      	orrs	r1, r3
 80059d4:	6021      	str	r1, [r4, #0]
 80059d6:	2710      	movs	r7, #16
 80059d8:	2d00      	cmp	r5, #0
 80059da:	d1b2      	bne.n	8005942 <_printf_i+0xce>
 80059dc:	2320      	movs	r3, #32
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	439a      	bics	r2, r3
 80059e2:	6022      	str	r2, [r4, #0]
 80059e4:	e7ad      	b.n	8005942 <_printf_i+0xce>
 80059e6:	2220      	movs	r2, #32
 80059e8:	6809      	ldr	r1, [r1, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	6022      	str	r2, [r4, #0]
 80059ee:	0022      	movs	r2, r4
 80059f0:	2178      	movs	r1, #120	; 0x78
 80059f2:	3245      	adds	r2, #69	; 0x45
 80059f4:	7011      	strb	r1, [r2, #0]
 80059f6:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <_printf_i+0x220>)
 80059f8:	e7e1      	b.n	80059be <_printf_i+0x14a>
 80059fa:	0648      	lsls	r0, r1, #25
 80059fc:	d5e6      	bpl.n	80059cc <_printf_i+0x158>
 80059fe:	b2ad      	uxth	r5, r5
 8005a00:	e7e4      	b.n	80059cc <_printf_i+0x158>
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	680d      	ldr	r5, [r1, #0]
 8005a06:	1d10      	adds	r0, r2, #4
 8005a08:	6949      	ldr	r1, [r1, #20]
 8005a0a:	6018      	str	r0, [r3, #0]
 8005a0c:	6813      	ldr	r3, [r2, #0]
 8005a0e:	062e      	lsls	r6, r5, #24
 8005a10:	d501      	bpl.n	8005a16 <_printf_i+0x1a2>
 8005a12:	6019      	str	r1, [r3, #0]
 8005a14:	e002      	b.n	8005a1c <_printf_i+0x1a8>
 8005a16:	066d      	lsls	r5, r5, #25
 8005a18:	d5fb      	bpl.n	8005a12 <_printf_i+0x19e>
 8005a1a:	8019      	strh	r1, [r3, #0]
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9e04      	ldr	r6, [sp, #16]
 8005a20:	6123      	str	r3, [r4, #16]
 8005a22:	e7bb      	b.n	800599c <_printf_i+0x128>
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	1d11      	adds	r1, r2, #4
 8005a28:	6019      	str	r1, [r3, #0]
 8005a2a:	6816      	ldr	r6, [r2, #0]
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	0030      	movs	r0, r6
 8005a30:	6862      	ldr	r2, [r4, #4]
 8005a32:	f000 f833 	bl	8005a9c <memchr>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d001      	beq.n	8005a3e <_printf_i+0x1ca>
 8005a3a:	1b80      	subs	r0, r0, r6
 8005a3c:	6060      	str	r0, [r4, #4]
 8005a3e:	6863      	ldr	r3, [r4, #4]
 8005a40:	6123      	str	r3, [r4, #16]
 8005a42:	2300      	movs	r3, #0
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	7013      	strb	r3, [r2, #0]
 8005a48:	e7a8      	b.n	800599c <_printf_i+0x128>
 8005a4a:	6923      	ldr	r3, [r4, #16]
 8005a4c:	0032      	movs	r2, r6
 8005a4e:	9906      	ldr	r1, [sp, #24]
 8005a50:	9805      	ldr	r0, [sp, #20]
 8005a52:	9d07      	ldr	r5, [sp, #28]
 8005a54:	47a8      	blx	r5
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	d0aa      	beq.n	80059b0 <_printf_i+0x13c>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	079b      	lsls	r3, r3, #30
 8005a5e:	d415      	bmi.n	8005a8c <_printf_i+0x218>
 8005a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a62:	68e0      	ldr	r0, [r4, #12]
 8005a64:	4298      	cmp	r0, r3
 8005a66:	daa5      	bge.n	80059b4 <_printf_i+0x140>
 8005a68:	0018      	movs	r0, r3
 8005a6a:	e7a3      	b.n	80059b4 <_printf_i+0x140>
 8005a6c:	0022      	movs	r2, r4
 8005a6e:	2301      	movs	r3, #1
 8005a70:	9906      	ldr	r1, [sp, #24]
 8005a72:	9805      	ldr	r0, [sp, #20]
 8005a74:	9e07      	ldr	r6, [sp, #28]
 8005a76:	3219      	adds	r2, #25
 8005a78:	47b0      	blx	r6
 8005a7a:	1c43      	adds	r3, r0, #1
 8005a7c:	d098      	beq.n	80059b0 <_printf_i+0x13c>
 8005a7e:	3501      	adds	r5, #1
 8005a80:	68e3      	ldr	r3, [r4, #12]
 8005a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a84:	1a9b      	subs	r3, r3, r2
 8005a86:	42ab      	cmp	r3, r5
 8005a88:	dcf0      	bgt.n	8005a6c <_printf_i+0x1f8>
 8005a8a:	e7e9      	b.n	8005a60 <_printf_i+0x1ec>
 8005a8c:	2500      	movs	r5, #0
 8005a8e:	e7f7      	b.n	8005a80 <_printf_i+0x20c>
 8005a90:	08005c0d 	.word	0x08005c0d
 8005a94:	08005c1e 	.word	0x08005c1e

08005a98 <__retarget_lock_acquire_recursive>:
 8005a98:	4770      	bx	lr

08005a9a <__retarget_lock_release_recursive>:
 8005a9a:	4770      	bx	lr

08005a9c <memchr>:
 8005a9c:	b2c9      	uxtb	r1, r1
 8005a9e:	1882      	adds	r2, r0, r2
 8005aa0:	4290      	cmp	r0, r2
 8005aa2:	d101      	bne.n	8005aa8 <memchr+0xc>
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4770      	bx	lr
 8005aa8:	7803      	ldrb	r3, [r0, #0]
 8005aaa:	428b      	cmp	r3, r1
 8005aac:	d0fb      	beq.n	8005aa6 <memchr+0xa>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	e7f6      	b.n	8005aa0 <memchr+0x4>

08005ab2 <memmove>:
 8005ab2:	b510      	push	{r4, lr}
 8005ab4:	4288      	cmp	r0, r1
 8005ab6:	d902      	bls.n	8005abe <memmove+0xc>
 8005ab8:	188b      	adds	r3, r1, r2
 8005aba:	4298      	cmp	r0, r3
 8005abc:	d303      	bcc.n	8005ac6 <memmove+0x14>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	e007      	b.n	8005ad2 <memmove+0x20>
 8005ac2:	5c8b      	ldrb	r3, [r1, r2]
 8005ac4:	5483      	strb	r3, [r0, r2]
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	d2fb      	bcs.n	8005ac2 <memmove+0x10>
 8005aca:	bd10      	pop	{r4, pc}
 8005acc:	5ccc      	ldrb	r4, [r1, r3]
 8005ace:	54c4      	strb	r4, [r0, r3]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d1fa      	bne.n	8005acc <memmove+0x1a>
 8005ad6:	e7f8      	b.n	8005aca <memmove+0x18>

08005ad8 <_realloc_r>:
 8005ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ada:	0007      	movs	r7, r0
 8005adc:	000e      	movs	r6, r1
 8005ade:	0014      	movs	r4, r2
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	d105      	bne.n	8005af0 <_realloc_r+0x18>
 8005ae4:	0011      	movs	r1, r2
 8005ae6:	f7ff fc3b 	bl	8005360 <_malloc_r>
 8005aea:	0005      	movs	r5, r0
 8005aec:	0028      	movs	r0, r5
 8005aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	d103      	bne.n	8005afc <_realloc_r+0x24>
 8005af4:	f7ff fbc8 	bl	8005288 <_free_r>
 8005af8:	0025      	movs	r5, r4
 8005afa:	e7f7      	b.n	8005aec <_realloc_r+0x14>
 8005afc:	f000 f81b 	bl	8005b36 <_malloc_usable_size_r>
 8005b00:	9001      	str	r0, [sp, #4]
 8005b02:	4284      	cmp	r4, r0
 8005b04:	d803      	bhi.n	8005b0e <_realloc_r+0x36>
 8005b06:	0035      	movs	r5, r6
 8005b08:	0843      	lsrs	r3, r0, #1
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	d3ee      	bcc.n	8005aec <_realloc_r+0x14>
 8005b0e:	0021      	movs	r1, r4
 8005b10:	0038      	movs	r0, r7
 8005b12:	f7ff fc25 	bl	8005360 <_malloc_r>
 8005b16:	1e05      	subs	r5, r0, #0
 8005b18:	d0e8      	beq.n	8005aec <_realloc_r+0x14>
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	0022      	movs	r2, r4
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	d900      	bls.n	8005b24 <_realloc_r+0x4c>
 8005b22:	001a      	movs	r2, r3
 8005b24:	0031      	movs	r1, r6
 8005b26:	0028      	movs	r0, r5
 8005b28:	f7ff fb9c 	bl	8005264 <memcpy>
 8005b2c:	0031      	movs	r1, r6
 8005b2e:	0038      	movs	r0, r7
 8005b30:	f7ff fbaa 	bl	8005288 <_free_r>
 8005b34:	e7da      	b.n	8005aec <_realloc_r+0x14>

08005b36 <_malloc_usable_size_r>:
 8005b36:	1f0b      	subs	r3, r1, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	1f18      	subs	r0, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	da01      	bge.n	8005b44 <_malloc_usable_size_r+0xe>
 8005b40:	580b      	ldr	r3, [r1, r0]
 8005b42:	18c0      	adds	r0, r0, r3
 8005b44:	4770      	bx	lr
	...

08005b48 <_init>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr

08005b54 <_fini>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr
